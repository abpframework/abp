!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("primeng/table"),require("@angular/router"),require("@angular/forms"),require("@ngxs/router-plugin"),require("@ngxs/store"),require("angular-oauth2-oidc"),require("rxjs"),require("rxjs/operators"),require("snq"),require("@angular/common/http"),require("@angular/animations")):"function"==typeof define&&define.amd?define("@abp/ng.account",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","primeng/table","@angular/router","@angular/forms","@ngxs/router-plugin","@ngxs/store","angular-oauth2-oidc","rxjs","rxjs/operators","snq","@angular/common/http","@angular/animations"],n):n(((e=e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng.account={}),e.ng_core,e.ng_theme_shared,e.ng.core,e.ngBootstrap,e.core$1,e.table,e.ng.router,e.ng.forms,e.routerPlugin,e.store,e.angularOauth2Oidc,e.rxjs,e.rxjs.operators,e.snq,e.ng.common.http,e.ng.animations)}(this,(function(e,n,t,r,a,o,i,s,c,l,p,u,d,m,b,f,g){"use strict";b=b&&b.hasOwnProperty("default")?b.default:b;var h=function(){return(h=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e}).apply(this,arguments)};function v(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)}function y(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i}var w=c.Validators.maxLength,A=(c.Validators.minLength,c.Validators.required),S=function(){function e(e,t,r,a,o){this.fb=e,this.oauthService=t,this.store=r,this.toasterService=a,this.options=o,this.oauthService.configure(this.store.selectSnapshot(n.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument(),this.form=this.fb.group({username:["",[A,w(255)]],password:["",[A,w(32)]],remember:[!1]})}return e.prototype.onSubmit=function(){var e=this;if(!this.form.invalid){this.inProgress=!0;var t=this.store.selectSnapshot(n.SessionState.getTenant);d.from(this.oauthService.fetchTokenUsingPasswordFlow(this.form.get("username").value,this.form.get("password").value,new f.HttpHeaders(h({},t&&t.id&&{__tenant:t.id})))).pipe(m.switchMap((function(){return e.store.dispatch(new n.GetAppConfiguration)})),m.tap((function(){var n=b((function(){return window.history.state})).redirectUrl||(e.options||{}).redirectUrl||"/";e.store.dispatch(new l.Navigate([n]))})),m.catchError((function(n){return e.toasterService.error(b((function(){return n.error.error_description}))||b((function(){return n.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(n)})),m.finalize((function(){return e.inProgress=!1}))).subscribe()}},e.decorators=[{type:r.Component,args:[{selector:"abp-login",template:'<abp-auth-wrapper [mainContentRef]="mainContentRef" [cancelContentRef]="cancelContentRef">\n  <ng-template #mainContentRef>\n    <h4>{{ \'AbpAccount::Login\' | abpLocalization }}</h4>\n    <strong>\n      {{ \'AbpAccount::AreYouANewUser\' | abpLocalization }}\n      <a class="text-decoration-none" routerLink="/account/register">{{ \'AbpAccount::Register\' | abpLocalization }}</a>\n    </strong>\n    <form [formGroup]="form" (ngSubmit)="onSubmit()" validateOnSubmit class="mt-4">\n      <div class="form-group">\n        <label for="login-input-user-name-or-email-address">{{\n          \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\n        }}</label>\n        <input\n          class="form-control"\n          type="text"\n          id="login-input-user-name-or-email-address"\n          formControlName="username"\n          autofocus\n        />\n      </div>\n      <div class="form-group">\n        <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\n        <input class="form-control" type="password" id="login-input-password" formControlName="password" />\n      </div>\n      <div class="form-check" validationTarget validationStyle>\n        <label class="form-check-label" for="login-input-remember-me">\n          <input class="form-check-input" type="checkbox" id="login-input-remember-me" formControlName="remember" />\n          {{ \'AbpAccount::RememberMe\' | abpLocalization }}\n        </label>\n      </div>\n      <abp-button\n        [loading]="inProgress"\n        buttonType="submit"\n        name="Action"\n        buttonClass="btn-block btn-lg mt-3 btn btn-primary"\n      >\n        {{ \'AbpAccount::Login\' | abpLocalization }}\n      </abp-button>\n    </form>\n  </ng-template>\n  <ng-template #cancelContentRef>\n    <div class="card-footer text-center border-0">\n      <a routerLink="/">\n        <button type="button" name="Action" value="Cancel" class="px-2 py-0 btn btn-link">\n          {{ \'AbpAccount::Cancel\' | abpLocalization }}\n        </button>\n      </a>\n    </div>\n  </ng-template>\n</abp-auth-wrapper>\n'}]}],e.ctorParameters=function(){return[{type:c.FormBuilder},{type:u.OAuthService},{type:p.Store},{type:t.ToasterService},{type:void 0,decorators:[{type:r.Optional},{type:r.Inject,args:["ACCOUNT_OPTIONS"]}]}]},e}();var C=function(){function e(){this.selectedTab=0}return e.decorators=[{type:r.Component,args:[{selector:"abp-manage-profile",template:'<div id="AbpContentToolbar"></div>\n\n<div class="card border-0 shadow-sm">\n  <div class="card-body">\n    <div class="row">\n      <div class="col-3">\n        <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\n          <li class="nav-item" (click)="selectedTab = 0">\n            <a class="nav-link" [ngClass]="{ active: selectedTab === 0 }" role="tab" href="javascript:void(0)">{{\n              \'AbpUi::ChangePassword\' | abpLocalization\n            }}</a>\n          </li>\n          <li class="nav-item" (click)="selectedTab = 1">\n            <a class="nav-link" [ngClass]="{ active: selectedTab === 1 }" role="tab" href="javascript:void(0)">{{\n              \'AbpAccount::PersonalSettings\' | abpLocalization\n            }}</a>\n          </li>\n        </ul>\n      </div>\n      <div class="col-9">\n        <div class="tab-content" *ngIf="selectedTab === 0" [@fadeIn]>\n          <div class="tab-pane active" role="tabpanel">\n            <h4>\n              {{ \'AbpIdentity::ChangePassword\' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-change-password-form></abp-change-password-form>\n          </div>\n        </div>\n        <div class="tab-content" *ngIf="selectedTab === 1" [@fadeIn]>\n          <div class="tab-pane active" role="tabpanel">\n            <h4>\n              {{ \'AbpIdentity::PersonalSettings\' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-personal-settings-form></abp-personal-settings-form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n',animations:[g.trigger("fadeIn",[g.transition(":enter",g.useAnimation(t.fadeIn))])]}]}],e}();var P=function(){function e(e){this.rest=e}return e.prototype.findTenant=function(e){var n={method:"GET",url:"/api/abp/multi-tenancy/tenants/by-name/"+e};return this.rest.request(n)},e.prototype.register=function(e){var n={method:"POST",url:"/api/account/register",body:e};return this.rest.request(n,{skipHandleError:!0})},e.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:n.RestService}]},e.ngInjectableDef=r.ɵɵdefineInjectable({factory:function(){return new e(r.ɵɵinject(n.RestService))},token:e,providedIn:"root"}),e}();var L=c.Validators.maxLength,N=c.Validators.minLength,T=c.Validators.required,I=c.Validators.email,x=function(){function e(e,t,r,a,o){this.fb=e,this.accountService=t,this.oauthService=r,this.store=a,this.toasterService=o,this.oauthService.configure(this.store.selectSnapshot(n.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument()}return e.prototype.ngOnInit=function(){var e=this.store.selectSnapshot(n.ConfigState.getSettings("Identity.Password")),t=[],r=1;"true"===(e["Abp.Identity.Password.RequireDigit"]||"").toLowerCase()&&t.push("number"),"true"===(e["Abp.Identity.Password.RequireLowercase"]||"").toLowerCase()&&t.push("small"),"true"===(e["Abp.Identity.Password.RequireUppercase"]||"").toLowerCase()&&t.push("capital"),+(e["Abp.Identity.Password.RequiredUniqueChars"]||0)>0&&t.push("special"),Number.isInteger(+e["Abp.Identity.Password.RequiredLength"])&&(r=+e["Abp.Identity.Password.RequiredLength"]),this.form=this.fb.group({username:["",[T,L(255)]],password:["",[T,o.validatePassword(t),N(r),L(32)]],email:["",[T,I]]})},e.prototype.onSubmit=function(){var e=this;if(!this.form.invalid){this.inProgress=!0;var t={userName:this.form.get("username").value,password:this.form.get("password").value,emailAddress:this.form.get("email").value,appName:"Angular"},r=this.store.selectSnapshot(n.SessionState.getTenant);this.accountService.register(t).pipe(m.switchMap((function(){return d.from(e.oauthService.fetchTokenUsingPasswordFlow(t.userName,t.password,new f.HttpHeaders(h({},r&&r.id&&{__tenant:r.id}))))})),m.switchMap((function(){return e.store.dispatch(new n.GetAppConfiguration)})),m.tap((function(){return e.store.dispatch(new l.Navigate(["/"]))})),m.take(1),m.catchError((function(n){return e.toasterService.error(b((function(){return n.error.error_description}))||b((function(){return n.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(n)})),m.finalize((function(){return e.inProgress=!1}))).subscribe()}},e.decorators=[{type:r.Component,args:[{selector:"abp-register",template:'<abp-auth-wrapper [mainContentRef]="mainContentRef">\n  <ng-template #mainContentRef>\n    <h4>{{ \'AbpAccount::Register\' | abpLocalization }}</h4>\n    <strong>\n      {{ \'AbpAccount::AlreadyRegistered\' | abpLocalization }}\n      <a class="text-decoration-none" routerLink="/account/login">{{ \'AbpAccount::Login\' | abpLocalization }}</a>\n    </strong>\n    <form [formGroup]="form" (ngSubmit)="onSubmit()" validateOnSubmit class="mt-4">\n      <div class="form-group">\n        <label for="input-user-name">{{ \'AbpAccount::UserName\' | abpLocalization }}</label\n        ><span> * </span\n        ><input autofocus type="text" id="input-user-name" class="form-control" formControlName="username" />\n      </div>\n      <div class="form-group">\n        <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\n        ><span> * </span><input type="email" id="input-email-address" class="form-control" formControlName="email" />\n      </div>\n      <div class="form-group">\n        <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\n        ><span> * </span><input type="password" id="input-password" class="form-control" formControlName="password" />\n      </div>\n      <abp-button\n        [loading]="inProgress"\n        buttonType="submit"\n        name="Action"\n        buttonClass="btn-block btn-lg mt-3 btn btn-primary"\n      >\n        {{ \'AbpAccount::Register\' | abpLocalization }}\n      </abp-button>\n    </form>\n  </ng-template>\n</abp-auth-wrapper>\n'}]}],e.ctorParameters=function(){return[{type:c.FormBuilder},{type:P},{type:u.OAuthService},{type:p.Store},{type:t.ToasterService}]},e}();var z=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:n.DynamicLayoutComponent,children:[{path:"login",component:S},{path:"register",component:x},{path:"manage-profile",component:C}]}],O=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{imports:[s.RouterModule.forChild(z)],exports:[s.RouterModule]}]}],e}(),R=c.Validators.minLength,q=c.Validators.required,M=c.Validators.maxLength,k=["newPassword","repeatNewPassword"],U=function(){function e(e,n,t){this.fb=e,this.store=n,this.toasterService=t,this.mapErrorsFn=function(e,n,t){return k.indexOf(t.name)<0?e:e.concat(n.filter((function(e){return"passwordMismatch"===e.key})))}}return e.prototype.ngOnInit=function(){var e=this.store.selectSnapshot(n.ConfigState.getSettings("Identity.Password")),t=[],r=1;"true"===(e["Abp.Identity.Password.RequireDigit"]||"").toLowerCase()&&t.push("number"),"true"===(e["Abp.Identity.Password.RequireLowercase"]||"").toLowerCase()&&t.push("small"),"true"===(e["Abp.Identity.Password.RequireUppercase"]||"").toLowerCase()&&t.push("capital"),+(e["Abp.Identity.Password.RequiredUniqueChars"]||0)>0&&t.push("special"),Number.isInteger(+e["Abp.Identity.Password.RequiredLength"])&&(r=+e["Abp.Identity.Password.RequiredLength"]),this.form=this.fb.group({password:["",q],newPassword:["",{validators:[q,o.validatePassword(t),R(r),M(32)]}],repeatNewPassword:["",{validators:[q,o.validatePassword(t),R(r),M(32)]}]},{validators:[o.comparePasswords(k)]})},e.prototype.onSubmit=function(){var e=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new n.ChangePassword({currentPassword:this.form.get("password").value,newPassword:this.form.get("newPassword").value})).pipe(m.finalize((function(){return e.inProgress=!1}))).subscribe({next:function(){e.form.reset(),e.toasterService.success("AbpAccount::PasswordChangedMessage","Success",{life:5e3})},error:function(n){e.toasterService.error(b((function(){return n.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3})}}))},e.decorators=[{type:r.Component,args:[{selector:"abp-change-password-form",template:'<form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn" validateOnSubmit>\n  <div class="form-group">\n    <label for="current-password">{{ \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization }}</label\n    ><span> * </span\n    ><input type="password" id="current-password" class="form-control" formControlName="password" autofocus />\n  </div>\n  <div class="form-group">\n    <label for="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</label\n    ><span> * </span><input type="password" id="new-password" class="form-control" formControlName="newPassword" />\n  </div>\n  <div class="form-group">\n    <label for="confirm-new-password">{{ \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization }}</label\n    ><span> * </span\n    ><input type="password" id="confirm-new-password" class="form-control" formControlName="repeatNewPassword" />\n  </div>\n  <abp-button\n    iconClass="fa fa-check"\n    buttonClass="btn btn-primary color-white"\n    buttonType="submit"\n    [loading]="inProgress"\n    [disabled]="form?.invalid"\n    >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\n  >\n</form>\n'}]}],e.ctorParameters=function(){return[{type:c.FormBuilder},{type:p.Store},{type:t.ToasterService}]},e}();var j=c.Validators.maxLength,D=c.Validators.required,E=c.Validators.email,V=function(){function e(e,n,t){this.fb=e,this.store=n,this.toasterService=t}return e.prototype.ngOnInit=function(){this.buildForm()},e.prototype.buildForm=function(){var e=this;this.store.dispatch(new n.GetProfile).pipe(m.withLatestFrom(this.profile$),m.take(1)).subscribe((function(n){var t=y(n,2)[1];e.form=e.fb.group({userName:[t.userName,[D,j(256)]],email:[t.email,[D,E,j(256)]],name:[t.name||"",[j(64)]],surname:[t.surname||"",[j(64)]],phoneNumber:[t.phoneNumber||"",[j(16)]]})}))},e.prototype.submit=function(){var e=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new n.UpdateProfile(this.form.value)).pipe(m.finalize((function(){return e.inProgress=!1}))).subscribe((function(){e.toasterService.success("AbpAccount::PersonalSettingsSaved","Success",{life:5e3})})))},e.decorators=[{type:r.Component,args:[{selector:"abp-personal-settings-form",template:'<form validateOnSubmit *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\n  <div class="form-group">\n    <label for="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type="text"\n      id="username"\n      class="form-control"\n      formControlName="userName"\n      autofocus\n      (keydown.space)="$event.preventDefault()"\n    />\n  </div>\n  <div class="row">\n    <div class="col col-md-6">\n      <div class="form-group">\n        <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label\n        ><input type="text" id="name" class="form-control" formControlName="name" />\n      </div>\n    </div>\n    <div class="col col-md-6">\n      <div class="form-group">\n        <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label\n        ><input type="text" id="surname" class="form-control" formControlName="surname" />\n      </div>\n    </div>\n  </div>\n  <div class="form-group">\n    <label for="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</label\n    ><span> * </span><input type="text" id="email-address" class="form-control" formControlName="email" />\n  </div>\n  <div class="form-group">\n    <label for="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</label\n    ><input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\n  </div>\n  <abp-button\n    buttonType="submit"\n    iconClass="fa fa-check"\n    buttonClass="btn btn-primary color-white"\n    [loading]="inProgress"\n    [disabled]="form?.invalid || form?.pristine"\n  >\n    {{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\n  >\n</form>\n'}]}],e.ctorParameters=function(){return[{type:c.FormBuilder},{type:p.Store},{type:t.ToasterService}]},function(e,n,t,r){var a,o=arguments.length,i=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,t,r);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(i=(o<3?a(i):o>3?a(n,t,i):a(n,t))||i);o>3&&i&&Object.defineProperty(n,t,i)}([p.Select(n.ProfileState.getProfile),v("design:type",d.Observable)],e.prototype,"profile$",void 0),e}();var _=function(){function e(e,n,t){this.store=e,this.toasterService=n,this.accountService=t,this.tenant={}}return e.prototype.ngOnInit=function(){this.tenant=this.store.selectSnapshot(n.SessionState.getTenant)||{},this.tenantName=this.tenant.name||""},e.prototype.onSwitch=function(){this.isModalVisible=!0},e.prototype.save=function(){var e=this;this.tenant.name&&!this.inProgress?(this.inProgress=!0,this.accountService.findTenant(this.tenant.name).pipe(m.finalize((function(){return e.inProgress=!1})),m.take(1),m.catchError((function(n){return e.toasterService.error(b((function(){return n.error.error_description}),"AbpUi::DefaultErrorMessage"),"AbpUi::Error"),d.throwError(n)}))).subscribe((function(t){var r=t.success,a=t.tenantId;r?(e.tenant={id:a,name:e.tenant.name},e.tenantName=e.tenant.name,e.isModalVisible=!1):(e.toasterService.error("AbpUiMultiTenancy::GivenTenantIsNotAvailable","AbpUi::Error",{messageLocalizationParams:[e.tenant.name]}),e.tenant={}),e.store.dispatch(new n.SetTenant(r?e.tenant:null))}))):(this.store.dispatch(new n.SetTenant(null)),this.tenantName=null,this.isModalVisible=!1)},e.decorators=[{type:r.Component,args:[{selector:"abp-tenant-box",template:'<div class="card shadow-sm rounded mb-3">\n  <div class="card-body px-5">\n    <div class="row">\n      <div class="col">\n        <span style="font-size: 0.8em;" class="text-uppercase text-muted">{{\n          \'AbpUiMultiTenancy::Tenant\' | abpLocalization\n        }}</span\n        ><br />\n        <h6 class="m-0 d-inline-block">\n          <span>\n            {{ tenantName || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}\n          </span>\n        </h6>\n      </div>\n      <div class="col-auto">\n        <a\n          id="AbpTenantSwitchLink"\n          href="javascript:void(0);"\n          class="btn btn-sm mt-3 btn-outline-primary"\n          (click)="onSwitch()"\n          >{{ \'AbpUiMultiTenancy::Switch\' | abpLocalization }}</a\n        >\n      </div>\n    </div>\n  </div>\n</div>\n\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="inProgress">\n  <ng-template #abpHeader>\n    <h5>Switch Tenant</h5>\n  </ng-template>\n  <ng-template #abpBody>\n    <form (ngSubmit)="save()">\n      <div class="mt-2">\n        <div class="form-group">\n          <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\n          <input [(ngModel)]="tenant.name" type="text" id="name" name="tenant" class="form-control" autofocus />\n        </div>\n        <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\n      </div>\n    </form>\n  </ng-template>\n  <ng-template #abpFooter>\n    <button #abpClose type="button" class="btn btn-secondary">\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\n    </button>\n    <abp-button buttonType="button" buttonClass="btn btn-primary" (click)="save()">\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\n    </abp-button>\n  </ng-template>\n</abp-modal>\n'}]}],e.ctorParameters=function(){return[{type:p.Store},{type:t.ToasterService},{type:P}]},e}();function F(e){return h({redirectUrl:"/"},e)}var G=new r.InjectionToken("ACCOUNT_OPTIONS"),H=function(){function e(){}return e.decorators=[{type:r.Component,args:[{selector:"abp-auth-wrapper",template:'<div class="row">\n  <div class="mx-auto col col-md-5">\n    <abp-tenant-box></abp-tenant-box>\n\n    <div class="abp-account-container">\n      <div class="card mt-3 shadow-sm rounded">\n        <div class="card-body p-5">\n          <ng-content *ngTemplateOutlet="mainContentRef"></ng-content>\n        </div>\n        <ng-content *ngTemplateOutlet="cancelContentRef"></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n'}]}],e.propDecorators={mainContentRef:[{type:r.Input}],cancelContentRef:[{type:r.Input}]},e}();var B=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{declarations:[H,S,x,_,U,C,V],imports:[n.CoreModule,O,t.ThemeSharedModule,i.TableModule,a.NgbDropdownModule,o.NgxValidateCoreModule],exports:[]}]}],e}();e.ACCOUNT_OPTIONS=G,e.ACCOUNT_ROUTES={routes:[{name:"Account",path:"account",invisible:!0,layout:"application",children:[{path:"login",name:"Login",order:1},{path:"register",name:"Register",order:2}]}]},e.AccountModule=B,e.AccountProviders=function(e){return void 0===e&&(e={}),[{provide:G,useValue:e},{provide:"ACCOUNT_OPTIONS",useFactory:F,deps:[G]}]},e.ChangePasswordComponent=U,e.LoginComponent=S,e.ManageProfileComponent=C,e.PersonalSettingsComponent=V,e.RegisterComponent=x,e.optionsFactory=F,e.ɵa=H,e.ɵb=S,e.ɵd=x,e.ɵe=P,e.ɵf=_,e.ɵg=U,e.ɵh=C,e.ɵi=V,e.ɵj=O,e.ɵk=F,e.ɵl=G,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.account.umd.min.js.map