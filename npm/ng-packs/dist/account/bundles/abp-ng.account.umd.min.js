!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("primeng/table"),require("@angular/router"),require("@angular/forms"),require("@ngxs/router-plugin"),require("@ngxs/store"),require("angular-oauth2-oidc"),require("rxjs"),require("rxjs/operators"),require("snq"),require("@angular/common/http"),require("@angular/animations")):"function"==typeof define&&define.amd?define("@abp/ng.account",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","primeng/table","@angular/router","@angular/forms","@ngxs/router-plugin","@ngxs/store","angular-oauth2-oidc","rxjs","rxjs/operators","snq","@angular/common/http","@angular/animations"],e):e(((r=r||self).abp=r.abp||{},r.abp.ng=r.abp.ng||{},r.abp.ng.account={}),r.ng_core,r.ng_theme_shared,r.ng.core,r.ngBootstrap,r.core$1,r.table,r.ng.router,r.ng.forms,r.routerPlugin,r.store,r.angularOauth2Oidc,r.rxjs,r.rxjs.operators,r.snq,r.ng.common.http,r.ng.animations)}(this,(function(r,e,n,t,a,o,i,s,c,l,p,u,d,m,b,f,g){"use strict";b=b&&b.hasOwnProperty("default")?b.default:b;var h=function(){return(h=Object.assign||function(r){for(var e,n=1,t=arguments.length;n<t;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}).apply(this,arguments)};function v(r,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(r,e)}function y(r,e){var n="function"==typeof Symbol&&r[Symbol.iterator];if(!n)return r;var t,a,o=n.call(r),i=[];try{for(;(void 0===e||e-- >0)&&!(t=o.next()).done;)i.push(t.value)}catch(r){a={error:r}}finally{try{t&&!t.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i}var w=c.Validators.maxLength,A=(c.Validators.minLength,c.Validators.required),S=function(){function r(r,n,t,a,o){this.fb=r,this.oauthService=n,this.store=t,this.toasterService=a,this.options=o,this.oauthService.configure(this.store.selectSnapshot(e.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument(),this.form=this.fb.group({username:["",[A,w(255)]],password:["",[A,w(32)]],remember:[!1]})}return r.prototype.onSubmit=function(){var r=this;if(!this.form.invalid){this.inProgress=!0;var n=this.store.selectSnapshot(e.SessionState.getTenant);d.from(this.oauthService.fetchTokenUsingPasswordFlow(this.form.get("username").value,this.form.get("password").value,new f.HttpHeaders(h({},n&&n.id&&{__tenant:n.id})))).pipe(m.switchMap((function(){return r.store.dispatch(new e.GetAppConfiguration)})),m.tap((function(){var e=b((function(){return window.history.state})).redirectUrl||(r.options||{}).redirectUrl||"/";r.store.dispatch(new l.Navigate([e]))})),m.catchError((function(e){return r.toasterService.error(b((function(){return e.error.error_description}))||b((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(e)})),m.finalize((function(){return r.inProgress=!1}))).subscribe()}},r.decorators=[{type:t.Component,args:[{selector:"abp-login",template:'<abp-auth-wrapper [mainContentRef]="mainContentRef" [cancelContentRef]="cancelContentRef">\r\n  <ng-template #mainContentRef>\r\n    <h4>{{ \'AbpAccount::Login\' | abpLocalization }}</h4>\r\n    <strong>\r\n      {{ \'AbpAccount::AreYouANewUser\' | abpLocalization }}\r\n      <a class="text-decoration-none" routerLink="/account/register">{{ \'AbpAccount::Register\' | abpLocalization }}</a>\r\n    </strong>\r\n    <form [formGroup]="form" (ngSubmit)="onSubmit()" validateOnSubmit class="mt-4">\r\n      <div class="form-group">\r\n        <label for="login-input-user-name-or-email-address">{{\r\n          \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\r\n        }}</label>\r\n        <input\r\n          class="form-control"\r\n          type="text"\r\n          id="login-input-user-name-or-email-address"\r\n          formControlName="username"\r\n          autofocus\r\n        />\r\n      </div>\r\n      <div class="form-group">\r\n        <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\r\n        <input class="form-control" type="password" id="login-input-password" formControlName="password" />\r\n      </div>\r\n      <div class="form-check" validationTarget validationStyle>\r\n        <label class="form-check-label" for="login-input-remember-me">\r\n          <input class="form-check-input" type="checkbox" id="login-input-remember-me" formControlName="remember" />\r\n          {{ \'AbpAccount::RememberMe\' | abpLocalization }}\r\n        </label>\r\n      </div>\r\n      <abp-button\r\n        [loading]="inProgress"\r\n        buttonType="submit"\r\n        name="Action"\r\n        buttonClass="btn-block btn-lg mt-3 btn btn-primary"\r\n      >\r\n        {{ \'AbpAccount::Login\' | abpLocalization }}\r\n      </abp-button>\r\n    </form>\r\n  </ng-template>\r\n  <ng-template #cancelContentRef>\r\n    <div class="card-footer text-center border-0">\r\n      <a routerLink="/">\r\n        <button type="button" name="Action" value="Cancel" class="px-2 py-0 btn btn-link">\r\n          {{ \'AbpAccount::Cancel\' | abpLocalization }}\r\n        </button>\r\n      </a>\r\n    </div>\r\n  </ng-template>\r\n</abp-auth-wrapper>\r\n'}]}],r.ctorParameters=function(){return[{type:c.FormBuilder},{type:u.OAuthService},{type:p.Store},{type:n.ToasterService},{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:["ACCOUNT_OPTIONS"]}]}]},r}();var C=function(){function r(){this.selectedTab=0}return r.decorators=[{type:t.Component,args:[{selector:"abp-manage-profile",template:'<div id="AbpContentToolbar"></div>\r\n\r\n<div class="card border-0 shadow-sm">\r\n  <div class="card-body">\r\n    <div class="row">\r\n      <div class="col-3">\r\n        <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\r\n          <li class="nav-item" (click)="selectedTab = 0">\r\n            <a class="nav-link" [ngClass]="{ active: selectedTab === 0 }" role="tab" href="javascript:void(0)">{{\r\n              \'AbpUi::ChangePassword\' | abpLocalization\r\n            }}</a>\r\n          </li>\r\n          <li class="nav-item" (click)="selectedTab = 1">\r\n            <a class="nav-link" [ngClass]="{ active: selectedTab === 1 }" role="tab" href="javascript:void(0)">{{\r\n              \'AbpAccount::PersonalSettings\' | abpLocalization\r\n            }}</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class="col-9">\r\n        <div class="tab-content" *ngIf="selectedTab === 0" [@fadeIn]>\r\n          <div class="tab-pane active" role="tabpanel">\r\n            <h4>\r\n              {{ \'AbpIdentity::ChangePassword\' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-change-password-form></abp-change-password-form>\r\n          </div>\r\n        </div>\r\n        <div class="tab-content" *ngIf="selectedTab === 1" [@fadeIn]>\r\n          <div class="tab-pane active" role="tabpanel">\r\n            <h4>\r\n              {{ \'AbpIdentity::PersonalSettings\' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-personal-settings-form></abp-personal-settings-form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n',animations:[g.trigger("fadeIn",[g.transition(":enter",g.useAnimation(n.fadeIn))])]}]}],r}();var P=function(){function r(r){this.rest=r}return r.prototype.findTenant=function(r){var e={method:"GET",url:"/api/abp/multi-tenancy/tenants/by-name/"+r};return this.rest.request(e)},r.prototype.register=function(r){var e={method:"POST",url:"/api/account/register",body:r};return this.rest.request(e,{skipHandleError:!0})},r.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],r.ctorParameters=function(){return[{type:e.RestService}]},r.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new r(t.ɵɵinject(e.RestService))},token:r,providedIn:"root"}),r}();var L=c.Validators.maxLength,N=c.Validators.minLength,T=c.Validators.required,I=c.Validators.email,x=function(){function r(r,n,t,a,o){this.fb=r,this.accountService=n,this.oauthService=t,this.store=a,this.toasterService=o,this.oauthService.configure(this.store.selectSnapshot(e.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument()}return r.prototype.ngOnInit=function(){var r=this.store.selectSnapshot(e.ConfigState.getSettings("Identity.Password")),n=[],t=1;"true"===(r["Abp.Identity.Password.RequireDigit"]||"").toLowerCase()&&n.push("number"),"true"===(r["Abp.Identity.Password.RequireLowercase"]||"").toLowerCase()&&n.push("small"),"true"===(r["Abp.Identity.Password.RequireUppercase"]||"").toLowerCase()&&n.push("capital"),+(r["Abp.Identity.Password.RequiredUniqueChars"]||0)>0&&n.push("special"),Number.isInteger(+r["Abp.Identity.Password.RequiredLength"])&&(t=+r["Abp.Identity.Password.RequiredLength"]),this.form=this.fb.group({username:["",[T,L(255)]],password:["",[T,o.validatePassword(n),N(t),L(32)]],email:["",[T,I]]})},r.prototype.onSubmit=function(){var r=this;if(!this.form.invalid){this.inProgress=!0;var n={userName:this.form.get("username").value,password:this.form.get("password").value,emailAddress:this.form.get("email").value,appName:"Angular"};this.accountService.register(n).pipe(m.switchMap((function(){return d.from(r.oauthService.fetchTokenUsingPasswordFlow(n.userName,n.password))})),m.switchMap((function(){return r.store.dispatch(new e.GetAppConfiguration)})),m.tap((function(){return r.store.dispatch(new l.Navigate(["/"]))})),m.take(1),m.catchError((function(e){return r.toasterService.error(b((function(){return e.error.error_description}))||b((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(e)})),m.finalize((function(){return r.inProgress=!1}))).subscribe()}},r.decorators=[{type:t.Component,args:[{selector:"abp-register",template:'<abp-auth-wrapper [mainContentRef]="mainContentRef">\r\n  <ng-template #mainContentRef>\r\n    <h4>{{ \'AbpAccount::Register\' | abpLocalization }}</h4>\r\n    <strong>\r\n      {{ \'AbpAccount::AlreadyRegistered\' | abpLocalization }}\r\n      <a class="text-decoration-none" routerLink="/account/login">{{ \'AbpAccount::Login\' | abpLocalization }}</a>\r\n    </strong>\r\n    <form [formGroup]="form" (ngSubmit)="onSubmit()" validateOnSubmit class="mt-4">\r\n      <div class="form-group">\r\n        <label for="input-user-name">{{ \'AbpAccount::UserName\' | abpLocalization }}</label\r\n        ><span> * </span\r\n        ><input autofocus type="text" id="input-user-name" class="form-control" formControlName="username" />\r\n      </div>\r\n      <div class="form-group">\r\n        <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\r\n        ><span> * </span><input type="email" id="input-email-address" class="form-control" formControlName="email" />\r\n      </div>\r\n      <div class="form-group">\r\n        <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\r\n        ><span> * </span><input type="password" id="input-password" class="form-control" formControlName="password" />\r\n      </div>\r\n      <abp-button\r\n        [loading]="inProgress"\r\n        buttonType="submit"\r\n        name="Action"\r\n        buttonClass="btn-block btn-lg mt-3 btn btn-primary"\r\n      >\r\n        {{ \'AbpAccount::Register\' | abpLocalization }}\r\n      </abp-button>\r\n    </form>\r\n  </ng-template>\r\n</abp-auth-wrapper>\r\n'}]}],r.ctorParameters=function(){return[{type:c.FormBuilder},{type:P},{type:u.OAuthService},{type:p.Store},{type:n.ToasterService}]},r}();var z=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:e.DynamicLayoutComponent,children:[{path:"login",component:S},{path:"register",component:x},{path:"manage-profile",component:C}]}],O=function(){function r(){}return r.decorators=[{type:t.NgModule,args:[{imports:[s.RouterModule.forChild(z)],exports:[s.RouterModule]}]}],r}(),R=c.Validators.minLength,q=c.Validators.required,M=c.Validators.maxLength,k=["newPassword","repeatNewPassword"],U=function(){function r(r,e,n){this.fb=r,this.store=e,this.toasterService=n,this.mapErrorsFn=function(r,e,n){return k.indexOf(n.name)<0?r:r.concat(e.filter((function(r){return"passwordMismatch"===r.key})))}}return r.prototype.ngOnInit=function(){var r=this.store.selectSnapshot(e.ConfigState.getSettings("Identity.Password")),n=[],t=1;"true"===(r["Abp.Identity.Password.RequireDigit"]||"").toLowerCase()&&n.push("number"),"true"===(r["Abp.Identity.Password.RequireLowercase"]||"").toLowerCase()&&n.push("small"),"true"===(r["Abp.Identity.Password.RequireUppercase"]||"").toLowerCase()&&n.push("capital"),+(r["Abp.Identity.Password.RequiredUniqueChars"]||0)>0&&n.push("special"),Number.isInteger(+r["Abp.Identity.Password.RequiredLength"])&&(t=+r["Abp.Identity.Password.RequiredLength"]),this.form=this.fb.group({password:["",q],newPassword:["",{validators:[q,o.validatePassword(n),R(t),M(32)]}],repeatNewPassword:["",{validators:[q,o.validatePassword(n),R(t),M(32)]}]},{validators:[o.comparePasswords(k)]})},r.prototype.onSubmit=function(){var r=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new e.ChangePassword({currentPassword:this.form.get("password").value,newPassword:this.form.get("newPassword").value})).pipe(m.finalize((function(){return r.inProgress=!1}))).subscribe({next:function(){r.form.reset(),r.toasterService.success("AbpAccount::PasswordChangedMessage","Success",{life:5e3})},error:function(e){r.toasterService.error(b((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3})}}))},r.decorators=[{type:t.Component,args:[{selector:"abp-change-password-form",template:'<form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn" validateOnSubmit>\r\n  <div class="form-group">\r\n    <label for="current-password">{{ \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input type="password" id="current-password" class="form-control" formControlName="password" autofocus />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</label\r\n    ><span> * </span><input type="password" id="new-password" class="form-control" formControlName="newPassword" />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="confirm-new-password">{{ \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input type="password" id="confirm-new-password" class="form-control" formControlName="repeatNewPassword" />\r\n  </div>\r\n  <abp-button\r\n    iconClass="fa fa-check"\r\n    buttonClass="btn btn-primary color-white"\r\n    buttonType="submit"\r\n    [loading]="inProgress"\r\n    [disabled]="form?.invalid"\r\n    >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n'}]}],r.ctorParameters=function(){return[{type:c.FormBuilder},{type:p.Store},{type:n.ToasterService}]},r}();var j=c.Validators.maxLength,D=c.Validators.required,E=c.Validators.email,V=function(){function r(r,e,n){this.fb=r,this.store=e,this.toasterService=n}return r.prototype.ngOnInit=function(){this.buildForm()},r.prototype.buildForm=function(){var r=this;this.store.dispatch(new e.GetProfile).pipe(m.withLatestFrom(this.profile$),m.take(1)).subscribe((function(e){var n=y(e,2)[1];r.form=r.fb.group({userName:[n.userName,[D,j(256)]],email:[n.email,[D,E,j(256)]],name:[n.name||"",[j(64)]],surname:[n.surname||"",[j(64)]],phoneNumber:[n.phoneNumber||"",[j(16)]]})}))},r.prototype.submit=function(){var r=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new e.UpdateProfile(this.form.value)).pipe(m.finalize((function(){return r.inProgress=!1}))).subscribe((function(){r.toasterService.success("AbpAccount::PersonalSettingsSaved","Success",{life:5e3})})))},r.decorators=[{type:t.Component,args:[{selector:"abp-personal-settings-form",template:'<form validateOnSubmit *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\r\n  <div class="form-group">\r\n    <label for="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="text"\r\n      id="username"\r\n      class="form-control"\r\n      formControlName="userName"\r\n      autofocus\r\n      (keydown.space)="$event.preventDefault()"\r\n    />\r\n  </div>\r\n  <div class="row">\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label\r\n        ><input type="text" id="name" class="form-control" formControlName="name" />\r\n      </div>\r\n    </div>\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label\r\n        ><input type="text" id="surname" class="form-control" formControlName="surname" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</label\r\n    ><span> * </span><input type="text" id="email-address" class="form-control" formControlName="email" />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</label\r\n    ><input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\r\n  </div>\r\n  <abp-button\r\n    buttonType="submit"\r\n    iconClass="fa fa-check"\r\n    buttonClass="btn btn-primary color-white"\r\n    [loading]="inProgress"\r\n    [disabled]="form?.invalid || form?.pristine"\r\n  >\r\n    {{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n'}]}],r.ctorParameters=function(){return[{type:c.FormBuilder},{type:p.Store},{type:n.ToasterService}]},function(r,e,n,t){var a,o=arguments.length,i=o<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,n):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(r,e,n,t);else for(var s=r.length-1;s>=0;s--)(a=r[s])&&(i=(o<3?a(i):o>3?a(e,n,i):a(e,n))||i);o>3&&i&&Object.defineProperty(e,n,i)}([p.Select(e.ProfileState.getProfile),v("design:type",d.Observable)],r.prototype,"profile$",void 0),r}();var F=function(){function r(r,e,n){this.store=r,this.toasterService=e,this.accountService=n,this.tenant={}}return r.prototype.ngOnInit=function(){this.tenant=this.store.selectSnapshot(e.SessionState.getTenant)||{},this.tenantName=this.tenant.name||""},r.prototype.onSwitch=function(){this.isModalVisible=!0},r.prototype.save=function(){var r=this;this.tenant.name&&!this.inProgress?(this.inProgress=!0,this.accountService.findTenant(this.tenant.name).pipe(m.finalize((function(){return r.inProgress=!1})),m.take(1),m.catchError((function(e){return r.toasterService.error(b((function(){return e.error.error_description}),"AbpUi::DefaultErrorMessage"),"AbpUi::Error"),d.throwError(e)}))).subscribe((function(n){var t=n.success,a=n.tenantId;t?(r.tenant={id:a,name:r.tenant.name},r.tenantName=r.tenant.name,r.isModalVisible=!1):(r.toasterService.error("AbpUiMultiTenancy::GivenTenantIsNotAvailable","AbpUi::Error",{messageLocalizationParams:[r.tenant.name]}),r.tenant={}),r.store.dispatch(new e.SetTenant(t?r.tenant:null))}))):(this.store.dispatch(new e.SetTenant(null)),this.tenantName=null,this.isModalVisible=!1)},r.decorators=[{type:t.Component,args:[{selector:"abp-tenant-box",template:'<div class="card shadow-sm rounded mb-3">\r\n  <div class="card-body px-5">\r\n    <div class="row">\r\n      <div class="col">\r\n        <span style="font-size: 0.8em;" class="text-uppercase text-muted">{{\r\n          \'AbpUiMultiTenancy::Tenant\' | abpLocalization\r\n        }}</span\r\n        ><br />\r\n        <h6 class="m-0 d-inline-block">\r\n          <span>\r\n            {{ tenantName || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}\r\n          </span>\r\n        </h6>\r\n      </div>\r\n      <div class="col-auto">\r\n        <a\r\n          id="AbpTenantSwitchLink"\r\n          href="javascript:void(0);"\r\n          class="btn btn-sm mt-3 btn-outline-primary"\r\n          (click)="onSwitch()"\r\n          >{{ \'AbpUiMultiTenancy::Switch\' | abpLocalization }}</a\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="inProgress">\r\n  <ng-template #abpHeader>\r\n    <h5>Switch Tenant</h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <form (ngSubmit)="save()">\r\n      <div class="mt-2">\r\n        <div class="form-group">\r\n          <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\r\n          <input [(ngModel)]="tenant.name" type="text" id="name" name="tenant" class="form-control" autofocus />\r\n        </div>\r\n        <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button #abpClose type="button" class="btn btn-secondary">\r\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button buttonType="button" buttonClass="btn btn-primary" (click)="save()">\r\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\r\n    </abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n'}]}],r.ctorParameters=function(){return[{type:p.Store},{type:n.ToasterService},{type:P}]},r}();function _(r){return h({redirectUrl:"/"},r)}var G=new t.InjectionToken("ACCOUNT_OPTIONS"),B=function(){function r(){}return r.decorators=[{type:t.Component,args:[{selector:"abp-auth-wrapper",template:'<div class="row">\r\n  <div class="mx-auto col col-md-5">\r\n    <abp-tenant-box></abp-tenant-box>\r\n\r\n    <div class="abp-account-container">\r\n      <div class="card mt-3 shadow-sm rounded">\r\n        <div class="card-body p-5">\r\n          <ng-content *ngTemplateOutlet="mainContentRef"></ng-content>\r\n        </div>\r\n        <ng-content *ngTemplateOutlet="cancelContentRef"></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n'}]}],r.propDecorators={mainContentRef:[{type:t.Input}],cancelContentRef:[{type:t.Input}]},r}();var H=function(){function r(){}return r.decorators=[{type:t.NgModule,args:[{declarations:[B,S,x,F,U,C,V],imports:[e.CoreModule,O,n.ThemeSharedModule,i.TableModule,a.NgbDropdownModule,o.NgxValidateCoreModule],exports:[]}]}],r}();r.ACCOUNT_OPTIONS=G,r.ACCOUNT_ROUTES={routes:[{name:"Account",path:"account",invisible:!0,layout:"application",children:[{path:"login",name:"Login",order:1},{path:"register",name:"Register",order:2}]}]},r.AccountModule=H,r.AccountProviders=function(r){return void 0===r&&(r={}),[{provide:G,useValue:r},{provide:"ACCOUNT_OPTIONS",useFactory:_,deps:[G]}]},r.ChangePasswordComponent=U,r.LoginComponent=S,r.ManageProfileComponent=C,r.PersonalSettingsComponent=V,r.RegisterComponent=x,r.optionsFactory=_,r.ɵa=B,r.ɵb=S,r.ɵd=x,r.ɵe=P,r.ɵf=F,r.ɵg=U,r.ɵh=C,r.ɵi=V,r.ɵj=O,r.ɵk=_,r.ɵl=G,Object.defineProperty(r,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.account.umd.min.js.map
