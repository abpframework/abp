!(function(n, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? e(
        exports,
        require('@abp/ng.core'),
        require('@abp/ng.theme.shared'),
        require('@angular/core'),
        require('@ng-bootstrap/ng-bootstrap'),
        require('@ngx-validate/core'),
        require('primeng/table'),
        require('@angular/router'),
        require('@angular/forms'),
        require('@ngxs/router-plugin'),
        require('@ngxs/store'),
        require('angular-oauth2-oidc'),
        require('rxjs'),
        require('rxjs/operators'),
        require('snq'),
        require('@angular/animations'),
      )
    : 'function' == typeof define && define.amd
    ? define('@abp/ng.account', [
        'exports',
        '@abp/ng.core',
        '@abp/ng.theme.shared',
        '@angular/core',
        '@ng-bootstrap/ng-bootstrap',
        '@ngx-validate/core',
        'primeng/table',
        '@angular/router',
        '@angular/forms',
        '@ngxs/router-plugin',
        '@ngxs/store',
        'angular-oauth2-oidc',
        'rxjs',
        'rxjs/operators',
        'snq',
        '@angular/animations',
      ], e)
    : e(
        (((n = n || self).abp = n.abp || {}), (n.abp.ng = n.abp.ng || {}), (n.abp.ng.account = {})),
        n.ng_core,
        n.ng_theme_shared,
        n.ng.core,
        n.ngBootstrap,
        n.core$1,
        n.table,
        n.ng.router,
        n.ng.forms,
        n.routerPlugin,
        n.store,
        n.angularOauth2Oidc,
        n.rxjs,
        n.rxjs.operators,
        n.snq,
        n.ng.animations,
      );
})(this, function(n, e, t, r, o, a, i, s, c, l, p, u, d, m, b, f) {
  'use strict';
  b = b && b.hasOwnProperty('default') ? b.default : b;
  var g = function() {
    return (g =
      Object.assign ||
      function(n) {
        for (var e, t = 1, r = arguments.length; t < r; t++)
          for (var o in (e = arguments[t])) Object.prototype.hasOwnProperty.call(e, o) && (n[o] = e[o]);
        return n;
      }).apply(this, arguments);
  };
  function h(n, e) {
    if ('object' == typeof Reflect && 'function' == typeof Reflect.metadata) return Reflect.metadata(n, e);
  }
  function v(n, e) {
    var t = 'function' == typeof Symbol && n[Symbol.iterator];
    if (!t) return n;
    var r,
      o,
      a = t.call(n),
      i = [];
    try {
      for (; (void 0 === e || e-- > 0) && !(r = a.next()).done; ) i.push(r.value);
    } catch (n) {
      o = { error: n };
    } finally {
      try {
        r && !r.done && (t = a.return) && t.call(a);
      } finally {
        if (o) throw o.error;
      }
    }
    return i;
  }
  var y = c.Validators.maxLength,
    w = (c.Validators.minLength, c.Validators.required),
    A = (function() {
      function n(n, t, r, o, a) {
        (this.fb = n),
          (this.oauthService = t),
          (this.store = r),
          (this.toasterService = o),
          (this.options = a),
          this.oauthService.configure(this.store.selectSnapshot(e.ConfigState.getOne('environment')).oAuthConfig),
          this.oauthService.loadDiscoveryDocument(),
          (this.form = this.fb.group({ username: ['', [w, y(255)]], password: ['', [w, y(32)]], remember: [!1] }));
      }
      return (
        (n.prototype.onSubmit = function() {
          var n = this;
          this.form.invalid ||
            ((this.inProgress = !0),
            d
              .from(
                this.oauthService.fetchTokenUsingPasswordFlow(
                  this.form.get('username').value,
                  this.form.get('password').value,
                ),
              )
              .pipe(
                m.switchMap(function() {
                  return n.store.dispatch(new e.GetAppConfiguration());
                }),
                m.tap(function() {
                  var e =
                    b(function() {
                      return window.history.state;
                    }).redirectUrl ||
                    (n.options || {}).redirectUrl ||
                    '/';
                  n.store.dispatch(new l.Navigate([e]));
                }),
                m.catchError(function(e) {
                  return (
                    n.toasterService.error(
                      b(function() {
                        return e.error.error_description;
                      }) ||
                        b(function() {
                          return e.error.error.message;
                        }, 'AbpAccount::DefaultErrorMessage'),
                      'Error',
                      { life: 7e3 },
                    ),
                    d.throwError(e)
                  );
                }),
                m.finalize(function() {
                  return (n.inProgress = !1);
                }),
              )
              .subscribe());
        }),
        (n.decorators = [
          {
            type: r.Component,
            args: [
              {
                selector: 'abp-login',
                template:
                  '<abp-auth-wrapper [mainContentRef]="mainContentRef" [cancelContentRef]="cancelContentRef">\n  <ng-template #mainContentRef>\n    <h4>{{ \'AbpAccount::Login\' | abpLocalization }}</h4>\n    <strong>\n      {{ \'AbpAccount::AreYouANewUser\' | abpLocalization }}\n      <a class="text-decoration-none" routerLink="/account/register">{{ \'AbpAccount::Register\' | abpLocalization }}</a>\n    </strong>\n    <form [formGroup]="form" (ngSubmit)="onSubmit()" novalidate class="mt-4">\n      <div class="form-group">\n        <label for="login-input-user-name-or-email-address">{{\n          \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\n        }}</label>\n        <input\n          class="form-control"\n          type="text"\n          id="login-input-user-name-or-email-address"\n          formControlName="username"\n          autofocus\n        />\n      </div>\n      <div class="form-group">\n        <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\n        <input class="form-control" type="password" id="login-input-password" formControlName="password" />\n      </div>\n      <div class="form-check" validationTarget validationStyle>\n        <label class="form-check-label" for="login-input-remember-me">\n          <input class="form-check-input" type="checkbox" id="login-input-remember-me" formControlName="remember" />\n          {{ \'AbpAccount::RememberMe\' | abpLocalization }}\n        </label>\n      </div>\n      <abp-button\n        [loading]="inProgress"\n        buttonType="submit"\n        name="Action"\n        buttonClass="btn-block btn-lg mt-3 btn btn-primary"\n      >\n        {{ \'AbpAccount::Login\' | abpLocalization }}\n      </abp-button>\n    </form>\n  </ng-template>\n  <ng-template #cancelContentRef>\n    <div class="card-footer text-center border-0">\n      <a routerLink="/">\n        <button type="button" name="Action" value="Cancel" class="px-2 py-0 btn btn-link">\n          {{ \'AbpAccount::Cancel\' | abpLocalization }}\n        </button>\n      </a>\n    </div>\n  </ng-template>\n</abp-auth-wrapper>\n',
              },
            ],
          },
        ]),
        (n.ctorParameters = function() {
          return [
            { type: c.FormBuilder },
            { type: u.OAuthService },
            { type: p.Store },
            { type: t.ToasterService },
            { type: void 0, decorators: [{ type: r.Optional }, { type: r.Inject, args: ['ACCOUNT_OPTIONS'] }] },
          ];
        }),
        n
      );
    })();
  var S = (function() {
    function n() {
      this.selectedTab = 0;
    }
    return (
      (n.decorators = [
        {
          type: r.Component,
          args: [
            {
              selector: 'abp-manage-profile',
              template:
                '<div id="AbpContentToolbar"></div>\n\n<div class="card border-0 shadow-sm">\n  <div class="card-body">\n    <div class="row">\n      <div class="col-3">\n        <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\n          <li class="nav-item" (click)="selectedTab = 0">\n            <a class="nav-link" [ngClass]="{ active: selectedTab === 0 }" role="tab" href="javascript:void(0)">{{\n              \'AbpUi::ChangePassword\' | abpLocalization\n            }}</a>\n          </li>\n          <li class="nav-item" (click)="selectedTab = 1">\n            <a class="nav-link" [ngClass]="{ active: selectedTab === 1 }" role="tab" href="javascript:void(0)">{{\n              \'AbpAccount::PersonalSettings\' | abpLocalization\n            }}</a>\n          </li>\n        </ul>\n      </div>\n      <div class="col-9">\n        <div class="tab-content" *ngIf="selectedTab === 0" [@fadeIn]>\n          <div class="tab-pane active" role="tabpanel">\n            <h4>\n              {{ \'AbpIdentity::ChangePassword\' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-change-password-form></abp-change-password-form>\n          </div>\n        </div>\n        <div class="tab-content" *ngIf="selectedTab === 1" [@fadeIn]>\n          <div class="tab-pane active" role="tabpanel">\n            <h4>\n              {{ \'AbpIdentity::PersonalSettings\' | abpLocalization }}\n              <hr />\n            </h4>\n            <abp-personal-settings-form></abp-personal-settings-form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n',
              animations: [f.trigger('fadeIn', [f.transition(':enter', f.useAnimation(t.fadeIn))])],
            },
          ],
        },
      ]),
      n
    );
  })();
  var C = (function() {
    function n(n) {
      this.rest = n;
    }
    return (
      (n.prototype.findTenant = function(n) {
        var e = { method: 'GET', url: '/api/abp/multi-tenancy/tenants/by-name/' + n };
        return this.rest.request(e);
      }),
      (n.prototype.register = function(n) {
        var e = { method: 'POST', url: '/api/account/register', body: n };
        return this.rest.request(e, { skipHandleError: !0 });
      }),
      (n.decorators = [{ type: r.Injectable, args: [{ providedIn: 'root' }] }]),
      (n.ctorParameters = function() {
        return [{ type: e.RestService }];
      }),
      (n.ngInjectableDef = r.ɵɵdefineInjectable({
        factory: function() {
          return new n(r.ɵɵinject(e.RestService));
        },
        token: n,
        providedIn: 'root',
      })),
      n
    );
  })();
  var N = c.Validators.maxLength,
    P = (c.Validators.minLength, c.Validators.required),
    T = c.Validators.email,
    L = (function() {
      function n(n, t, r, o, a) {
        (this.fb = n),
          (this.accountService = t),
          (this.oauthService = r),
          (this.store = o),
          (this.toasterService = a),
          this.oauthService.configure(this.store.selectSnapshot(e.ConfigState.getOne('environment')).oAuthConfig),
          this.oauthService.loadDiscoveryDocument(),
          (this.form = this.fb.group({ username: ['', [P, N(255)]], password: ['', [P, N(32)]], email: ['', [P, T]] }));
      }
      return (
        (n.prototype.onSubmit = function() {
          var n = this;
          if (!this.form.invalid) {
            this.inProgress = !0;
            var t = {
              userName: this.form.get('username').value,
              password: this.form.get('password').value,
              emailAddress: this.form.get('email').value,
              appName: 'Angular',
            };
            this.accountService
              .register(t)
              .pipe(
                m.switchMap(function() {
                  return d.from(n.oauthService.fetchTokenUsingPasswordFlow(t.userName, t.password));
                }),
                m.switchMap(function() {
                  return n.store.dispatch(new e.GetAppConfiguration());
                }),
                m.tap(function() {
                  return n.store.dispatch(new l.Navigate(['/']));
                }),
                m.take(1),
                m.catchError(function(e) {
                  return (
                    n.toasterService.error(
                      b(function() {
                        return e.error.error_description;
                      }) ||
                        b(function() {
                          return e.error.error.message;
                        }, 'AbpAccount::DefaultErrorMessage'),
                      'Error',
                      { life: 7e3 },
                    ),
                    d.throwError(e)
                  );
                }),
                m.finalize(function() {
                  return (n.inProgress = !1);
                }),
              )
              .subscribe();
          }
        }),
        (n.decorators = [
          {
            type: r.Component,
            args: [
              {
                selector: 'abp-register',
                template:
                  '<abp-auth-wrapper [mainContentRef]="mainContentRef">\n  <ng-template #mainContentRef>\n    <h4>{{ \'AbpAccount::Register\' | abpLocalization }}</h4>\n    <strong>\n      {{ \'AbpAccount::AlreadyRegistered\' | abpLocalization }}\n      <a class="text-decoration-none" routerLink="/account/login">{{ \'AbpAccount::Login\' | abpLocalization }}</a>\n    </strong>\n    <form [formGroup]="form" (ngSubmit)="onSubmit()" novalidate class="mt-4">\n      <div class="form-group">\n        <label for="input-user-name">{{ \'AbpAccount::UserName\' | abpLocalization }}</label\n        ><span> * </span\n        ><input autofocus type="text" id="input-user-name" class="form-control" formControlName="username" />\n      </div>\n      <div class="form-group">\n        <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\n        ><span> * </span><input type="email" id="input-email-address" class="form-control" formControlName="email" />\n      </div>\n      <div class="form-group">\n        <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\n        ><span> * </span><input type="password" id="input-password" class="form-control" formControlName="password" />\n      </div>\n      <abp-button\n        [loading]="inProgress"\n        buttonType="submit"\n        name="Action"\n        buttonClass="btn-block btn-lg mt-3 btn btn-primary"\n      >\n        {{ \'AbpAccount::Register\' | abpLocalization }}\n      </abp-button>\n    </form>\n  </ng-template>\n</abp-auth-wrapper>\n',
              },
            ],
          },
        ]),
        (n.ctorParameters = function() {
          return [
            { type: c.FormBuilder },
            { type: C },
            { type: u.OAuthService },
            { type: p.Store },
            { type: t.ToasterService },
          ];
        }),
        n
      );
    })();
  var x = [
      { path: '', pathMatch: 'full', redirectTo: 'login' },
      {
        path: '',
        component: e.DynamicLayoutComponent,
        children: [
          { path: 'login', component: A },
          { path: 'register', component: L },
          { path: 'manage-profile', component: S },
        ],
      },
    ],
    z = (function() {
      function n() {}
      return (
        (n.decorators = [
          { type: r.NgModule, args: [{ imports: [s.RouterModule.forChild(x)], exports: [s.RouterModule] }] },
        ]),
        n
      );
    })(),
    O = (c.Validators.minLength, c.Validators.required),
    I = ['newPassword', 'repeatNewPassword'],
    M = (function() {
      function n(n, e, t) {
        (this.fb = n),
          (this.store = e),
          (this.toasterService = t),
          (this.mapErrorsFn = function(n, e, t) {
            return I.indexOf(t.name) < 0
              ? n
              : n.concat(
                  e.filter(function(n) {
                    return 'passwordMismatch' === n.key;
                  }),
                );
          });
      }
      return (
        (n.prototype.ngOnInit = function() {
          this.form = this.fb.group(
            { password: ['', O], newPassword: ['', O], repeatNewPassword: ['', O] },
            { validators: [a.comparePasswords(I)] },
          );
        }),
        (n.prototype.onSubmit = function() {
          var n = this;
          this.form.invalid ||
            ((this.inProgress = !0),
            this.store
              .dispatch(
                new e.ChangePassword({
                  currentPassword: this.form.get('password').value,
                  newPassword: this.form.get('newPassword').value,
                }),
              )
              .pipe(
                m.finalize(function() {
                  return (n.inProgress = !1);
                }),
              )
              .subscribe({
                next: function() {
                  n.form.reset(),
                    n.toasterService.success('AbpAccount::PasswordChangedMessage', 'Success', { life: 5e3 });
                },
                error: function(e) {
                  n.toasterService.error(
                    b(function() {
                      return e.error.error.message;
                    }, 'AbpAccount::DefaultErrorMessage'),
                    'Error',
                    { life: 7e3 },
                  );
                },
              }));
        }),
        (n.decorators = [
          {
            type: r.Component,
            args: [
              {
                selector: 'abp-change-password-form',
                template:
                  '<form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn">\n  <div class="form-group">\n    <label for="current-password">{{ \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization }}</label\n    ><span> * </span\n    ><input type="password" id="current-password" class="form-control" formControlName="password" autofocus />\n  </div>\n  <div class="form-group">\n    <label for="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</label\n    ><span> * </span><input type="password" id="new-password" class="form-control" formControlName="newPassword" />\n  </div>\n  <div class="form-group">\n    <label for="confirm-new-password">{{ \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization }}</label\n    ><span> * </span\n    ><input type="password" id="confirm-new-password" class="form-control" formControlName="repeatNewPassword" />\n  </div>\n  <abp-button\n    iconClass="fa fa-check"\n    buttonClass="btn btn-primary color-white"\n    buttonType="submit"\n    [loading]="inProgress"\n    >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\n  >\n</form>\n',
              },
            ],
          },
        ]),
        (n.ctorParameters = function() {
          return [{ type: c.FormBuilder }, { type: p.Store }, { type: t.ToasterService }];
        }),
        n
      );
    })();
  var k = c.Validators.maxLength,
    R = c.Validators.required,
    U = c.Validators.email,
    j = (function() {
      function n(n, e, t) {
        (this.fb = n), (this.store = e), (this.toasterService = t);
      }
      return (
        (n.prototype.ngOnInit = function() {
          this.buildForm();
        }),
        (n.prototype.buildForm = function() {
          var n = this;
          this.store
            .dispatch(new e.GetProfile())
            .pipe(
              m.withLatestFrom(this.profile$),
              m.take(1),
            )
            .subscribe(function(e) {
              var t = v(e, 2)[1];
              n.form = n.fb.group({
                userName: [t.userName, [R, k(256)]],
                email: [t.email, [R, U, k(256)]],
                name: [t.name || '', [k(64)]],
                surname: [t.surname || '', [k(64)]],
                phoneNumber: [t.phoneNumber || '', [k(16)]],
              });
            });
        }),
        (n.prototype.submit = function() {
          var n = this;
          this.form.invalid ||
            ((this.inProgress = !0),
            this.store
              .dispatch(new e.UpdateProfile(this.form.value))
              .pipe(
                m.finalize(function() {
                  return (n.inProgress = !1);
                }),
              )
              .subscribe(function() {
                n.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5e3 });
              }));
        }),
        (n.decorators = [
          {
            type: r.Component,
            args: [
              {
                selector: 'abp-personal-settings-form',
                template:
                  '<form novalidate *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\n  <div class="form-group">\n    <label for="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</label\n    ><span> * </span\n    ><input\n      type="text"\n      id="username"\n      class="form-control"\n      formControlName="userName"\n      autofocus\n      (keydown.space)="$event.preventDefault()"\n    />\n  </div>\n  <div class="row">\n    <div class="col col-md-6">\n      <div class="form-group">\n        <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label\n        ><input type="text" id="name" class="form-control" formControlName="name" />\n      </div>\n    </div>\n    <div class="col col-md-6">\n      <div class="form-group">\n        <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label\n        ><input type="text" id="surname" class="form-control" formControlName="surname" />\n      </div>\n    </div>\n  </div>\n  <div class="form-group">\n    <label for="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</label\n    ><span> * </span><input type="text" id="email-address" class="form-control" formControlName="email" />\n  </div>\n  <div class="form-group">\n    <label for="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</label\n    ><input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\n  </div>\n  <abp-button\n    buttonType="submit"\n    iconClass="fa fa-check"\n    buttonClass="btn btn-primary color-white"\n    [loading]="inProgress"\n  >\n    {{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\n  >\n</form>\n',
              },
            ],
          },
        ]),
        (n.ctorParameters = function() {
          return [{ type: c.FormBuilder }, { type: p.Store }, { type: t.ToasterService }];
        }),
        (function(n, e, t, r) {
          var o,
            a = arguments.length,
            i = a < 3 ? e : null === r ? (r = Object.getOwnPropertyDescriptor(e, t)) : r;
          if ('object' == typeof Reflect && 'function' == typeof Reflect.decorate) i = Reflect.decorate(n, e, t, r);
          else
            for (var s = n.length - 1; s >= 0; s--)
              (o = n[s]) && (i = (a < 3 ? o(i) : a > 3 ? o(e, t, i) : o(e, t)) || i);
          a > 3 && i && Object.defineProperty(e, t, i);
        })([p.Select(e.ProfileState.getProfile), h('design:type', d.Observable)], n.prototype, 'profile$', void 0),
        n
      );
    })();
  var q = (function() {
    function n(n, e, t) {
      (this.store = n), (this.toasterService = e), (this.accountService = t), (this.tenant = {});
    }
    return (
      (n.prototype.ngOnInit = function() {
        (this.tenant = this.store.selectSnapshot(e.SessionState.getTenant) || {}),
          (this.tenantName = this.tenant.name || '');
      }),
      (n.prototype.onSwitch = function() {
        this.isModalVisible = !0;
      }),
      (n.prototype.save = function() {
        var n = this;
        this.tenant.name
          ? this.accountService
              .findTenant(this.tenant.name)
              .pipe(
                m.take(1),
                m.catchError(function(e) {
                  return (
                    n.toasterService.error(
                      b(function() {
                        return e.error.error_description;
                      }, 'AbpUi::DefaultErrorMessage'),
                      'AbpUi::Error',
                    ),
                    d.throwError(e)
                  );
                }),
              )
              .subscribe(function(t) {
                var r = t.success,
                  o = t.tenantId;
                r
                  ? ((n.tenant = { id: o, name: n.tenant.name }),
                    (n.tenantName = n.tenant.name),
                    (n.isModalVisible = !1))
                  : (n.toasterService.error('AbpUiMultiTenancy::GivenTenantIsNotAvailable', 'AbpUi::Error', {
                      messageLocalizationParams: [n.tenant.name],
                    }),
                    (n.tenant = {})),
                  n.store.dispatch(new e.SetTenant(r ? n.tenant : null));
              })
          : (this.store.dispatch(new e.SetTenant(null)), (this.tenantName = null), (this.isModalVisible = !1));
      }),
      (n.decorators = [
        {
          type: r.Component,
          args: [
            {
              selector: 'abp-tenant-box',
              template:
                '<div class="card shadow-sm rounded mb-3">\n  <div class="card-body px-5">\n    <div class="row">\n      <div class="col">\n        <span style="font-size: 0.8em;" class="text-uppercase text-muted">{{\n          \'AbpUiMultiTenancy::Tenant\' | abpLocalization\n        }}</span\n        ><br />\n        <h6 class="m-0 d-inline-block">\n          <span>\n            {{ tenantName || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}\n          </span>\n        </h6>\n      </div>\n      <div class="col-auto">\n        <a\n          id="AbpTenantSwitchLink"\n          href="javascript:void(0);"\n          class="btn btn-sm mt-3 btn-outline-primary"\n          (click)="onSwitch()"\n          >{{ \'AbpUiMultiTenancy::Switch\' | abpLocalization }}</a\n        >\n      </div>\n    </div>\n  </div>\n</div>\n\n<abp-modal [(visible)]="isModalVisible" size="md">\n  <ng-template #abpHeader>\n    <h5>Switch Tenant</h5>\n  </ng-template>\n  <ng-template #abpBody>\n    <form (ngSubmit)="save()">\n      <div class="mt-2">\n        <div class="form-group">\n          <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\n          <input [(ngModel)]="tenant.name" type="text" id="name" name="tenant" class="form-control" autofocus />\n        </div>\n        <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\n      </div>\n    </form>\n  </ng-template>\n  <ng-template #abpFooter>\n    <button #abpClose type="button" class="btn btn-secondary">\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\n    </button>\n    <button type="button" class="btn btn-primary" (click)="save()">\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\n    </button>\n  </ng-template>\n</abp-modal>\n',
            },
          ],
        },
      ]),
      (n.ctorParameters = function() {
        return [{ type: p.Store }, { type: t.ToasterService }, { type: C }];
      }),
      n
    );
  })();
  function E(n) {
    return g({ redirectUrl: '/' }, n);
  }
  var D = new r.InjectionToken('ACCOUNT_OPTIONS'),
    V = (function() {
      function n() {}
      return (
        (n.decorators = [
          {
            type: r.Component,
            args: [
              {
                selector: 'abp-auth-wrapper',
                template:
                  '<div class="row">\n  <div class="mx-auto col col-md-5">\n    <abp-tenant-box></abp-tenant-box>\n\n    <div class="abp-account-container">\n      <div class="card mt-3 shadow-sm rounded">\n        <div class="card-body p-5">\n          <ng-content *ngTemplateOutlet="mainContentRef"></ng-content>\n        </div>\n        <ng-content *ngTemplateOutlet="cancelContentRef"></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n',
              },
            ],
          },
        ]),
        (n.propDecorators = { mainContentRef: [{ type: r.Input }], cancelContentRef: [{ type: r.Input }] }),
        n
      );
    })();
  var F = (function() {
    function n() {}
    return (
      (n.decorators = [
        {
          type: r.NgModule,
          args: [
            {
              declarations: [V, A, L, q, M, S, j],
              imports: [
                e.CoreModule,
                z,
                t.ThemeSharedModule,
                i.TableModule,
                o.NgbDropdownModule,
                a.NgxValidateCoreModule,
              ],
              exports: [],
            },
          ],
        },
      ]),
      n
    );
  })();
  (n.ACCOUNT_OPTIONS = D),
    (n.ACCOUNT_ROUTES = {
      routes: [
        {
          name: 'Account',
          path: 'account',
          invisible: !0,
          layout: 'application',
          children: [{ path: 'login', name: 'Login', order: 1 }, { path: 'register', name: 'Register', order: 2 }],
        },
      ],
    }),
    (n.AccountModule = F),
    (n.AccountProviders = function(n) {
      return (
        void 0 === n && (n = {}),
        [{ provide: D, useValue: n }, { provide: 'ACCOUNT_OPTIONS', useFactory: E, deps: [D] }]
      );
    }),
    (n.ChangePasswordComponent = M),
    (n.LoginComponent = A),
    (n.ManageProfileComponent = S),
    (n.PersonalSettingsComponent = j),
    (n.RegisterComponent = L),
    (n.optionsFactory = E),
    (n.ɵa = V),
    (n.ɵb = A),
    (n.ɵd = L),
    (n.ɵe = C),
    (n.ɵf = q),
    (n.ɵg = M),
    (n.ɵh = S),
    (n.ɵi = j),
    (n.ɵj = z),
    (n.ɵk = E),
    (n.ɵl = D),
    Object.defineProperty(n, '__esModule', { value: !0 });
});
//# sourceMappingURL=abp-ng.account.umd.min.js.map
