!(function(t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? e(
        exports,
        require('@abp/ng.core'),
        require('@angular/core'),
        require('primeng/components/common/messageservice'),
        require('primeng/toast'),
        require('rxjs'),
        require('@angular/router'),
        require('@ngxs/store'),
        require('@angular/forms'),
        require('@ngx-validate/core'),
        require('snq'),
        require('rxjs/operators'),
        require('@angular/animations'),
        require('@angular/common/http'),
      )
    : 'function' == typeof define && define.amd
    ? define('@abp/ng.theme.shared', [
        'exports',
        '@abp/ng.core',
        '@angular/core',
        'primeng/components/common/messageservice',
        'primeng/toast',
        'rxjs',
        '@angular/router',
        '@ngxs/store',
        '@angular/forms',
        '@ngx-validate/core',
        'snq',
        'rxjs/operators',
        '@angular/animations',
        '@angular/common/http',
      ], e)
    : e(
        (((t = t || self).abp = t.abp || {}),
        (t.abp.ng = t.abp.ng || {}),
        (t.abp.ng.theme = t.abp.ng.theme || {}),
        (t.abp.ng.theme.shared = {})),
        t.ng_core,
        t.ng.core,
        t.messageservice,
        t.toast,
        t.rxjs,
        t.ng.router,
        t.store,
        t.ng.forms,
        t.core$1,
        t.snq,
        t.rxjs.operators,
        t.ng.animations,
        t.ng.common.http,
      );
})(this, function(t, e, n, o, a, r, i, s, p, l, c, u, m, d) {
  'use strict';
  c = c && c.hasOwnProperty('default') ? c.default : c;
  /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
  var f = function(t, e) {
    return (f =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function(t, e) {
          t.__proto__ = e;
        }) ||
      function(t, e) {
        for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
      })(t, e);
  };
  function b(t, e) {
    function n() {
      this.constructor = t;
    }
    f(t, e), (t.prototype = null === e ? Object.create(e) : ((n.prototype = e.prototype), new n()));
  }
  var h = function() {
    return (h =
      Object.assign ||
      function(t) {
        for (var e, n = 1, o = arguments.length; n < o; n++)
          for (var a in (e = arguments[n])) Object.prototype.hasOwnProperty.call(e, a) && (t[a] = e[a]);
        return t;
      }).apply(this, arguments);
  };
  function g(t, e) {
    if ('object' == typeof Reflect && 'function' == typeof Reflect.metadata) return Reflect.metadata(t, e);
  }
  function y(t, e) {
    var n = 'function' == typeof Symbol && t[Symbol.iterator];
    if (!n) return t;
    var o,
      a,
      r = n.call(t),
      i = [];
    try {
      for (; (void 0 === e || e-- > 0) && !(o = r.next()).done; ) i.push(o.value);
    } catch (t) {
      a = { error: t };
    } finally {
      try {
        o && !o.done && (n = r.return) && n.call(r);
      } finally {
        if (a) throw a.error;
      }
    }
    return i;
  }
  function v() {
    for (var t = [], e = 0; e < arguments.length; e++) t = t.concat(y(arguments[e]));
    return t;
  }
  var w = (function() {
    function t(t, e) {
      (this.router = t),
        (this.store = e),
        (this.segments = []),
        (this.show = !!this.store.selectSnapshot(function(t) {
          return t.LeptonLayoutState;
        }));
    }
    return (
      (t.prototype.ngOnInit = function() {
        var t = this.router.url.split('/').filter(function(t) {
            return t;
          }),
          n = this.store.selectSnapshot(e.ConfigState.getRoute(t[0]));
        if ((this.segments.push(n.name), t.length > 1))
          for (
            var o = y(t).slice(1),
              a = n,
              r = function(t) {
                var e = o[t];
                (a = a.children.find(function(t) {
                  return t.path === e;
                })),
                  i.segments.push(a.name);
              },
              i = this,
              s = 0;
            s < o.length;
            s++
          )
            r(s);
      }),
      (t.decorators = [
        {
          type: n.Component,
          args: [
            {
              selector: 'abp-breadcrumb',
              template:
                '<ol *ngIf="show" class="breadcrumb">\n  <li class="breadcrumb-item">\n    <a routerLink="/"><i class="fa fa-home"></i> </a>\n  </li>\n  <li\n    *ngFor="let segment of segments; let last = last"\n    class="breadcrumb-item"\n    [class.active]="last"\n    aria-current="page"\n  >\n    {{ segment | abpLocalization }}\n  </li>\n</ol>\n',
            },
          ],
        },
      ]),
      (t.ctorParameters = function() {
        return [{ type: i.Router }, { type: s.Store }];
      }),
      t
    );
  })();
  var C = (function() {
    function t(t) {
      (this.renderer = t),
        (this.buttonClass = 'btn btn-primary'),
        (this.loading = !1),
        (this.disabled = !1),
        (this.click = new n.EventEmitter()),
        (this.focus = new n.EventEmitter()),
        (this.blur = new n.EventEmitter()),
        (this.type = 'button');
    }
    return (
      Object.defineProperty(t.prototype, 'icon', {
        get: function() {
          return '' + (this.loading ? 'fa fa-spinner fa-spin' : this.iconClass || 'd-none');
        },
        enumerable: !0,
        configurable: !0,
      }),
      (t.prototype.ngOnInit = function() {
        var t = this;
        this.attributes &&
          Object.keys(this.attributes).forEach(function(e) {
            t.renderer.setAttribute(t.buttonRef.nativeElement, e, t.attributes[e]);
          });
      }),
      (t.decorators = [
        {
          type: n.Component,
          args: [
            {
              selector: 'abp-button',
              template:
                '\n    <button\n      #button\n      [attr.type]="buttonType || type"\n      [ngClass]="buttonClass"\n      [disabled]="loading || disabled"\n      (click)="click.emit($event)"\n      (focus)="focus.emit($event)"\n      (blur)="blur.emit($event)"\n    >\n      <i [ngClass]="icon" class="mr-1"></i><ng-content></ng-content>\n    </button>\n  ',
            },
          ],
        },
      ]),
      (t.ctorParameters = function() {
        return [{ type: n.Renderer2 }];
      }),
      (t.propDecorators = {
        buttonClass: [{ type: n.Input }],
        buttonType: [{ type: n.Input }],
        iconClass: [{ type: n.Input }],
        loading: [{ type: n.Input }],
        disabled: [{ type: n.Input }],
        attributes: [{ type: n.Input }],
        click: [{ type: n.Output }],
        focus: [{ type: n.Output }],
        blur: [{ type: n.Output }],
        buttonRef: [{ type: n.ViewChild, args: ['button', { static: !0 }] }],
        type: [{ type: n.Input }],
      }),
      t
    );
  })();
  var x = (function() {
    function t(t) {
      (this.messageService = t), (this.key = 'abpToast'), (this.sticky = !1);
    }
    return (
      (t.prototype.info = function(t, e, n) {
        return this.show(t, e, 'info', n);
      }),
      (t.prototype.success = function(t, e, n) {
        return this.show(t, e, 'success', n);
      }),
      (t.prototype.warn = function(t, e, n) {
        return this.show(t, e, 'warn', n);
      }),
      (t.prototype.error = function(t, e, n) {
        return this.show(t, e, 'error', n);
      }),
      (t.prototype.show = function(t, e, n, o) {
        return (
          this.messageService.clear(this.key),
          this.messageService.add(
            h(
              { severity: n, detail: t || '', summary: e || '' },
              o,
              { key: this.key },
              void 0 === (o || {}).sticky && { sticky: this.sticky },
            ),
          ),
          (this.status$ = new r.Subject()),
          this.status$
        );
      }),
      (t.prototype.clear = function(t) {
        this.messageService.clear(this.key), this.status$.next(t || 'dismiss'), this.status$.complete();
      }),
      t
    );
  })();
  var I = (function(t) {
      function e() {
        return (null !== t && t.apply(this, arguments)) || this;
      }
      return (
        b(e, t),
        (e.prototype.addAll = function(t) {
          var e = this;
          this.messageService.addAll(
            t.map(function(t) {
              return h({ key: e.key }, t);
            }),
          );
        }),
        (e.decorators = [{ type: n.Injectable, args: [{ providedIn: 'root' }] }]),
        (e.ngInjectableDef = n.ɵɵdefineInjectable({
          factory: function() {
            return new e(n.ɵɵinject(o.MessageService));
          },
          token: e,
          providedIn: 'root',
        })),
        e
      );
    })(x),
    k = (p.Validators.minLength, p.Validators.required),
    E = ['newPassword', 'repeatNewPassword'],
    O = (function() {
      function t(t, e, o) {
        (this.fb = t),
          (this.store = e),
          (this.toasterService = o),
          (this.visibleChange = new n.EventEmitter()),
          (this.modalBusy = !1),
          (this.mapErrorsFn = function(t, e, n) {
            return E.indexOf(n.name) < 0
              ? t
              : t.concat(
                  e.filter(function(t) {
                    return 'passwordMismatch' === t.key;
                  }),
                );
          });
      }
      return (
        Object.defineProperty(t.prototype, 'visible', {
          get: function() {
            return this._visible;
          },
          set: function(t) {
            (this._visible = t), this.visibleChange.emit(t);
          },
          enumerable: !0,
          configurable: !0,
        }),
        (t.prototype.ngOnInit = function() {
          this.form = this.fb.group(
            { password: ['', k], newPassword: ['', k], repeatNewPassword: ['', k] },
            { validators: [l.comparePasswords(E)] },
          );
        }),
        (t.prototype.onSubmit = function() {
          var t = this;
          this.form.invalid ||
            ((this.modalBusy = !0),
            this.store
              .dispatch(
                new e.ChangePassword({
                  currentPassword: this.form.get('password').value,
                  newPassword: this.form.get('newPassword').value,
                }),
              )
              .pipe(
                u.finalize(function() {
                  t.modalBusy = !1;
                }),
              )
              .subscribe({
                next: function() {
                  (t.visible = !1), t.form.reset();
                },
                error: function(e) {
                  t.toasterService.error(
                    c(function() {
                      return e.error.error.message;
                    }, 'AbpAccount::DefaultErrorMessage'),
                    'Error',
                    { life: 7e3 },
                  );
                },
              }));
        }),
        (t.prototype.openModal = function() {
          this.visible = !0;
        }),
        (t.prototype.ngOnChanges = function(t) {
          var e = t.visible;
          e && (e.currentValue ? this.openModal() : !1 === e.currentValue && this.visible && (this.visible = !1));
        }),
        (t.decorators = [
          {
            type: n.Component,
            args: [
              {
                selector: 'abp-change-password',
                template:
                  '<abp-modal [(visible)]="visible" [busy]="modalBusy">\n  <ng-template #abpHeader>\n    <h4>{{ \'AbpIdentity::ChangePassword\' | abpLocalization }}</h4>\n  </ng-template>\n  <ng-template #abpBody>\n    <form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn">\n      <div class="form-group">\n        <label for="current-password">{{ \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization }}</label\n        ><span> * </span\n        ><input type="password" id="current-password" class="form-control" formControlName="password" autofocus />\n      </div>\n      <div class="form-group">\n        <label for="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</label\n        ><span> * </span><input type="password" id="new-password" class="form-control" formControlName="newPassword" />\n      </div>\n      <div class="form-group">\n        <label for="confirm-new-password">{{ \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization }}</label\n        ><span> * </span\n        ><input type="password" id="confirm-new-password" class="form-control" formControlName="repeatNewPassword" />\n      </div>\n    </form>\n  </ng-template>\n  <ng-template #abpFooter>\n    <button type="button" class="btn btn-secondary color-white" #abpClose>\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\n    </button>\n    <abp-button iconClass="fa fa-check" buttonClass="btn btn-primary color-white" (click)="onSubmit()">{{\n      \'AbpIdentity::Save\' | abpLocalization\n    }}</abp-button>\n  </ng-template>\n</abp-modal>\n',
              },
            ],
          },
        ]),
        (t.ctorParameters = function() {
          return [{ type: p.FormBuilder }, { type: s.Store }, { type: I }];
        }),
        (t.propDecorators = {
          visible: [{ type: n.Input }],
          visibleChange: [{ type: n.Output }],
          modalContent: [{ type: n.ViewChild, args: ['modalContent', { static: !1 }] }],
        }),
        t
      );
    })();
  var L = new r.ReplaySubject(1),
    S = (function() {
      function t(t, e) {
        var o = this;
        (this.el = t),
          (this.cdRef = e),
          (this.options = {}),
          (this.plugins = []),
          (this.responsive = !0),
          (this.onDataSelect = new n.EventEmitter()),
          (this.initialized = new r.BehaviorSubject(this)),
          (this.onCanvasClick = function(t) {
            if (o.chart) {
              var e = o.chart.getElementAtEvent(t),
                n = o.chart.getDatasetAtEvent(t);
              e && e[0] && n && o.onDataSelect.emit({ originalEvent: t, element: e[0], dataset: n });
            }
          }),
          (this.initChart = function() {
            var t = o.options || {};
            (t.responsive = o.responsive),
              t.responsive && (o.height || o.width) && (t.maintainAspectRatio = !1),
              (o.chart = new Chart(o.el.nativeElement.children[0].children[0], {
                type: o.type,
                data: o.data,
                options: o.options,
                plugins: o.plugins,
              })),
              o.cdRef.detectChanges();
          }),
          (this.generateLegend = function() {
            if (o.chart) return o.chart.generateLegend();
          }),
          (this.refresh = function() {
            o.chart && (o.chart.update(), o.cdRef.detectChanges());
          }),
          (this.reinit = function() {
            o.chart && (o.chart.destroy(), o.initChart());
          });
      }
      return (
        Object.defineProperty(t.prototype, 'data', {
          get: function() {
            return this._data;
          },
          set: function(t) {
            (this._data = t), this.reinit();
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, 'canvas', {
          get: function() {
            return this.el.nativeElement.children[0].children[0];
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, 'base64Image', {
          get: function() {
            return this.chart.toBase64Image();
          },
          enumerable: !0,
          configurable: !0,
        }),
        (t.prototype.ngAfterViewInit = function() {
          var t = this;
          L.subscribe(function() {
            try {
              Chart;
            } catch (t) {
              return void console.error(
                "Chart is not found. Import the Chart from app.module like shown below:\n        import('chart.js');\n        ",
              );
            }
            t.initChart(), (t._initialized = !0);
          });
        }),
        (t.prototype.ngOnDestroy = function() {
          this.chart && (this.chart.destroy(), (this._initialized = !1), (this.chart = null));
        }),
        (t.decorators = [
          {
            type: n.Component,
            args: [
              {
                selector: 'abp-chart',
                template:
                  '<div\n  style="position:relative"\n  [style.width]="responsive && !width ? null : width"\n  [style.height]="responsive && !height ? null : height"\n>\n  <canvas\n    [attr.width]="responsive && !width ? null : width"\n    [attr.height]="responsive && !height ? null : height"\n    (click)="onCanvasClick($event)"\n  ></canvas>\n</div>\n',
              },
            ],
          },
        ]),
        (t.ctorParameters = function() {
          return [{ type: n.ElementRef }, { type: n.ChangeDetectorRef }];
        }),
        (t.propDecorators = {
          type: [{ type: n.Input }],
          options: [{ type: n.Input }],
          plugins: [{ type: n.Input }],
          width: [{ type: n.Input }],
          height: [{ type: n.Input }],
          responsive: [{ type: n.Input }],
          onDataSelect: [{ type: n.Output }],
          initialized: [{ type: n.Output }],
          data: [{ type: n.Input }],
        }),
        t
      );
    })();
  var j = (function(t) {
    function e(e) {
      var n = t.call(this, e) || this;
      return (n.messageService = e), (n.key = 'abpConfirmation'), (n.sticky = !0), (n.destroy$ = new r.Subject()), n;
    }
    return (
      b(e, t),
      (e.prototype.show = function(e, n, o, a) {
        return this.listenToEscape(), t.prototype.show.call(this, e, n, o, a);
      }),
      (e.prototype.clear = function(e) {
        t.prototype.clear.call(this, e), this.destroy$.next();
      }),
      (e.prototype.listenToEscape = function() {
        var t = this;
        r.fromEvent(document, 'keyup')
          .pipe(
            u.takeUntil(this.destroy$),
            u.debounceTime(150),
            u.filter(function(t) {
              return t && 'Escape' === t.code;
            }),
          )
          .subscribe(function(e) {
            t.clear();
          });
      }),
      (e.decorators = [{ type: n.Injectable, args: [{ providedIn: 'root' }] }]),
      (e.ctorParameters = function() {
        return [{ type: o.MessageService }];
      }),
      (e.ngInjectableDef = n.ɵɵdefineInjectable({
        factory: function() {
          return new e(n.ɵɵinject(o.MessageService));
        },
        token: e,
        providedIn: 'root',
      })),
      e
    );
  })(x);
  var A = (function() {
    function t(t) {
      (this.confirmationService = t), (this.confirm = 'confirm'), (this.reject = 'reject'), (this.dismiss = 'dismiss');
    }
    return (
      (t.prototype.close = function(t) {
        this.confirmationService.clear(t);
      }),
      (t.decorators = [
        {
          type: n.Component,
          args: [
            {
              selector: 'abp-confirmation',
              template:
                '\n    <p-toast\n      position="center"\n      key="abpConfirmation"\n      (onClose)="close(dismiss)"\n      [modal]="true"\n      [baseZIndex]="1000"\n      styleClass="abp-confirm"\n    >\n      <ng-template let-message pTemplate="message">\n        <i class="fa fa-exclamation-circle abp-confirm-icon"></i>\n        <div *ngIf="message.summary" class="abp-confirm-summary">\n          {{ message.summary | abpLocalization: message.titleLocalizationParams }}\n        </div>\n        <div class="abp-confirm-body">\n          {{ message.detail | abpLocalization: message.messageLocalizationParams }}\n        </div>\n\n        <div class="abp-confirm-footer justify-content-center">\n          <button\n            *ngIf="!message.hideCancelBtn"\n            id="cancel"\n            type="button"\n            class="btn btn-sm btn-primary"\n            (click)="close(reject)"\n          >\n            {{ message.cancelCopy || \'AbpIdentity::Cancel\' | abpLocalization }}\n          </button>\n          <button\n            *ngIf="!message.hideYesBtn"\n            id="confirm"\n            type="button"\n            class="btn btn-sm btn-primary"\n            (click)="close(confirm)"\n            autofocus\n          >\n            <span>{{ message.yesCopy || \'AbpIdentity::Yes\' | abpLocalization }}</span>\n          </button>\n        </div>\n      </ng-template>\n    </p-toast>\n  ',
            },
          ],
        },
      ]),
      (t.ctorParameters = function() {
        return [{ type: j }];
      }),
      t
    );
  })();
  var P = (function() {
    function t() {
      (this.title = 'Oops!'), (this.details = 'Sorry, an error has occured.');
    }
    return (
      (t.prototype.destroy = function() {
        this.renderer.removeChild(this.host, this.elementRef.nativeElement);
      }),
      (t.decorators = [
        {
          type: n.Component,
          args: [
            {
              selector: 'abp-error',
              template:
                '<div class="error">\n  <button id="abp-close-button mr-3" type="button" class="close" (click)="destroy()">\n    <span aria-hidden="true">&times;</span>\n  </button>\n  <div class="row centered">\n    <div class="col-md-12">\n      <div class="error-template">\n        <h1>\n          {{ title | abpLocalization }}\n        </h1>\n        <div class="error-details">\n          {{ details | abpLocalization }}\n        </div>\n        <div class="error-actions">\n          <a (click)="destroy()" routerLink="/" class="btn btn-primary btn-md mt-2"\n            ><span class="glyphicon glyphicon-home"></span>\n            {{ { key: \'::Menu:Home\', defaultValue: \'Home\' } | abpLocalization }}\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n',
              styles: [
                '.error{position:fixed;top:0;background-color:#fff;width:100vw;height:100vh;z-index:999999}.centered{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%)}',
              ],
            },
          ],
        },
      ]),
      t
    );
  })();
  var z = (function() {
    function t(t, n, o) {
      var a = this;
      (this.actions = t),
        (this.router = n),
        (this.cdRef = o),
        (this.containerClass = 'abp-loader-bar'),
        (this.color = '#77b6ff'),
        (this.isLoading = !1),
        (this.progressLevel = 0),
        (this.filter = function(t) {
          return t.payload.url.indexOf('openid-configuration') < 0;
        }),
        t
          .pipe(
            s.ofActionSuccessful(e.StartLoader, e.StopLoader),
            u.filter(this.filter),
            l.takeUntilDestroy(this),
          )
          .subscribe(function(t) {
            t instanceof e.StartLoader ? a.startLoading() : a.stopLoading();
          }),
        n.events
          .pipe(
            u.filter(function(t) {
              return t instanceof i.NavigationStart || t instanceof i.NavigationEnd || t instanceof i.NavigationError;
            }),
            l.takeUntilDestroy(this),
          )
          .subscribe(function(t) {
            t instanceof i.NavigationStart ? a.startLoading() : a.stopLoading();
          });
    }
    return (
      Object.defineProperty(t.prototype, 'boxShadow', {
        get: function() {
          return '0 0 10px rgba(' + this.color + ', 0.5)';
        },
        enumerable: !0,
        configurable: !0,
      }),
      (t.prototype.ngOnDestroy = function() {
        this.interval.unsubscribe();
      }),
      (t.prototype.startLoading = function() {
        var t = this;
        this.isLoading ||
          0 !== this.progressLevel ||
          ((this.isLoading = !0),
          (this.interval = r.interval(350).subscribe(function() {
            t.progressLevel < 75
              ? (t.progressLevel += 10 * Math.random())
              : t.progressLevel < 90
              ? (t.progressLevel += 0.4)
              : t.progressLevel < 100
              ? (t.progressLevel += 0.1)
              : t.interval.unsubscribe(),
              t.cdRef.detectChanges();
          })));
      }),
      (t.prototype.stopLoading = function() {
        var t = this;
        this.interval.unsubscribe(),
          (this.progressLevel = 100),
          (this.isLoading = !1),
          (this.timer && !this.timer.closed) ||
            (this.timer = r.timer(820).subscribe(function() {
              (t.progressLevel = 0), t.cdRef.detectChanges();
            }));
      }),
      (t.decorators = [
        {
          type: n.Component,
          args: [
            {
              selector: 'abp-loader-bar',
              template:
                '\n    <div id="abp-loader-bar" [ngClass]="containerClass" [class.is-loading]="isLoading">\n      <div\n        class="abp-progress"\n        [style.width.vw]="progressLevel"\n        [ngStyle]="{\n          \'background-color\': color,\n          \'box-shadow\': boxShadow\n        }"\n      ></div>\n    </div>\n  ',
              styles: [
                '.abp-loader-bar{left:0;opacity:0;position:fixed;top:0;transition:opacity .4s linear .4s;z-index:99999}.abp-loader-bar.is-loading{opacity:1;transition:none}.abp-loader-bar .abp-progress{height:3px;left:0;position:fixed;top:0;transition:width .4s}',
              ],
            },
          ],
        },
      ]),
      (t.ctorParameters = function() {
        return [{ type: s.Actions }, { type: i.Router }, { type: n.ChangeDetectorRef }];
      }),
      (t.propDecorators = {
        containerClass: [{ type: n.Input }],
        color: [{ type: n.Input }],
        isLoading: [{ type: n.Input }],
        filter: [{ type: n.Input }],
      }),
      t
    );
  })();
  var R = m.animation([m.style({ opacity: '0' }), m.animate('{{ time}} {{ easing }}', m.style({ opacity: '1' }))], {
      params: { time: '350ms', easing: 'ease' },
    }),
    N = m.animation([m.style({ opacity: '1' }), m.animate('{{ time}} {{ easing }}', m.style({ opacity: '0' }))], {
      params: { time: '350ms', easing: 'ease' },
    }),
    M = m.animation(
      [
        m.style({ opacity: '0', transform: '{{ transform }} translateY(-20px)' }),
        m.animate('{{ time }} {{ easing }}', m.style({ opacity: '1', transform: '{{ transform }} translateY(0)' })),
      ],
      { params: { time: '350ms', easing: 'ease', transform: '' } },
    ),
    D = m.animation(
      [
        m.style({ opacity: '0', transform: '{{ transform }} translateY(20px)' }),
        m.animate('{{ time }} {{ easing }}', m.style({ opacity: '1', transform: '{{ transform }} translateY(0)' })),
      ],
      { params: { time: '350ms', easing: 'ease', transform: '' } },
    ),
    T = m.animation(
      [
        m.style({ opacity: '0', transform: '{{ transform }} translateX(20px)' }),
        m.animate('{{ time }} {{ easing }}', m.style({ opacity: '1', transform: '{{ transform }} translateX(0)' })),
      ],
      { params: { time: '350ms', easing: 'ease', transform: '' } },
    ),
    _ = m.animation(
      [
        m.style({ opacity: '0', transform: '{{ transform }} translateX(-20px)' }),
        m.animate('{{ time }} {{ easing }}', m.style({ opacity: '1', transform: '{{ transform }} translateX(0)' })),
      ],
      { params: { time: '350ms', easing: 'ease', transform: '' } },
    ),
    F = m.animation(
      [
        m.style({ opacity: '1', transform: '{{ transform }} translateY(0)' }),
        m.animate('{{ time }} {{ easing }}', m.style({ opacity: '0', transform: '{{ transform }} translateY(20px)' })),
      ],
      { params: { time: '350ms', easing: 'ease', transform: '' } },
    ),
    B = m.animation(
      [
        m.style({ opacity: '1', transform: '{{ transform }} translateY(0)' }),
        m.animate('{{ time }} {{ easing }}', m.style({ opacity: '0', transform: '{{ transform }} translateY(-20px)' })),
      ],
      { params: { time: '350ms', easing: 'ease', transform: '' } },
    ),
    Y = m.animation(
      [
        m.style({ opacity: '1', transform: '{{ transform }} translateX(0)' }),
        m.animate('{{ time }} {{ easing }}', m.style({ opacity: '0', transform: '{{ transform }} translateX(20px)' })),
      ],
      { params: { time: '350ms', easing: 'ease', transform: '' } },
    ),
    q = m.animation(
      [
        m.style({ opacity: '1', transform: '{{ transform }} translateX(0)' }),
        m.animate('{{ time }} {{ easing }}', m.style({ opacity: '0', transform: '{{ transform }} translateX(-20px)' })),
      ],
      { params: { time: '350ms', easing: 'ease', transform: '' } },
    ),
    V = m.trigger('fade', [m.transition(':enter', m.useAnimation(R)), m.transition(':leave', m.useAnimation(N))]),
    $ = m.trigger('dialog', [m.transition(':enter', m.useAnimation(M)), m.transition(':leave', m.useAnimation(N))]),
    U = (function() {
      function t(t, e) {
        (this.renderer = t),
          (this.confirmationService = e),
          (this.centered = !1),
          (this.modalClass = ''),
          (this.size = 'lg'),
          (this.visibleChange = new n.EventEmitter()),
          (this.init = new n.EventEmitter()),
          (this.appear = new n.EventEmitter()),
          (this.disappear = new n.EventEmitter()),
          (this._visible = !1),
          (this._busy = !1),
          (this.isModalOpen = !1),
          (this.isConfirmationOpen = !1),
          (this.destroy$ = new r.Subject());
      }
      return (
        Object.defineProperty(t.prototype, 'visible', {
          get: function() {
            return this._visible;
          },
          set: function(t) {
            var e = this;
            'boolean' == typeof t &&
              ((this.isModalOpen = t),
              (this._visible = t),
              this.visibleChange.emit(t),
              t
                ? (setTimeout(function() {
                    return e.listen();
                  }, 0),
                  this.renderer.addClass(document.body, 'modal-open'),
                  this.appear.emit())
                : (this.renderer.removeClass(document.body, 'modal-open'), this.disappear.emit()));
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, 'busy', {
          get: function() {
            return this._busy;
          },
          set: function(t) {
            this.abpSubmit && this.abpSubmit instanceof C && (this.abpSubmit.loading = t), (this._busy = t);
          },
          enumerable: !0,
          configurable: !0,
        }),
        (t.prototype.ngOnDestroy = function() {
          this.destroy$.next();
        }),
        (t.prototype.close = function() {
          var t = this;
          if (!this.busy)
            if (
              (function(t) {
                return (
                  t.findIndex(function(t) {
                    return (t.className || '').indexOf('ng-dirty') > -1;
                  }) > -1
                );
              })(
                (function t(e) {
                  return Array.from(e).reduce(function(e, n) {
                    return v(e, n.childNodes && n.childNodes.length ? t(n.childNodes) : [n]);
                  }, []);
                })(this.modalContent.nativeElement.querySelector('#abp-modal-body').childNodes),
              )
            ) {
              if (this.isConfirmationOpen) return;
              (this.isConfirmationOpen = !0),
                this.confirmationService
                  .warn('AbpAccount::AreYouSureYouWantToCancelEditingWarningMessage', 'AbpAccount::AreYouSure')
                  .subscribe(function(e) {
                    (t.isConfirmationOpen = !1), 'confirm' === e && (t.visible = !1);
                  });
            } else this.visible = !1;
        }),
        (t.prototype.listen = function() {
          var t = this;
          r
            .fromEvent(document, 'keyup')
            .pipe(
              u.takeUntil(this.destroy$),
              u.debounceTime(150),
              u.filter(function(t) {
                return t && 'Escape' === t.code;
              }),
            )
            .subscribe(function(e) {
              t.close();
            }),
            setTimeout(function() {
              t.abpClose &&
                r
                  .fromEvent(t.abpClose.nativeElement, 'click')
                  .pipe(
                    u.takeUntil(t.destroy$),
                    u.filter(function() {
                      return !!t.modalContent;
                    }),
                  )
                  .subscribe(function() {
                    return t.close();
                  });
            }, 0),
            this.init.emit();
        }),
        (t.decorators = [
          {
            type: n.Component,
            args: [
              {
                selector: 'abp-modal',
                template:
                  '<ng-container *ngIf="visible">\n  <div class="modal show {{ modalClass }}" tabindex="-1" role="dialog">\n    <div class="modal-backdrop" [@fade]="isModalOpen" (click)="close()"></div>\n    <div\n      id="abp-modal-dialog"\n      class="modal-dialog modal-{{ size }}"\n      role="document"\n      [@dialog]="isModalOpen"\n      #abpModalContent\n    >\n      <div id="abp-modal-content" class="modal-content">\n        <div id="abp-modal-header" class="modal-header">\n          <ng-container *ngTemplateOutlet="abpHeader"></ng-container>\n          ​\n          <button id="abp-modal-close-button" type="button" class="close" aria-label="Close" (click)="close()">\n            <span aria-hidden="true">&times;</span>\n          </button>\n        </div>\n        <div id="abp-modal-body" class="modal-body">\n          <ng-container *ngTemplateOutlet="abpBody"></ng-container>\n        </div>\n        <div id="abp-modal-footer" class="modal-footer">\n          <ng-container *ngTemplateOutlet="abpFooter"></ng-container>\n        </div>\n      </div>\n    </div>\n    <ng-content></ng-content>\n  </div>\n</ng-container>\n',
                animations: [V, $],
              },
            ],
          },
        ]),
        (t.ctorParameters = function() {
          return [{ type: n.Renderer2 }, { type: j }];
        }),
        (t.propDecorators = {
          visible: [{ type: n.Input }],
          busy: [{ type: n.Input }],
          centered: [{ type: n.Input }],
          modalClass: [{ type: n.Input }],
          size: [{ type: n.Input }],
          abpSubmit: [{ type: n.ContentChild, args: [C, { static: !1, read: C }] }],
          abpHeader: [{ type: n.ContentChild, args: ['abpHeader', { static: !1 }] }],
          abpBody: [{ type: n.ContentChild, args: ['abpBody', { static: !1 }] }],
          abpFooter: [{ type: n.ContentChild, args: ['abpFooter', { static: !1 }] }],
          abpClose: [{ type: n.ContentChild, args: ['abpClose', { static: !1, read: n.ElementRef }] }],
          modalContent: [{ type: n.ViewChild, args: ['abpModalContent', { static: !1 }] }],
          abpButtons: [{ type: n.ViewChildren, args: ['abp-button'] }],
          visibleChange: [{ type: n.Output }],
          init: [{ type: n.Output }],
          appear: [{ type: n.Output }],
          disappear: [{ type: n.Output }],
        }),
        t
      );
    })();
  var K = p.Validators.maxLength,
    X = p.Validators.required,
    H = p.Validators.email,
    W = (function() {
      function t(t, e) {
        (this.fb = t), (this.store = e), (this.visibleChange = new n.EventEmitter()), (this.modalBusy = !1);
      }
      return (
        Object.defineProperty(t.prototype, 'visible', {
          get: function() {
            return this._visible;
          },
          set: function(t) {
            (this._visible = t), this.visibleChange.emit(t);
          },
          enumerable: !0,
          configurable: !0,
        }),
        (t.prototype.buildForm = function() {
          var t = this;
          this.store
            .dispatch(new e.GetProfile())
            .pipe(
              u.withLatestFrom(this.profile$),
              u.take(1),
            )
            .subscribe(function(e) {
              var n = y(e, 2)[1];
              t.form = t.fb.group({
                userName: [n.userName, [X, K(256)]],
                email: [n.email, [X, H, K(256)]],
                name: [n.name || '', [K(64)]],
                surname: [n.surname || '', [K(64)]],
                phoneNumber: [n.phoneNumber || '', [K(16)]],
              });
            });
        }),
        (t.prototype.submit = function() {
          var t = this;
          this.form.invalid ||
            ((this.modalBusy = !0),
            this.store.dispatch(new e.UpdateProfile(this.form.value)).subscribe(function() {
              (t.modalBusy = !1), (t.visible = !1), t.form.reset();
            }));
        }),
        (t.prototype.openModal = function() {
          this.buildForm(), (this.visible = !0);
        }),
        (t.prototype.ngOnChanges = function(t) {
          var e = t.visible;
          e && (e.currentValue ? this.openModal() : !1 === e.currentValue && this.visible && (this.visible = !1));
        }),
        (t.decorators = [
          {
            type: n.Component,
            args: [
              {
                selector: 'abp-profile',
                template:
                  '<abp-modal [(visible)]="visible" [busy]="modalBusy">\n  <ng-template #abpHeader>\n    <h4>{{ \'AbpIdentity::PersonalInfo\' | abpLocalization }}</h4>\n  </ng-template>\n  <ng-template #abpBody>\n    <form novalidate *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\n      <div class="form-group">\n        <label for="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</label\n        ><span> * </span><input type="text" id="username" class="form-control" formControlName="userName" autofocus />\n      </div>\n      <div class="row">\n        <div class="col col-md-6">\n          <div class="form-group">\n            <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label\n            ><input type="text" id="name" class="form-control" formControlName="name" />\n          </div>\n        </div>\n        <div class="col col-md-6">\n          <div class="form-group">\n            <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label\n            ><input type="text" id="surname" class="form-control" formControlName="surname" />\n          </div>\n        </div>\n      </div>\n      <div class="form-group">\n        <label for="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</label\n        ><span> * </span><input type="text" id="email-address" class="form-control" formControlName="email" />\n      </div>\n      <div class="form-group">\n        <label for="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</label\n        ><input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\n      </div>\n    </form>\n  </ng-template>\n  <ng-template #abpFooter>\n    <button #abpClose type="button" class="btn btn-secondary color-white">\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\n    </button>\n    <abp-button iconClass="fa fa-check" buttonClass="btn btn-primary color-white" (click)="submit()">{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button>\n  </ng-template>\n</abp-modal>\n',
              },
            ],
          },
        ]),
        (t.ctorParameters = function() {
          return [{ type: p.FormBuilder }, { type: s.Store }];
        }),
        (t.propDecorators = { visible: [{ type: n.Input }], visibleChange: [{ type: n.Output }] }),
        (function(t, e, n, o) {
          var a,
            r = arguments.length,
            i = r < 3 ? e : null === o ? (o = Object.getOwnPropertyDescriptor(e, n)) : o;
          if ('object' == typeof Reflect && 'function' == typeof Reflect.decorate) i = Reflect.decorate(t, e, n, o);
          else
            for (var s = t.length - 1; s >= 0; s--)
              (a = t[s]) && (i = (r < 3 ? a(i) : r > 3 ? a(e, n, i) : a(e, n)) || i);
          r > 3 && i && Object.defineProperty(e, n, i);
        })([s.Select(e.ProfileState.getProfile), g('design:type', r.Observable)], t.prototype, 'profile$', void 0),
        t
      );
    })();
  var Z = (function() {
      function t() {}
      return (
        (t.decorators = [
          {
            type: n.Component,
            args: [
              {
                selector: 'abp-toast',
                template:
                  '\n    <p-toast position="bottom-right" key="abpToast" styleClass="abp-toast" [baseZIndex]="1000">\n      <ng-template let-message pTemplate="message">\n        <span\n          class="ui-toast-icon pi"\n          [ngClass]="{\n            \'pi-info-circle\': message.severity == \'info\',\n            \'pi-exclamation-triangle\': message.severity == \'warn\',\n            \'pi-times\': message.severity == \'error\',\n            \'pi-check\': message.severity == \'success\'\n          }"\n        ></span>\n        <div class="ui-toast-message-text-content">\n          <div class="ui-toast-summary">{{ message.summary | abpLocalization: message.titleLocalizationParams }}</div>\n          <div class="ui-toast-detail">{{ message.detail | abpLocalization: message.messageLocalizationParams }}</div>\n        </div>\n      </ng-template>\n    </p-toast>\n  ',
              },
            ],
          },
        ]),
        t
      );
    })(),
    G = (function() {
      function t() {
        (this.selectedKeyChange = new n.EventEmitter()), (this.orderChange = new n.EventEmitter());
      }
      return (
        Object.defineProperty(t.prototype, 'selectedKey', {
          get: function() {
            return this._selectedKey;
          },
          set: function(t) {
            (this._selectedKey = t), this.selectedKeyChange.emit(t);
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, 'order', {
          get: function() {
            return this._order;
          },
          set: function(t) {
            (this._order = t), this.orderChange.emit(t);
          },
          enumerable: !0,
          configurable: !0,
        }),
        Object.defineProperty(t.prototype, 'icon', {
          get: function() {
            return this.selectedKey ? (this.selectedKey === this.key ? 'fa-sort-' + this.order : '') : 'fa-sort';
          },
          enumerable: !0,
          configurable: !0,
        }),
        (t.prototype.sort = function(t) {
          switch (((this.selectedKey = t), this.order)) {
            case '':
              this.order = 'asc';
              break;
            case 'asc':
              (this.order = 'desc'), this.orderChange.emit('desc');
              break;
            case 'desc':
              (this.order = ''), (this.selectedKey = '');
          }
        }),
        (t.decorators = [
          {
            type: n.Component,
            args: [
              {
                selector: 'abp-sort-order-icon',
                template: '<span class="float-right {{ iconClass }}">\n  <i class="fa {{ icon }}"></i>\n</span>\n',
              },
            ],
          },
        ]),
        (t.propDecorators = {
          selectedKey: [{ type: n.Input }],
          selectedKeyChange: [{ type: n.Output }],
          key: [{ type: n.Input }],
          order: [{ type: n.Input }],
          orderChange: [{ type: n.Output }],
          iconClass: [{ type: n.Input }],
        }),
        t
      );
    })();
  var J =
      '\n.is-invalid .form-control {\n  border-color: #dc3545;\n  border-style: solid !important;\n}\n\n.is-invalid .invalid-feedback,\n.is-invalid + * .invalid-feedback {\n  display: block;\n}\n\n.data-tables-filter {\n  text-align: right;\n}\n\n.pointer {\n  cursor: pointer;\n}\n\n.navbar .dropdown-submenu a::after {\n  transform: rotate(-90deg);\n  position: absolute;\n  right: 16px;\n  top: 18px;\n}\n\n.navbar .dropdown-menu {\n  min-width: 215px;\n}\n\n.ui-table-scrollable-body::-webkit-scrollbar {\n  height: 5px !important;\n}\n\n.ui-table-scrollable-body::-webkit-scrollbar-track {\n  background: #ddd;\n}\n\n.ui-table-scrollable-body::-webkit-scrollbar-thumb {\n  background: #8a8686;\n}\n\n.modal.show {\n  display: block !important;\n}\n\n.modal-backdrop {\n  position: absolute !important;\n  top: 0 !important;\n  left: 0 !important;\n  width: 100% !important;\n  height: 100% !important;\n  background-color: rgba(0, 0, 0, 0.6) !important;\n  z-index: 1040 !important;\n}\n\n.modal-dialog {\n  z-index: 1050 !important;\n}\n\n.abp-ellipsis-inline {\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.abp-ellipsis {\n  overflow: hidden !important;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.abp-toast .ui-toast-message {\n  box-sizing: border-box !important;\n  border: 2px solid transparent !important;\n  border-radius: 4px !important;\n  background-color: #f4f4f7 !important;\n  color: #1b1d29 !important;\n}\n\n.abp-toast .ui-toast-message-content {\n  padding: 10px !important;\n}\n\n.abp-toast .ui-toast-message-content .ui-toast-icon {\n  top: 0 !important;\n  left: 0 !important;\n  padding: 10px !important;\n}\n\n.abp-toast .ui-toast-summary {\n  margin: 0 !important;\n  font-weight: 700 !important;\n}\n\n.abp-toast .ui-toast-message.ui-toast-message-error {\n  border-color: #ba1659 !important;\n}\n\n.abp-toast .ui-toast-message.ui-toast-message-error .ui-toast-message-content .ui-toast-icon {\n  color: #ba1659 !important;\n}\n\n.abp-toast .ui-toast-message.ui-toast-message-warning {\n  border-color: #ed5d98 !important;\n}\n\n.abp-toast .ui-toast-message.ui-toast-message-warning .ui-toast-message-content .ui-toast-icon {\n  color: #ed5d98 !important;\n}\n\n.abp-toast .ui-toast-message.ui-toast-message-success {\n  border-color: #1c9174 !important;\n}\n\n.abp-toast .ui-toast-message.ui-toast-message-success .ui-toast-message-content .ui-toast-icon {\n  color: #1c9174 !important;\n}\n\n.abp-toast .ui-toast-message.ui-toast-message-info {\n  border-color: #fccb31 !important;\n}\n\n.abp-toast .ui-toast-message.ui-toast-message-info .ui-toast-message-content .ui-toast-icon {\n  color: #fccb31 !important;\n}\n\n.abp-confirm .ui-toast-message {\n  box-sizing: border-box !important;\n  padding: 0px !important;\n  border:0 none !important;\n  border-radius: 4px !important;\n  background-color: #fff !important;\n  color: rgba(0, 0, 0, .65) !important;\n  font-family: "Poppins", sans-serif;\n  text-align: center !important;\n}\n\n.abp-confirm .ui-toast-message-content {\n  padding: 0px !important;\n}\n\n.abp-confirm .abp-confirm-icon {\n  margin: 32px 50px 5px !important;\n  color: #f8bb86 !important;\n  font-size: 52px !important;\n}\n\n.abp-confirm .ui-toast-close-icon {\n  display: none !important;\n}\n\n.abp-confirm .abp-confirm-summary {\n  display: block !important;\n  margin-bottom: 13px !important;\n  padding: 13px 16px 0px !important;\n  font-weight: 600 !important;\n  font-size: 18px !important;\n}\n\n.abp-confirm .abp-confirm-body {\n  display: inline-block !important;\n  padding: 0px 10px !important;\n}\n\n.abp-confirm .abp-confirm-footer {\n  display: block !important;\n  margin-top: 30px !important;\n  padding: 16px !important;\n  background-color: #f4f4f7 !important;\n  text-align: right !important;\n}\n\n.abp-confirm .abp-confirm-footer .btn {\n  margin-left: 10px !important;\n}\n\n.ui-widget-overlay {\n  z-index: 1000;\n}\n\n.color-white {\n  color: #FFF !important;\n}\n\n/* <animations */\n\n.fade-in-top {\n  animation: fadeInTop 0.2s ease-in-out;\n}\n\n.fade-out-top {\n  animation: fadeOutTop 0.2s ease-in-out;\n}\n\n.abp-collapsed {\n  -moz-transition: margin ease-in-out 0.5s;\n  -ms-transition: margin ease-in-out 0.5s;\n  -o-transition: margin ease-in-out 0.5s;\n  -webkit-transition: margin ease-in-out 0.5s;\n  transition: margin ease-in-out 0.5s;\n  margin-top: -100%;\n}\n\n.abp-collapsed.expanded {\n  margin-top: 0 !important;\n}\n\n@keyframes fadeInTop {\n  from {\n    transform: translateY(-5px);\n    opacity: 0;\n  }\n\n  to {\n    transform: translateY(0px);\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOutTop {\n  to {\n    transform: translateY(-5px);\n    opacity: 0;\n  }\n}\n\n/* </animations */\n\n',
    Q = {
      defaultError: { title: 'An error has occurred!', details: 'Error detail not sent by server.' },
      defaultError401: {
        title: 'You are not authenticated!',
        details: 'You should be authenticated (sign in) in order to perform this operation.',
      },
      defaultError403: { title: 'You are not authorized!', details: 'You are not allowed to perform this operation.' },
      defaultError404: {
        title: 'Resource not found!',
        details: 'The resource requested could not found on the server.',
      },
      defaultError500: {
        title: '500',
        details: { key: 'AbpAccount::InternalServerErrorMessage', defaultValue: 'Error detail not sent by server.' },
      },
      defaultErrorUnknown: {
        title: 'Unknown Error',
        details: { key: 'AbpAccount::InternalServerErrorMessage', defaultValue: 'Error detail not sent by server.' },
      },
    },
    tt = (function() {
      function t(t, n, o, a, r, i, p, l, u) {
        var m = this;
        (this.actions = t),
          (this.router = n),
          (this.ngZone = o),
          (this.store = a),
          (this.confirmationService = r),
          (this.appRef = i),
          (this.cfRes = p),
          (this.rendererFactory = l),
          (this.injector = u),
          t.pipe(s.ofActionSuccessful(e.RestOccurError)).subscribe(function(t) {
            var e = t.payload,
              n = void 0 === e ? {} : e,
              o = c(function() {
                return n.error.error;
              }, Q.defaultError.title);
            if (n instanceof d.HttpErrorResponse && n.headers.get('_AbpErrorFormat')) {
              var a = m.showError(null, null, o);
              401 === n.status &&
                a.subscribe(function() {
                  m.navigateToLogin();
                });
            } else
              switch (n.status) {
                case 401:
                  m.showError(Q.defaultError401.details, Q.defaultError401.title).subscribe(function() {
                    return m.navigateToLogin();
                  });
                  break;
                case 403:
                  m.createErrorComponent({ title: Q.defaultError403.title, details: Q.defaultError403.details });
                  break;
                case 404:
                  m.showError(Q.defaultError404.details, Q.defaultError404.title);
                  break;
                case 500:
                  m.createErrorComponent({ title: Q.defaultError500.title, details: Q.defaultError500.details });
                  break;
                case 0:
                  'Unknown Error' === n.statusText &&
                    m.createErrorComponent({
                      title: Q.defaultErrorUnknown.title,
                      details: Q.defaultErrorUnknown.details,
                    });
                  break;
                default:
                  m.showError(Q.defaultError.details, Q.defaultError.title);
              }
          });
      }
      return (
        (t.prototype.showError = function(t, e, n) {
          return (
            n && (n.details ? ((t = n.details), (e = n.message)) : (t = n.message || Q.defaultError.title)),
            this.confirmationService.error(t, e, { hideCancelBtn: !0, yesCopy: 'OK' })
          );
        }),
        (t.prototype.navigateToLogin = function() {
          var t = this;
          this.ngZone.run(function() {
            t.router.navigate(['/account/login'], { state: { redirectUrl: t.router.url } });
          });
        }),
        (t.prototype.createErrorComponent = function(t) {
          var e = this.rendererFactory.createRenderer(null, null),
            n = e.selectRootElement(document.body, !0),
            o = this.cfRes.resolveComponentFactory(P).create(this.injector);
          for (var a in o.instance) o.instance.hasOwnProperty(a) && (o.instance[a] = t[a]);
          this.appRef.attachView(o.hostView),
            e.appendChild(n, o.hostView.rootNodes[0]),
            (o.instance.renderer = e),
            (o.instance.elementRef = o.location),
            (o.instance.host = n);
        }),
        (t.decorators = [{ type: n.Injectable, args: [{ providedIn: 'root' }] }]),
        (t.ctorParameters = function() {
          return [
            { type: s.Actions },
            { type: i.Router },
            { type: n.NgZone },
            { type: s.Store },
            { type: j },
            { type: n.ApplicationRef },
            { type: n.ComponentFactoryResolver },
            { type: n.RendererFactory2 },
            { type: n.Injector },
          ];
        }),
        (t.ngInjectableDef = n.ɵɵdefineInjectable({
          factory: function() {
            return new t(
              n.ɵɵinject(s.Actions),
              n.ɵɵinject(i.Router),
              n.ɵɵinject(n.NgZone),
              n.ɵɵinject(s.Store),
              n.ɵɵinject(j),
              n.ɵɵinject(n.ApplicationRef),
              n.ɵɵinject(n.ComponentFactoryResolver),
              n.ɵɵinject(n.RendererFactory2),
              n.ɵɵinject(n.INJECTOR),
            );
          },
          token: t,
          providedIn: 'root',
        })),
        t
      );
    })();
  var et = (function() {
    function t() {
      (this.colspan = 2),
        (this.localizationResource = 'AbpAccount'),
        (this.localizationProp = 'NoDataAvailableInDatatable');
    }
    return (
      Object.defineProperty(t.prototype, 'emptyMessage', {
        get: function() {
          return this.message || this.localizationResource + '::' + this.localizationProp;
        },
        enumerable: !0,
        configurable: !0,
      }),
      (t.decorators = [
        {
          type: n.Component,
          args: [
            {
              selector: '[abp-table-empty-message]',
              template:
                '\n    <td class="text-center" [attr.colspan]="colspan">\n      {{ emptyMessage | abpLocalization }}\n    </td>\n  ',
            },
          ],
        },
      ]),
      (t.propDecorators = {
        colspan: [{ type: n.Input }],
        message: [{ type: n.Input }],
        localizationResource: [{ type: n.Input }],
        localizationProp: [{ type: n.Input }],
      }),
      t
    );
  })();
  function nt(t) {
    return function() {
      import('chart.js').then(function() {
        return L.next(!0);
      });
      var n = t.get(e.LazyLoadService);
      return r.forkJoin(n.load(null, 'style', J, 'head', 'afterbegin')).toPromise();
    };
  }
  var ot,
    at = (function() {
      function t() {}
      return (
        (t.forRoot = function() {
          return {
            ngModule: t,
            providers: [
              { provide: n.APP_INITIALIZER, multi: !0, deps: [n.Injector, tt], useFactory: nt },
              { provide: o.MessageService, useClass: o.MessageService },
            ],
          };
        }),
        (t.decorators = [
          {
            type: n.NgModule,
            args: [
              {
                imports: [e.CoreModule, a.ToastModule, l.NgxValidateCoreModule],
                declarations: [w, C, O, S, A, P, z, U, W, et, Z, G],
                exports: [w, C, O, S, A, z, U, W, et, Z, G],
                entryComponents: [P],
              },
            ],
          },
        ]),
        t
      );
    })(),
    rt = m.animation(
      [
        m.style({ opacity: '0', display: '{{ display }}' }),
        m.animate(
          '{{ time}} {{ easing }}',
          m.keyframes([
            m.style({ opacity: '0', transform: '{{ transform }} scale(0.0)', offset: 0 }),
            m.style({ opacity: '0', transform: '{{ transform }} scale(0.8)', offset: 0.5 }),
            m.style({ opacity: '1', transform: '{{ transform }} scale(1.0)', offset: 1 }),
          ]),
        ),
      ],
      {
        params: {
          time: '350ms',
          easing: 'cubic-bezier(.7,.31,.72,1.47)',
          display: 'block',
          transform: 'translate(-50%, -50%)',
        },
      },
    ),
    it = m.animation(
      [
        m.style({ height: '*', overflow: 'hidden', 'box-sizing': 'border-box' }),
        m.animate('{{ time }} {{ easing }}', m.style({ height: '0', padding: '0px' })),
      ],
      { params: { time: '350ms', easing: 'ease' } },
    ),
    st = m.animation(
      [m.style({ 'margin-top': '0' }), m.animate('{{ time }} {{ easing }}', m.style({ 'margin-top': '-100%' }))],
      { params: { time: '500ms', easing: 'ease' } },
    ),
    pt = m.animation(
      [
        m.style({ width: '*', overflow: 'hidden', 'box-sizing': 'border-box' }),
        m.animate('{{ time }} {{ easing }}', m.style({ width: '0', padding: '0px' })),
      ],
      { params: { time: '350ms', easing: 'ease' } },
    ),
    lt = m.animation(
      [
        m.style({ height: '0', overflow: 'hidden', 'box-sizing': 'border-box' }),
        m.animate('{{ time }} {{ easing }}', m.style({ height: '*', padding: '*' })),
      ],
      { params: { time: '350ms', easing: 'ease' } },
    ),
    ct = m.animation(
      [m.style({ 'margin-top': '-100%' }), m.animate('{{ time }} {{ easing }}', m.style({ 'margin-top': '0' }))],
      { params: { time: '500ms', easing: 'ease' } },
    ),
    ut = m.animation(
      [
        m.style({ width: '0', overflow: 'hidden', 'box-sizing': 'border-box' }),
        m.animate('{{ time }} {{ easing }}', m.style({ width: '*', padding: '*' })),
      ],
      { params: { time: '350ms', easing: 'ease' } },
    ),
    mt = m.trigger('collapse', [
      m.state('collapsed', m.style({ height: '0', overflow: 'hidden' })),
      m.state('expanded', m.style({ height: '*', overflow: 'hidden' })),
      m.transition('expanded => collapsed', m.useAnimation(it)),
      m.transition('collapsed => expanded', m.useAnimation(lt)),
    ]),
    dt = m.trigger('collapseWithMargin', [
      m.state('collapsed', m.style({ 'margin-top': '-100%' })),
      m.state('expanded', m.style({ 'margin-top': '0' })),
      m.transition('expanded => collapsed', m.useAnimation(st), { params: { time: '400ms', easing: 'linear' } }),
      m.transition('collapsed => expanded', m.useAnimation(ct)),
    ]),
    ft = m.trigger('collapseLinearWithMargin', [
      m.state('collapsed', m.style({ 'margin-top': '-100%' })),
      m.state('expanded', m.style({ 'margin-top': '0' })),
      m.transition('expanded => collapsed', m.useAnimation(st, { params: { time: '200ms', easing: 'linear' } })),
      m.transition('collapsed => expanded', m.useAnimation(ct, { params: { time: '250ms', easing: 'linear' } })),
    ]),
    bt = m.trigger('slideFromBottom', [
      m.transition('* <=> *', [
        m.style({ 'margin-top': '20px', opacity: '0' }),
        m.animate('0.2s ease-out', m.style({ opacity: '1', 'margin-top': '0px' })),
      ]),
    ]);
  !(function(t) {
    function e() {}
    t.Options = e;
  })(ot || (ot = {}));
  var ht,
    gt = [];
  !(function(t) {
    function e() {}
    function n() {}
    (t.Response = e), (t.Data = function() {}), (t.Filter = n);
  })(ht || (ht = {})),
    (function(t) {
      function e() {}
      t.Options = e;
    })(t.Toaster || (t.Toaster = {})),
    (t.BreadcrumbComponent = w),
    (t.ButtonComponent = C),
    (t.ChangePasswordComponent = O),
    (t.ChartComponent = S),
    (t.ConfirmationComponent = A),
    (t.ConfirmationService = j),
    (t.LoaderBarComponent = z),
    (t.ModalComponent = U),
    (t.ProfileComponent = W),
    (t.SortOrderIconComponent = G),
    (t.TableEmptyMessageComponent = et),
    (t.ThemeSharedModule = at),
    (t.ToastComponent = Z),
    (t.ToasterService = I),
    (t.addSettingTab = function(t) {
      Array.isArray(t) || (t = [t]), gt.push.apply(gt, v(t));
    }),
    (t.appendScript = nt),
    (t.bounceIn = rt),
    (t.chartJsLoaded$ = L),
    (t.collapse = mt),
    (t.collapseLinearWithMargin = ft),
    (t.collapseWithMargin = dt),
    (t.collapseX = pt),
    (t.collapseY = it),
    (t.collapseYWithMargin = st),
    (t.dialogAnimation = $),
    (t.expandX = ut),
    (t.expandY = lt),
    (t.expandYWithMargin = ct),
    (t.fadeAnimation = V),
    (t.fadeIn = R),
    (t.fadeInDown = M),
    (t.fadeInLeft = T),
    (t.fadeInRight = _),
    (t.fadeInUp = D),
    (t.fadeOut = N),
    (t.fadeOutDown = F),
    (t.fadeOutLeft = Y),
    (t.fadeOutRight = q),
    (t.fadeOutUp = B),
    (t.getRandomBackgroundColor = function(t) {
      for (var e = [], n = 0; n < t; n++) {
        var o = ((n + 5) * (n + 5) * 474) % 255,
          a = ((n + 5) * (n + 5) * 1600) % 255,
          r = ((n + 5) * (n + 5) * 84065) % 255;
        e.push('rgba(' + o + ', ' + a + ', ' + r + ', 0.7)');
      }
      return e;
    }),
    (t.getSettingTabs = function() {
      return gt;
    }),
    (t.slideFromBottom = bt),
    (t.ɵa = w),
    (t.ɵb = C),
    (t.ɵc = O),
    (t.ɵd = I),
    (t.ɵe = x),
    (t.ɵf = S),
    (t.ɵg = A),
    (t.ɵh = j),
    (t.ɵi = P),
    (t.ɵj = z),
    (t.ɵk = U),
    (t.ɵl = V),
    (t.ɵm = $),
    (t.ɵn = R),
    (t.ɵo = N),
    (t.ɵp = M),
    (t.ɵq = W),
    (t.ɵr = et),
    (t.ɵs = Z),
    (t.ɵt = G),
    (t.ɵu = tt),
    Object.defineProperty(t, '__esModule', { value: !0 });
});
//# sourceMappingURL=abp-ng.theme.shared.umd.min.js.map
