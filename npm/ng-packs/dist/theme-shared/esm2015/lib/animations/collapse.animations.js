/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, animation, trigger, state, style, transition, useAnimation } from '@angular/animations';
/** @type {?} */
export const collapseY = animation(
  [
    style({ height: '*', overflow: 'hidden', 'box-sizing': 'border-box' }),
    animate('{{ time }} {{ easing }}', style({ height: '0', padding: '0px' })),
  ],
  { params: { time: '350ms', easing: 'ease' } },
);
/** @type {?} */
export const collapseYWithMargin = animation(
  [style({ 'margin-top': '0' }), animate('{{ time }} {{ easing }}', style({ 'margin-top': '-100%' }))],
  {
    params: { time: '500ms', easing: 'ease' },
  },
);
/** @type {?} */
export const collapseX = animation(
  [
    style({ width: '*', overflow: 'hidden', 'box-sizing': 'border-box' }),
    animate('{{ time }} {{ easing }}', style({ width: '0', padding: '0px' })),
  ],
  { params: { time: '350ms', easing: 'ease' } },
);
/** @type {?} */
export const expandY = animation(
  [
    style({ height: '0', overflow: 'hidden', 'box-sizing': 'border-box' }),
    animate('{{ time }} {{ easing }}', style({ height: '*', padding: '*' })),
  ],
  { params: { time: '350ms', easing: 'ease' } },
);
/** @type {?} */
export const expandYWithMargin = animation(
  [style({ 'margin-top': '-100%' }), animate('{{ time }} {{ easing }}', style({ 'margin-top': '0' }))],
  {
    params: { time: '500ms', easing: 'ease' },
  },
);
/** @type {?} */
export const expandX = animation(
  [
    style({ width: '0', overflow: 'hidden', 'box-sizing': 'border-box' }),
    animate('{{ time }} {{ easing }}', style({ width: '*', padding: '*' })),
  ],
  { params: { time: '350ms', easing: 'ease' } },
);
/** @type {?} */
export const collapse = trigger('collapse', [
  state('collapsed', style({ height: '0', overflow: 'hidden' })),
  state('expanded', style({ height: '*', overflow: 'hidden' })),
  transition('expanded => collapsed', useAnimation(collapseY)),
  transition('collapsed => expanded', useAnimation(expandY)),
]);
/** @type {?} */
export const collapseWithMargin = trigger('collapseWithMargin', [
  state('collapsed', style({ 'margin-top': '-100%' })),
  state('expanded', style({ 'margin-top': '0' })),
  transition('expanded => collapsed', useAnimation(collapseYWithMargin), {
    params: { time: '400ms', easing: 'linear' },
  }),
  transition('collapsed => expanded', useAnimation(expandYWithMargin)),
]);
/** @type {?} */
export const collapseLinearWithMargin = trigger('collapseLinearWithMargin', [
  state('collapsed', style({ 'margin-top': '-100%' })),
  state('expanded', style({ 'margin-top': '0' })),
  transition(
    'expanded => collapsed',
    useAnimation(collapseYWithMargin, { params: { time: '200ms', easing: 'linear' } }),
  ),
  transition('collapsed => expanded', useAnimation(expandYWithMargin, { params: { time: '250ms', easing: 'linear' } })),
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UuYW5pbWF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhYnAvbmcudGhlbWUuc2hhcmVkLyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbnMvY29sbGFwc2UuYW5pbWF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDOztBQUUxRyxNQUFNLE9BQU8sU0FBUyxHQUFHLFNBQVMsQ0FDaEM7SUFDRSxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxDQUFDO0lBQ3RFLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0NBQzNFLEVBQ0QsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUM5Qzs7QUFFRCxNQUFNLE9BQU8sbUJBQW1CLEdBQUcsU0FBUyxDQUMxQyxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLENBQUMsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ3BHO0lBQ0UsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0NBQzFDLENBQ0Y7O0FBRUQsTUFBTSxPQUFPLFNBQVMsR0FBRyxTQUFTLENBQ2hDO0lBQ0UsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFF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MEJBQTBCLEVBQUU7SUFDMUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNwRCxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLFVBQVUsQ0FDUix1QkFBdUIsRUFDdkIsWUFBWSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUNuRjtJQUNELFVBQVUsQ0FBQyx1QkFBdUIsRUFBRSxZQUFZLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDdEgsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIGFuaW1hdGlvbiwgdHJpZ2dlciwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCB1c2VBbmltYXRpb24gfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuZXhwb3J0IGNvbnN0IGNvbGxhcHNlWSA9IGFuaW1hdGlvbihcbiAgW1xuICAgIHN0eWxlKHsgaGVpZ2h0OiAnKicsIG92ZXJmbG93OiAnaGlkZGVuJywgJ2JveC1zaXppbmcnOiAnYm9yZGVyLWJveCcgfSksXG4gICAgYW5pbWF0ZSgne3sgdGltZSB9fSB7eyBlYXNpbmcgfX0nLCBzdHlsZSh7IGhlaWdodDogJzAnLCBwYWRkaW5nOiAnMHB4JyB9KSksXG4gIF0sXG4gIHsgcGFyYW1zOiB7IHRpbWU6ICczNTBtcycsIGVhc2luZzogJ2Vhc2UnIH0gfSxcbik7XG5cbmV4cG9ydCBjb25zdCBjb2xsYXBzZVlXaXRoTWFyZ2luID0gYW5pbWF0aW9uKFxuICBbc3R5bGUoeyAnbWFyZ2luLXRvcCc6ICcwJyB9KSwgYW5pbWF0ZSgne3sgdGltZSB9fSB7eyBlYXNpbmcgfX0nLCBzdHlsZSh7ICdtYXJnaW4tdG9wJzogJy0xMDAlJyB9KSldLFxuICB7XG4gICAgcGFyYW1zOiB7IHRpbWU6ICc1MDBtcycsIGVhc2luZzogJ2Vhc2UnIH0sXG4gIH0sXG4pO1xuXG5leHBvcnQgY29uc3QgY29sbGFwc2VYID0gYW5pbWF0aW9uKFxuICBbXG4gICAgc3R5bGUoeyB3aWR0aDogJyonLCBvdmVyZmxvdzogJ2hpZGRlbicsICdib3gtc2l6aW5nJzogJ2JvcmRlci1ib3gnIH0pLFxuICAgIGFuaW1hdGUoJ3t7IHRpbWUgfX0ge3sgZWFzaW5nIH19Jywgc3R5bGUoeyB3aWR0aDogJzAnLCBwYWRkaW5nOiAnMHB4JyB9KSksXG4gIF0sXG4gIHsgcGFyYW1zOiB7IHRpbWU6ICczNTBtcycsIGVhc2luZzogJ2Vhc2UnIH0gfSxcbik7XG5cbmV4cG9ydCBjb25zdCBleHBhbmRZID0gYW5pbWF0aW9uKFxuICBbXG4gICAgc3R5bGUoeyBoZWlnaHQ6ICcwJywgb3ZlcmZsb3c6ICdoaWRkZW4nLCAnYm94LXNpemluZyc6ICdib3JkZXItYm94JyB9KSxcbiAgICBhbmltYXRlKCd7eyB0aW1lIH19IHt7IGVhc2luZyB9fScsIHN0eWxlKHsgaGVpZ2h0OiAnKicsIHBhZGRpbmc6ICcqJyB9KSksXG4gIF0sXG4gIHsgcGFyYW1zOiB7IHRpbWU6ICczNTBtcycsIGVhc2luZzogJ2Vhc2UnIH0gfSxcbik7XG5cbmV4cG9ydCBjb25zdCBleHBhbmRZV2l0aE1hcmdpbiA9IGFuaW1hdGlvbihcbiAgW3N0eWxlKHsgJ21hcmdpbi10b3AnOiAnLTEwMCUnIH0pLCBhbmltYXRlKCd7eyB0aW1lIH19IHt7IGVhc2luZyB9fScsIHN0eWxlKHsgJ21hcmdpbi10b3AnOiAnMCcgfSkpXSxcbiAge1xuICAgIHBhcmFtczogeyB0aW1lOiAnNTAwbXMnLCBlYXNpbmc6ICdlYXNlJyB9LFxuICB9LFxuKTtcblxuZXhwb3J0IGNvbnN0IGV4cGFuZFggPSBhbmltYXRpb24oXG4gIFtcbiAgICBzdHlsZSh7IHdpZHRoOiAnMCcsIG92ZXJmbG93OiAnaGlkZGVuJywgJ2JveC1zaXppbmcnOiAnYm9yZGVyLWJveCcgfSksXG4gICAgYW5pbWF0ZSgne3sgdGltZSB9fSB7eyBlYXNpbmcgfX0nLCBzdHlsZSh7IHdpZHRoOiAnKicsIHBhZGRpbmc6ICcqJyB9KSksXG4gIF0sXG4gIHsgcGFyYW1zOiB7IHRpbWU6ICczNTBtcycsIGVhc2luZzogJ2Vhc2UnIH0gfSxcbik7XG5cbmV4cG9ydCBjb25zdCBjb2xsYXBzZSA9IHRyaWdnZXIoJ2NvbGxhcHNlJywgW1xuICBzdGF0ZSgnY29sbGFwc2VkJywgc3R5bGUoeyBoZWlnaHQ6ICcwJywgb3ZlcmZsb3c6ICdoaWRkZW4nIH0pKSxcbiAgc3RhdGUoJ2V4cGFuZGVkJywgc3R5bGUoeyBoZWlnaHQ6ICcqJywgb3ZlcmZsb3c6ICdoaWRkZW4nIH0pKSxcbiAgdHJhbnNpdGlvbignZXhwYW5kZWQgPT4gY29sbGFwc2VkJywgdXNlQW5pbWF0aW9uKGNvbGxhcHNlWSkpLFxuICB0cmFuc2l0aW9uKCdjb2xsYXBzZWQgPT4gZXhwYW5kZWQnLCB1c2VBbmltYXRpb24oZXhwYW5kWSkpLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBjb2xsYXBzZVdpdGhNYXJnaW4gPSB0cmlnZ2VyKCdjb2xsYXBzZVdpdGhNYXJnaW4nLCBbXG4gIHN0YXRlKCdjb2xsYXBzZWQnLCBzdHlsZSh7ICdtYXJnaW4tdG9wJzogJy0xMDAlJyB9KSksXG4gIHN0YXRlKCdleHBhbmRlZCcsIHN0eWxlKHsgJ21hcmdpbi10b3AnOiAnMCcgfSkpLFxuICB0cmFuc2l0aW9uKCdleHBhbmRlZCA9PiBjb2xsYXBzZWQnLCB1c2VBbmltYXRpb24oY29sbGFwc2VZV2l0aE1hcmdpbiksIHtcbiAgICBwYXJhbXM6IHsgdGltZTogJzQwMG1zJywgZWFzaW5nOiAnbGluZWFyJyB9LFxuICB9KSxcbiAgdHJhbnNpdGlvbignY29sbGFwc2VkID0+IGV4cGFuZGVkJywgdXNlQW5pbWF0aW9uKGV4cGFuZFlXaXRoTWFyZ2luKSksXG5dKTtcblxuZXhwb3J0IGNvbnN0IGNvbGxhcHNlTGluZWFyV2l0aE1hcmdpbiA9IHRyaWdnZXIoJ2NvbGxhcHNlTGluZWFyV2l0aE1hcmdpbicsIFtcbiAgc3RhdGUoJ2NvbGxhcHNlZCcsIHN0eWxlKHsgJ21hcmdpbi10b3AnOiAnLTEwMCUnIH0pKSxcbiAgc3RhdGUoJ2V4cGFuZGVkJywgc3R5bGUoeyAnbWFyZ2luLXRvcCc6ICcwJyB9KSksXG4gIHRyYW5zaXRpb24oXG4gICAgJ2V4cGFuZGVkID0+IGNvbGxhcHNlZCcsXG4gICAgdXNlQW5pbWF0aW9uKGNvbGxhcHNlWVdpdGhNYXJnaW4sIHsgcGFyYW1zOiB7IHRpbWU6ICcyMDBtcycsIGVhc2luZzogJ2xpbmVhcicgfSB9KSxcbiAgKSxcbiAgdHJhbnNpdGlvbignY29sbGFwc2VkID0+IGV4cGFuZGVkJywgdXNlQW5pbWF0aW9uKGV4cGFuZFlXaXRoTWFyZ2luLCB7IHBhcmFtczogeyB0aW1lOiAnMjUwbXMnLCBlYXNpbmc6ICdsaW5lYXInIH0gfSkpLFxuXSk7XG4iXX0=
