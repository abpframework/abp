!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngxs/store"),require("primeng/table"),require("@angular/forms"),require("rxjs"),require("rxjs/operators"),require("@angular/router"),require("@abp/ng.feature-management"),require("@ngx-validate/core")):"function"==typeof define&&define.amd?define("@abp/ng.tenant-management",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngxs/store","primeng/table","@angular/forms","rxjs","rxjs/operators","@angular/router","@abp/ng.feature-management","@ngx-validate/core"],t):t(((e=e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng["tenant-management"]={}),e.ng_core,e.ng_theme_shared,e.ng.core,e.ngBootstrap,e.store,e.table,e.ng.forms,e.rxjs,e.rxjs.operators,e.ng.router,e.ng_featureManagement,e.core$1)}(this,function(e,t,n,a,o,r,i,s,p,l,c,u,d){"use strict";var g=function(){return(g=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function m(e,t,n,a){var o,r=arguments.length,i=r<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,a);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(i=(r<3?o(i):r>3?o(t,n,i):o(t,n))||i);return r>3&&i&&Object.defineProperty(t,n,i),i}function b(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}var f=function(){function e(e){this.payload=e}return e.type="[TenantManagement] Get Tenant",e}();var h=function(){function e(e){this.payload=e}return e.type="[TenantManagement] Get Tenant By Id",e}();var y=function(){function e(e){this.payload=e}return e.type="[TenantManagement] Create Tenant",e}();var v=function(){function e(e){this.payload=e}return e.type="[TenantManagement] Update Tenant",e}();var T=function(){function e(e){this.payload=e}return e.type="[TenantManagement] Delete Tenant",e}();var M=function(){function e(e){this.rest=e}return e.prototype.getTenant=function(e){void 0===e&&(e={});var t={method:"GET",url:"/api/multi-tenancy/tenants",params:e};return this.rest.request(t)},e.prototype.getTenantById=function(e){var t={method:"GET",url:"/api/multi-tenancy/tenants/"+e};return this.rest.request(t)},e.prototype.deleteTenant=function(e){var t={method:"DELETE",url:"/api/multi-tenancy/tenants/"+e};return this.rest.request(t)},e.prototype.createTenant=function(e){var t={method:"POST",url:"/api/multi-tenancy/tenants",body:e};return this.rest.request(t)},e.prototype.updateTenant=function(e){var t="/api/multi-tenancy/tenants/"+e.id;delete e.id;var n={method:"PUT",url:t,body:e};return this.rest.request(n)},e.prototype.getDefaultConnectionString=function(e){var t={method:"GET",responseType:"text",url:"/api/multi-tenancy/tenants/"+e+"/default-connection-string"};return this.rest.request(t)},e.prototype.updateDefaultConnectionString=function(e){var t={method:"PUT",url:"/api/multi-tenancy/tenants/"+e.id+"/default-connection-string",params:{defaultConnectionString:e.defaultConnectionString}};return this.rest.request(t)},e.prototype.deleteDefaultConnectionString=function(e){var t={method:"DELETE",url:"/api/multi-tenancy/tenants/"+e+"/default-connection-string"};return this.rest.request(t)},e.decorators=[{type:a.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:t.RestService}]},e.ngInjectableDef=a.ɵɵdefineInjectable({factory:function(){return new e(a.ɵɵinject(t.RestService))},token:e,providedIn:"root"}),e}();var S=function(){function e(e){this.tenantManagementService=e}return e.get=function(e){return e.result.items||[]},e.getTenantsTotalCount=function(e){return e.result.totalCount},e.prototype.get=function(e,t){var n=e.patchState,a=t.payload;return this.tenantManagementService.getTenant(a).pipe(l.tap(function(e){return n({result:e})}))},e.prototype.getById=function(e,t){var n=e.patchState,a=t.payload;return this.tenantManagementService.getTenantById(a).pipe(l.tap(function(e){return n({selectedItem:e})}))},e.prototype.delete=function(e,t){var n=e.dispatch,a=t.payload;return this.tenantManagementService.deleteTenant(a).pipe(l.switchMap(function(){return n(new f)}))},e.prototype.add=function(e,t){var n=e.dispatch,a=t.payload;return this.tenantManagementService.createTenant(a).pipe(l.switchMap(function(){return n(new f)}))},e.prototype.update=function(e,t){var n=this,a=e.dispatch,o=e.getState,r=t.payload;return a(new h(r.id)).pipe(l.switchMap(function(){return n.tenantManagementService.updateTenant(g({},o().selectedItem,r))}),l.switchMap(function(){return a(new f)}))},m([r.Action(f),b("design:type",Function),b("design:paramtypes",[Object,f]),b("design:returntype",void 0)],e.prototype,"get",null),m([r.Action(h),b("design:type",Function),b("design:paramtypes",[Object,h]),b("design:returntype",void 0)],e.prototype,"getById",null),m([r.Action(T),b("design:type",Function),b("design:paramtypes",[Object,T]),b("design:returntype",void 0)],e.prototype,"delete",null),m([r.Action(y),b("design:type",Function),b("design:paramtypes",[Object,y]),b("design:returntype",void 0)],e.prototype,"add",null),m([r.Action(v),b("design:type",Function),b("design:paramtypes",[Object,v]),b("design:returntype",void 0)],e.prototype,"update",null),m([r.Selector(),b("design:type",Function),b("design:paramtypes",[Object]),b("design:returntype",Array)],e,"get",null),m([r.Selector(),b("design:type",Function),b("design:paramtypes",[Object]),b("design:returntype",Number)],e,"getTenantsTotalCount",null),e=m([r.State({name:"TenantManagementState",defaults:{result:{},selectedItem:{}}}),b("design:paramtypes",[M])],e)}();var C=function(){function e(e,t,n,a){this.confirmationService=e,this.tenantService=t,this.fb=n,this.store=a,this.selectedModalContent={},this.visibleFeatures=!1,this.pageQuery={sorting:"name"},this.loading=!1,this.modalBusy=!1,this.sortOrder="asc"}return Object.defineProperty(e.prototype,"useSharedDatabase",{get:function(){return this.defaultConnectionStringForm.get("useSharedDatabase").value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"connectionString",{get:function(){return this.defaultConnectionStringForm.get("defaultConnectionString").value},enumerable:!0,configurable:!0}),e.prototype.onSearch=function(e){this.pageQuery.filter=e,this.get()},e.prototype.createTenantForm=function(){this.tenantForm=this.fb.group({name:[this.selected.name||"",[s.Validators.required,s.Validators.maxLength(256)]]})},e.prototype.createDefaultConnectionStringForm=function(){this.defaultConnectionStringForm=this.fb.group({useSharedDatabase:this._useSharedDatabase,defaultConnectionString:[this.defaultConnectionString||""]})},e.prototype.openModal=function(e,t,n){this.selectedModalContent={title:e,template:t,type:n},this.isModalVisible=!0},e.prototype.onEditConnectionString=function(e){var t=this;this.store.dispatch(new h(e)).pipe(l.pluck("TenantManagementState","selectedItem"),l.switchMap(function(n){return t.selected=n,t.tenantService.getDefaultConnectionString(e)})).subscribe(function(e){t._useSharedDatabase=!e,t.defaultConnectionString=e||"",t.createDefaultConnectionStringForm(),t.openModal("AbpTenantManagement::ConnectionStrings",t.connectionStringModalTemplate,"saveConnStr")})},e.prototype.onAddTenant=function(){this.selected={},this.createTenantForm(),this.openModal("AbpTenantManagement::NewTenant",this.tenantModalTemplate,"saveTenant")},e.prototype.onEditTenant=function(e){var t=this;this.store.dispatch(new h(e)).pipe(l.pluck("TenantManagementState","selectedItem")).subscribe(function(e){t.selected=e,t.createTenantForm(),t.openModal("AbpTenantManagement::Edit",t.tenantModalTemplate,"saveTenant")})},e.prototype.save=function(){var e=this.selectedModalContent.type;e&&("saveTenant"===e?this.saveTenant():"saveConnStr"===e&&this.saveConnectionString())},e.prototype.saveConnectionString=function(){var e=this;this.modalBusy=!0,this.useSharedDatabase||!this.useSharedDatabase&&!this.connectionString?this.tenantService.deleteDefaultConnectionString(this.selected.id).pipe(l.take(1),l.finalize(function(){return e.modalBusy=!1})).subscribe(function(){e.isModalVisible=!1}):this.tenantService.updateDefaultConnectionString({id:this.selected.id,defaultConnectionString:this.connectionString}).pipe(l.take(1),l.finalize(function(){return e.modalBusy=!1})).subscribe(function(){e.isModalVisible=!1})},e.prototype.saveTenant=function(){var e=this;this.tenantForm.valid&&(this.modalBusy=!0,this.store.dispatch(this.selected.id?new v(g({},this.tenantForm.value,{id:this.selected.id})):new y(this.tenantForm.value)).pipe(l.finalize(function(){return e.modalBusy=!1})).subscribe(function(){e.isModalVisible=!1}))},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpTenantManagement::TenantDeletionConfirmationMessage","AbpTenantManagement::AreYouSure",{messageLocalizationParams:[t]}).subscribe(function(t){"confirm"===t&&n.store.dispatch(new T(e))})},e.prototype.onPageChange=function(e){this.pageQuery.skipCount=e.first,this.pageQuery.maxResultCount=e.rows,this.get()},e.prototype.get=function(){var e=this;this.loading=!0,this.store.dispatch(new f(this.pageQuery)).pipe(l.finalize(function(){return e.loading=!1})).subscribe()},e.prototype.changeSortOrder=function(){this.sortOrder="asc"===this.sortOrder.toLowerCase()?"desc":"asc"},e.decorators=[{type:a.Component,args:[{selector:"abp-tenants",template:'<div class="row entry-row">\n  <div class="col-auto">\n    <h1 class="content-header-title">{{ \'AbpTenantManagement::Tenants\' | abpLocalization }}</h1>\n  </div>\n  <div class="col">\n    <div class="text-lg-right pt-2" id="AbpContentToolbar">\n      <button\n        [abpPermission]="\'AbpTenantManagement.Tenants.Create\'"\n        id="create-tenants"\n        class="btn btn-primary"\n        type="button"\n        (click)="onAddTenant()"\n      >\n        <i class="fa fa-plus mr-1"></i>\n        <span>{{ \'AbpTenantManagement::NewTenant\' | abpLocalization }}</span>\n      </button>\n    </div>\n  </div>\n</div>\n\n<div id="wrapper" class="card">\n  <div class="card-body">\n    <div id="data-tables-table-filter" class="data-tables-filter">\n      <label\n        ><input\n          type="search"\n          class="form-control form-control-sm"\n          [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\n          (input.debounce)="onSearch($event.target.value)"\n      /></label>\n    </div>\n    <p-table\n      *ngIf="[130, 200] as columnWidths"\n      [value]="data$ | async | abpSort: sortOrder"\n      [lazy]="true"\n      [lazyLoadOnInit]="false"\n      [paginator]="true"\n      [rows]="10"\n      [totalRecords]="totalCount$ | async"\n      [loading]="loading"\n      [resizableColumns]="true"\n      [scrollable]="true"\n      (onLazyLoad)="onPageChange($event)"\n    >\n      <ng-template pTemplate="colgroup">\n        <colgroup>\n          <col *ngFor="let width of columnWidths" [ngStyle]="{ \'width.px\': width }" />\n        </colgroup>\n      </ng-template>\n      <ng-template pTemplate="emptymessage" let-columns>\n        <tr\n          abp-table-empty-message\n          [attr.colspan]="columnWidths.length"\n          localizationResource="AbpTenantManagement"\n          localizationProp="NoDataAvailableInDatatable"\n        ></tr>\n      </ng-template>\n      <ng-template pTemplate="header" let-columns>\n        <tr>\n          <th>{{ \'AbpTenantManagement::Actions\' | abpLocalization }}</th>\n          <th pResizableColumn (click)="changeSortOrder()">\n            {{ \'AbpTenantManagement::TenantName\' | abpLocalization }}\n            <span class="float-right"\n              ><i [ngClass]="[\'fa\', sortOrder === \'desc\' ? \'fa-sort-desc\' : \'fa-sort-asc\']"></i\n            ></span>\n          </th>\n        </tr>\n      </ng-template>\n      <ng-template pTemplate="body" let-data>\n        <tr>\n          <td>\n            <div ngbDropdown container="body" class="d-inline-block">\n              <button\n                class="btn btn-primary btn-sm dropdown-toggle"\n                data-toggle="dropdown"\n                aria-haspopup="true"\n                ngbDropdownToggle\n              >\n                <i class="fa fa-cog mr-1"></i>{{ \'AbpTenantManagement::Actions\' | abpLocalization }}\n              </button>\n              <div ngbDropdownMenu>\n                <button\n                  [abpPermission]="\'AbpTenantManagement.Tenants.Update\'"\n                  ngbDropdownItem\n                  (click)="onEditTenant(data.id)"\n                >\n                  {{ \'AbpTenantManagement::Edit\' | abpLocalization }}\n                </button>\n                <button\n                  [abpPermission]="\'AbpTenantManagement.Tenants.ManageConnectionStrings\'"\n                  ngbDropdownItem\n                  (click)="onEditConnectionString(data.id)"\n                >\n                  {{ \'AbpTenantManagement::Permission:ManageConnectionStrings\' | abpLocalization }}\n                </button>\n                <button\n                  [abpPermission]="\'AbpTenantManagement.Tenants.ManageFeatures\'"\n                  ngbDropdownItem\n                  (click)="providerKey = data.id; visibleFeatures = true"\n                >\n                  {{ \'AbpTenantManagement::Permission:ManageFeatures\' | abpLocalization }}\n                </button>\n                <button\n                  [abpPermission]="\'AbpTenantManagement.Tenants.Delete\'"\n                  ngbDropdownItem\n                  (click)="delete(data.id, data.name)"\n                >\n                  {{ \'AbpTenantManagement::Delete\' | abpLocalization }}\n                </button>\n              </div>\n            </div>\n          </td>\n          <td>{{ data.name }}</td>\n        </tr>\n      </ng-template>\n    </p-table>\n  </div>\n</div>\n\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\n  <ng-template #abpHeader>\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\n  </ng-template>\n\n  <ng-template #abpBody>\n    <ng-container *ngTemplateOutlet="selectedModalContent?.template"></ng-container>\n  </ng-template>\n\n  <ng-template #abpFooter>\n    <button #abpClose type="button" class="btn btn-secondary">\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\n    </button>\n    <abp-button iconClass="fa fa-check" (click)="save()">{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button>\n  </ng-template>\n</abp-modal>\n\n<ng-template #tenantModalTemplate>\n  <form [formGroup]="tenantForm" (ngSubmit)="save()">\n    <div class="mt-2">\n      <div class="form-group">\n        <label for="name">{{ \'AbpTenantManagement::TenantName\' | abpLocalization }}</label>\n        <input type="text" id="name" class="form-control" formControlName="name" autofocus />\n      </div>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template #connectionStringModalTemplate>\n  <form [formGroup]="defaultConnectionStringForm" (ngSubmit)="save()">\n    <label class="mt-2">\n      <div class="form-group">\n        <div class="custom-checkbox custom-control mb-2">\n          <input\n            id="useSharedDatabase"\n            type="checkbox"\n            class="custom-control-input"\n            formControlName="useSharedDatabase"\n            autofocus\n          />\n          <label for="useSharedDatabase" class="custom-control-label">{{\n            \'AbpTenantManagement::DisplayName:UseSharedDatabase\' | abpLocalization\n          }}</label>\n        </div>\n      </div>\n      <label class="form-group" *ngIf="!useSharedDatabase">\n        <label for="defaultConnectionString">{{\n          \'AbpTenantManagement::DisplayName:DefaultConnectionString\' | abpLocalization\n        }}</label>\n        <input\n          type="text"\n          id="defaultConnectionString"\n          class="form-control"\n          formControlName="defaultConnectionString"\n        />\n      </label>\n    </label>\n  </form>\n</ng-template>\n\n<abp-feature-management\n  [(visible)]="visibleFeatures"\n  providerName="Tenant"\n  [providerKey]="providerKey"\n></abp-feature-management>\n'}]}],e.ctorParameters=function(){return[{type:n.ConfirmationService},{type:M},{type:s.FormBuilder},{type:r.Store}]},e.propDecorators={tenantModalTemplate:[{type:a.ViewChild,args:["tenantModalTemplate",{static:!1}]}],connectionStringModalTemplate:[{type:a.ViewChild,args:["connectionStringModalTemplate",{static:!1}]}]},m([r.Select(S.get),b("design:type",p.Observable)],e.prototype,"data$",void 0),m([r.Select(S.getTenantsTotalCount),b("design:type",p.Observable)],e.prototype,"totalCount$",void 0),e}();var A=function(){function e(e){this.store=e}return e.prototype.resolve=function(){var e=this.store.selectSnapshot(S.get);return e&&e.length?null:this.store.dispatch(new f)},e.decorators=[{type:a.Injectable}],e.ctorParameters=function(){return[{type:r.Store}]},e}();var D=[{path:"",redirectTo:"tenants",pathMatch:"full"},{path:"tenants",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard],data:{requiredPolicy:"AbpTenantManagement.Tenants"},children:[{path:"",component:C,resolve:[A]}]}],w=function(){function e(){}return e.decorators=[{type:a.NgModule,args:[{imports:[c.RouterModule.forChild(D)],exports:[c.RouterModule],providers:[A]}]}],e}(),F=function(){function e(){}return e.decorators=[{type:a.NgModule,args:[{declarations:[C],imports:[w,r.NgxsModule.forFeature([S]),d.NgxValidateCoreModule,t.CoreModule,i.TableModule,n.ThemeSharedModule,o.NgbDropdownModule,u.FeatureManagementModule]}]}],e}();var j;!function(e){function t(){}function n(){}function a(){}function o(){}function r(){}e.State=t,e.Item=n,e.AddRequest=a,e.UpdateRequest=o,e.DefaultConnectionStringRequest=r}(j||(j={})),e.CreateTenant=y,e.DeleteTenant=T,e.GetTenantById=h,e.GetTenants=f,e.TENANT_MANAGEMENT_ROUTES={routes:[{name:"AbpTenantManagement::Menu:TenantManagement",path:"tenant-management",parentName:"AbpUiNavigation::Menu:Administration",layout:"application",iconClass:"fa fa-users",children:[{path:"tenants",name:"AbpTenantManagement::Tenants",order:1,requiredPolicy:"AbpTenantManagement.Tenants"}]}]},e.TenantManagementModule=F,e.TenantManagementProviders=function(){return[]},e.TenantManagementService=M,e.TenantManagementState=S,e.TenantsComponent=C,e.TenantsResolver=A,e.UpdateTenant=v,e.ɵa=C,e.ɵb=S,e.ɵc=M,e.ɵd=f,e.ɵe=h,e.ɵf=y,e.ɵg=v,e.ɵh=T,e.ɵj=w,e.ɵk=A,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=abp-ng.tenant-management.umd.min.js.map