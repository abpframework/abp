{"version":3,"file":"abp-ng.tenant-management.js","sources":["ng://@abp/ng.tenant-management/lib/actions/tenant-management.actions.ts","ng://@abp/ng.tenant-management/lib/services/tenant-management.service.ts","ng://@abp/ng.tenant-management/lib/states/tenant-management.state.ts","ng://@abp/ng.tenant-management/lib/components/tenants/tenants.component.ts","ng://@abp/ng.tenant-management/lib/resolvers/tenants.resolver.ts","ng://@abp/ng.tenant-management/lib/tenant-management-routing.module.ts","ng://@abp/ng.tenant-management/lib/tenant-management.module.ts","ng://@abp/ng.tenant-management/lib/constants/routes.ts","ng://@abp/ng.tenant-management/lib/models/tenant-management.ts"],"sourcesContent":["import { TenantManagement } from '../models/tenant-management';\nimport { ABP } from '@abp/ng.core';\n\nexport class GetTenants {\n  static readonly type = '[TenantManagement] Get Tenant';\n  constructor(public payload?: ABP.PageQueryParams) {}\n}\n\nexport class GetTenantById {\n  static readonly type = '[TenantManagement] Get Tenant By Id';\n  constructor(public payload: string) {}\n}\n\nexport class CreateTenant {\n  static readonly type = '[TenantManagement] Create Tenant';\n  constructor(public payload: TenantManagement.AddRequest) {}\n}\n\nexport class UpdateTenant {\n  static readonly type = '[TenantManagement] Update Tenant';\n  constructor(public payload: TenantManagement.UpdateRequest) {}\n}\n\nexport class DeleteTenant {\n  static readonly type = '[TenantManagement] Delete Tenant';\n  constructor(public payload: string) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RestService, Rest, ABP } from '@abp/ng.core';\nimport { TenantManagement } from '../models/tenant-management';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TenantManagementService {\n  constructor(private rest: RestService) {}\n\n  getTenant(params = {} as ABP.PageQueryParams): Observable<TenantManagement.Response> {\n    const request: Rest.Request<null> = {\n      method: 'GET',\n      url: '/api/multi-tenancy/tenants',\n      params,\n    };\n\n    return this.rest.request<null, TenantManagement.Response>(request);\n  }\n\n  getTenantById(id: string): Observable<ABP.BasicItem> {\n    const request: Rest.Request<null> = {\n      method: 'GET',\n      url: `/api/multi-tenancy/tenants/${id}`,\n    };\n\n    return this.rest.request<null, ABP.BasicItem>(request);\n  }\n\n  deleteTenant(id: string): Observable<null> {\n    const request: Rest.Request<null> = {\n      method: 'DELETE',\n      url: `/api/multi-tenancy/tenants/${id}`,\n    };\n\n    return this.rest.request<null, null>(request);\n  }\n\n  createTenant(body: TenantManagement.AddRequest): Observable<ABP.BasicItem> {\n    const request: Rest.Request<TenantManagement.AddRequest> = {\n      method: 'POST',\n      url: `/api/multi-tenancy/tenants`,\n      body,\n    };\n\n    return this.rest.request<TenantManagement.AddRequest, ABP.BasicItem>(request);\n  }\n\n  updateTenant(body: TenantManagement.UpdateRequest): Observable<ABP.BasicItem> {\n    const url = `/api/multi-tenancy/tenants/${body.id}`;\n    delete body.id;\n\n    const request: Rest.Request<TenantManagement.UpdateRequest> = {\n      method: 'PUT',\n      url,\n      body,\n    };\n\n    return this.rest.request<TenantManagement.AddRequest, ABP.BasicItem>(request);\n  }\n\n  getDefaultConnectionString(id: string): Observable<string> {\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\n\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\n      method: 'GET',\n      responseType: Rest.ResponseType.Text,\n      url,\n    };\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, string>(request);\n  }\n\n  updateDefaultConnectionString(payload: TenantManagement.DefaultConnectionStringRequest): Observable<any> {\n    const url = `/api/multi-tenancy/tenants/${payload.id}/default-connection-string`;\n\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\n      method: 'PUT',\n      url,\n      params: { defaultConnectionString: payload.defaultConnectionString },\n    };\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request);\n  }\n\n  deleteDefaultConnectionString(id: string): Observable<string> {\n    const url = `/api/multi-tenancy/tenants/${id}/default-connection-string`;\n\n    const request: Rest.Request<TenantManagement.DefaultConnectionStringRequest> = {\n      method: 'DELETE',\n      url,\n    };\n    return this.rest.request<TenantManagement.DefaultConnectionStringRequest, any>(request);\n  }\n}\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\nimport { switchMap, tap } from 'rxjs/operators';\nimport {\n  CreateTenant,\n  DeleteTenant,\n  GetTenants,\n  GetTenantById,\n  UpdateTenant,\n} from '../actions/tenant-management.actions';\nimport { TenantManagement } from '../models/tenant-management';\nimport { TenantManagementService } from '../services/tenant-management.service';\nimport { ABP } from '@abp/ng.core';\n\n@State<TenantManagement.State>({\n  name: 'TenantManagementState',\n  defaults: { result: {}, selectedItem: {} } as TenantManagement.State,\n})\nexport class TenantManagementState {\n  @Selector()\n  static get({ result }: TenantManagement.State): ABP.BasicItem[] {\n    return result.items || [];\n  }\n\n  @Selector()\n  static getTenantsTotalCount({ result }: TenantManagement.State): number {\n    return result.totalCount;\n  }\n\n  constructor(private tenantManagementService: TenantManagementService) {}\n\n  @Action(GetTenants)\n  get({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenants) {\n    return this.tenantManagementService.getTenant(payload).pipe(\n      tap(result =>\n        patchState({\n          result,\n        }),\n      ),\n    );\n  }\n\n  @Action(GetTenantById)\n  getById({ patchState }: StateContext<TenantManagement.State>, { payload }: GetTenantById) {\n    return this.tenantManagementService.getTenantById(payload).pipe(\n      tap(selectedItem =>\n        patchState({\n          selectedItem,\n        }),\n      ),\n    );\n  }\n\n  @Action(DeleteTenant)\n  delete({ dispatch }: StateContext<TenantManagement.State>, { payload }: DeleteTenant) {\n    return this.tenantManagementService.deleteTenant(payload).pipe(switchMap(() => dispatch(new GetTenants())));\n  }\n\n  @Action(CreateTenant)\n  add({ dispatch }: StateContext<TenantManagement.State>, { payload }: CreateTenant) {\n    return this.tenantManagementService.createTenant(payload).pipe(switchMap(() => dispatch(new GetTenants())));\n  }\n\n  @Action(UpdateTenant)\n  update({ dispatch, getState }: StateContext<TenantManagement.State>, { payload }: UpdateTenant) {\n    return dispatch(new GetTenantById(payload.id)).pipe(\n      switchMap(() => this.tenantManagementService.updateTenant({ ...getState().selectedItem, ...payload })),\n      switchMap(() => dispatch(new GetTenants())),\n    );\n  }\n}\n","import { ABP } from '@abp/ng.core';\nimport { ConfirmationService, Toaster } from '@abp/ng.theme.shared';\nimport { Component, TemplateRef, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime, finalize, pluck, switchMap, take } from 'rxjs/operators';\nimport {\n  CreateTenant,\n  DeleteTenant,\n  GetTenants,\n  GetTenantById,\n  UpdateTenant,\n} from '../../actions/tenant-management.actions';\nimport { TenantManagementService } from '../../services/tenant-management.service';\nimport { TenantManagementState } from '../../states/tenant-management.state';\n\ntype SelectedModalContent = {\n  type: string;\n  title: string;\n  template: TemplateRef<any>;\n};\n\n@Component({\n  selector: 'abp-tenants',\n  templateUrl: './tenants.component.html',\n})\nexport class TenantsComponent {\n  @Select(TenantManagementState.get)\n  data$: Observable<ABP.BasicItem[]>;\n\n  @Select(TenantManagementState.getTenantsTotalCount)\n  totalCount$: Observable<number>;\n\n  selected: ABP.BasicItem;\n\n  tenantForm: FormGroup;\n\n  defaultConnectionStringForm: FormGroup;\n\n  defaultConnectionString: string;\n\n  isModalVisible: boolean;\n\n  selectedModalContent = {} as SelectedModalContent;\n\n  visibleFeatures: boolean = false;\n\n  providerKey: string;\n\n  _useSharedDatabase: boolean;\n\n  pageQuery: ABP.PageQueryParams = {\n    sorting: 'name',\n  };\n\n  loading: boolean = false;\n\n  modalBusy: boolean = false;\n\n  sortOrder: string = 'asc';\n\n  get useSharedDatabase(): boolean {\n    return this.defaultConnectionStringForm.get('useSharedDatabase').value;\n  }\n\n  get connectionString(): string {\n    return this.defaultConnectionStringForm.get('defaultConnectionString').value;\n  }\n\n  @ViewChild('tenantModalTemplate', { static: false })\n  tenantModalTemplate: TemplateRef<any>;\n\n  @ViewChild('connectionStringModalTemplate', { static: false })\n  connectionStringModalTemplate: TemplateRef<any>;\n\n  constructor(\n    private confirmationService: ConfirmationService,\n    private tenantService: TenantManagementService,\n    private fb: FormBuilder,\n    private store: Store,\n  ) {}\n\n  onSearch(value) {\n    this.pageQuery.filter = value;\n    this.get();\n  }\n\n  private createTenantForm() {\n    this.tenantForm = this.fb.group({\n      name: [this.selected.name || '', [Validators.required, Validators.maxLength(256)]],\n    });\n  }\n\n  private createDefaultConnectionStringForm() {\n    this.defaultConnectionStringForm = this.fb.group({\n      useSharedDatabase: this._useSharedDatabase,\n      defaultConnectionString: [this.defaultConnectionString || ''],\n    });\n  }\n\n  openModal(title: string, template: TemplateRef<any>, type: string) {\n    this.selectedModalContent = {\n      title,\n      template,\n      type,\n    };\n\n    this.isModalVisible = true;\n  }\n\n  onEditConnectionString(id: string) {\n    this.store\n      .dispatch(new GetTenantById(id))\n      .pipe(\n        pluck('TenantManagementState', 'selectedItem'),\n        switchMap(selected => {\n          this.selected = selected;\n          return this.tenantService.getDefaultConnectionString(id);\n        }),\n      )\n      .subscribe(fetchedConnectionString => {\n        this._useSharedDatabase = fetchedConnectionString ? false : true;\n        this.defaultConnectionString = fetchedConnectionString ? fetchedConnectionString : '';\n        this.createDefaultConnectionStringForm();\n        this.openModal('AbpTenantManagement::ConnectionStrings', this.connectionStringModalTemplate, 'saveConnStr');\n      });\n  }\n\n  onAddTenant() {\n    this.selected = {} as ABP.BasicItem;\n    this.createTenantForm();\n    this.openModal('AbpTenantManagement::NewTenant', this.tenantModalTemplate, 'saveTenant');\n  }\n\n  onEditTenant(id: string) {\n    this.store\n      .dispatch(new GetTenantById(id))\n      .pipe(pluck('TenantManagementState', 'selectedItem'))\n      .subscribe(selected => {\n        this.selected = selected;\n        this.createTenantForm();\n        this.openModal('AbpTenantManagement::Edit', this.tenantModalTemplate, 'saveTenant');\n      });\n  }\n\n  save() {\n    const { type } = this.selectedModalContent;\n    if (!type) return;\n    if (type === 'saveTenant') this.saveTenant();\n    else if (type === 'saveConnStr') this.saveConnectionString();\n  }\n\n  saveConnectionString() {\n    this.modalBusy = true;\n    if (this.useSharedDatabase || (!this.useSharedDatabase && !this.connectionString)) {\n      this.tenantService\n        .deleteDefaultConnectionString(this.selected.id)\n        .pipe(\n          take(1),\n          finalize(() => (this.modalBusy = false)),\n        )\n        .subscribe(() => {\n          this.isModalVisible = false;\n        });\n    } else {\n      this.tenantService\n        .updateDefaultConnectionString({ id: this.selected.id, defaultConnectionString: this.connectionString })\n        .pipe(\n          take(1),\n          finalize(() => (this.modalBusy = false)),\n        )\n        .subscribe(() => {\n          this.isModalVisible = false;\n        });\n    }\n  }\n\n  saveTenant() {\n    if (!this.tenantForm.valid) return;\n    this.modalBusy = true;\n\n    this.store\n      .dispatch(\n        this.selected.id\n          ? new UpdateTenant({ ...this.tenantForm.value, id: this.selected.id })\n          : new CreateTenant(this.tenantForm.value),\n      )\n      .pipe(finalize(()=> (this.modalBusy = false)))\n      .subscribe(() => {\n        this.isModalVisible = false;\n      });\n  }\n\n  delete(id: string, name: string) {\n    this.confirmationService\n      .warn('AbpTenantManagement::TenantDeletionConfirmationMessage', 'AbpTenantManagement::AreYouSure', {\n        messageLocalizationParams: [name],\n      })\n      .subscribe((status: Toaster.Status) => {\n        if (status === Toaster.Status.confirm) {\n          this.store.dispatch(new DeleteTenant(id));\n        }\n      });\n  }\n\n  onPageChange(data) {\n    this.pageQuery.skipCount = data.first;\n    this.pageQuery.maxResultCount = data.rows;\n\n    this.get();\n  }\n\n  get() {\n    this.loading = true;\n    this.store\n      .dispatch(new GetTenants(this.pageQuery))\n      .pipe(finalize(() => (this.loading = false)))\n      .subscribe();\n  }\n\n  changeSortOrder() {\n    this.sortOrder = this.sortOrder.toLowerCase() === \"asc\" ? \"desc\" : \"asc\";\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { GetTenants } from '../actions/tenant-management.actions';\nimport { TenantManagement } from '../models/tenant-management';\nimport { TenantManagementState } from '../states/tenant-management.state';\n\n@Injectable()\nexport class TenantsResolver implements Resolve<TenantManagement.State> {\n  constructor(private store: Store) {}\n\n  resolve() {\n    const data = this.store.selectSnapshot(TenantManagementState.get);\n    return data && data.length ? null : this.store.dispatch(new GetTenants());\n  }\n}\n","import { AuthGuard, DynamicLayoutComponent, PermissionGuard } from '@abp/ng.core';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TenantsResolver } from './resolvers/tenants.resolver';\nimport { TenantsComponent } from './components/tenants/tenants.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'tenants', pathMatch: 'full' },\n  {\n    path: 'tenants',\n    component: DynamicLayoutComponent,\n    canActivate: [AuthGuard, PermissionGuard],\n    data: { requiredPolicy: 'AbpTenantManagement.Tenants' },\n    children: [{ path: '', component: TenantsComponent, resolve: [TenantsResolver] }],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [TenantsResolver],\n})\nexport class TenantManagementRoutingModule {}\n","import { CoreModule } from '@abp/ng.core';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { NgModule, Provider } from '@angular/core';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxsModule } from '@ngxs/store';\nimport { TableModule } from 'primeng/table';\nimport { TenantsComponent } from './components/tenants/tenants.component';\nimport { TenantManagementState } from './states/tenant-management.state';\nimport { TenantManagementRoutingModule } from './tenant-management-routing.module';\nimport { FeatureManagementModule } from '@abp/ng.feature-management';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\n\n@NgModule({\n  declarations: [TenantsComponent],\n  imports: [\n    TenantManagementRoutingModule,\n    NgxsModule.forFeature([TenantManagementState]),\n    NgxValidateCoreModule,\n    CoreModule,\n    TableModule,\n    ThemeSharedModule,\n    NgbDropdownModule,\n    FeatureManagementModule,\n  ],\n})\nexport class TenantManagementModule {}\n\nexport function TenantManagementProviders(): Provider[] {\n  return [];\n}\n","import { ABP, eLayoutType } from '@abp/ng.core';\n\nexport const TENANT_MANAGEMENT_ROUTES = {\n  routes: [\n    {\n      name: 'AbpTenantManagement::Menu:TenantManagement',\n      path: 'tenant-management',\n      parentName: 'AbpUiNavigation::Menu:Administration',\n      layout: eLayoutType.application,\n      iconClass: 'fa fa-users',\n      children: [\n        {\n          path: 'tenants',\n          name: 'AbpTenantManagement::Tenants',\n          order: 1,\n          requiredPolicy: 'AbpTenantManagement.Tenants',\n        },\n      ],\n    },\n  ] as ABP.FullRoute[],\n};\n","import { ABP } from '@abp/ng.core';\n\nexport namespace TenantManagement {\n  export interface State {\n    result: Response;\n    selectedItem: Item;\n  }\n\n  export type Response = ABP.PagedResponse<Item>;\n\n  export interface Item {\n    id: string;\n    name: string;\n  }\n\n  export interface AddRequest {\n    name: string;\n  }\n\n  export interface UpdateRequest extends AddRequest {\n    id: string;\n  }\n\n  export interface DefaultConnectionStringRequest {\n    id: string;\n    defaultConnectionString: string;\n  }\n}\n"],"names":["tslib_1.__decorate"],"mappings":"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"}