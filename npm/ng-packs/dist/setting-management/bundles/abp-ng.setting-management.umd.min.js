!(function(e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? t(
        exports,
        require('@abp/ng.core'),
        require('@abp/ng.theme.shared'),
        require('@angular/core'),
        require('@angular/router'),
        require('@ngxs/store'),
      )
    : 'function' == typeof define && define.amd
    ? define('@abp/ng.setting-management', [
        'exports',
        '@abp/ng.core',
        '@abp/ng.theme.shared',
        '@angular/core',
        '@angular/router',
        '@ngxs/store',
      ], t)
    : t(
        (((e = e || self).abp = e.abp || {}), (e.abp.ng = e.abp.ng || {}), (e.abp.ng['setting-management'] = {})),
        e.ng_core,
        e.ng_theme_shared,
        e.ng.core,
        e.ng.router,
        e.store,
      );
})(this, function(e, t, n, a, o, r) {
  'use strict';
  /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */ function i(
    e,
    t,
    n,
    a,
  ) {
    var o,
      r = arguments.length,
      i = r < 3 ? t : null === a ? (a = Object.getOwnPropertyDescriptor(t, n)) : a;
    if ('object' == typeof Reflect && 'function' == typeof Reflect.decorate) i = Reflect.decorate(e, t, n, a);
    else for (var s = e.length - 1; s >= 0; s--) (o = e[s]) && (i = (r < 3 ? o(i) : r > 3 ? o(t, n, i) : o(t, n)) || i);
    return r > 3 && i && Object.defineProperty(t, n, i), i;
  }
  function s(e, t) {
    if ('object' == typeof Reflect && 'function' == typeof Reflect.metadata) return Reflect.metadata(e, t);
  }
  var c = (function() {
    function e(e) {
      this.payload = e;
    }
    return (e.type = '[SettingManagement] Set Selected Tab'), e;
  })();
  var l = (function() {
      function e() {}
      return (
        (e.getSelectedTab = function(e) {
          return e.selectedTab;
        }),
        (e.prototype.settingManagementAction = function(e, t) {
          (0, e.patchState)({ selectedTab: t.payload });
        }),
        i(
          [
            r.Action(c),
            s('design:type', Function),
            s('design:paramtypes', [Object, c]),
            s('design:returntype', void 0),
          ],
          e.prototype,
          'settingManagementAction',
          null,
        ),
        i(
          [r.Selector(), s('design:type', Function), s('design:paramtypes', [Object]), s('design:returntype', void 0)],
          e,
          'getSelectedTab',
          null,
        ),
        (e = i([r.State({ name: 'SettingManagementState', defaults: { selectedTab: {} } })], e))
      );
    })(),
    d = (function() {
      function e(e, t) {
        (this.router = e),
          (this.store = t),
          (this.settings = []),
          (this.trackByFn = function(e, t) {
            return t.name;
          });
      }
      return (
        Object.defineProperty(e.prototype, 'selected', {
          get: function() {
            var e = this.store.selectSnapshot(l.getSelectedTab);
            return (e && e.component) || !this.settings.length ? e : this.settings[0];
          },
          set: function(e) {
            this.store.dispatch(new c(e));
          },
          enumerable: !0,
          configurable: !0,
        }),
        (e.prototype.ngOnInit = function() {
          var e = this;
          (this.settings = n
            .getSettingTabs()
            .filter(function(n) {
              return e.store.selectSnapshot(t.ConfigState.getGrantedPolicy(n.requiredPolicy));
            })
            .sort(function(e, t) {
              return e.order - t.order;
            })),
            !this.selected && this.settings.length && (this.selected = this.settings[0]);
        }),
        (e.decorators = [
          {
            type: a.Component,
            args: [
              {
                selector: 'abp-setting-management',
                template:
                  '<div class="row entry-row">\n  <div class="col-auto">\n    <h1 class="content-header-title">{{ \'AbpSettingManagement::Settings\' | abpLocalization }}</h1>\n  </div>\n  <div id="breadcrumb" class="col-md-auto pl-md-0">\n    <abp-breadcrumb></abp-breadcrumb>\n  </div>\n  <div class="col">\n    <div class="text-lg-right pt-2" id="AbpContentToolbar"></div>\n  </div>\n</div>\n\n<div id="SettingManagementWrapper">\n  <div class="card">\n    <div class="card-body">\n      <div class="row">\n        <div class="col-3">\n          <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\n            <li\n              *abpFor="let setting of settings; trackBy: trackByFn"\n              (click)="selected = setting"\n              class="nav-item"\n              [abpPermission]="setting.requiredPolicy"\n            >\n              <a\n                class="nav-link"\n                [id]="setting.name + \'-tab\'"\n                role="tab"\n                [class.active]="setting.name === selected.name"\n                >{{ setting.name | abpLocalization }}</a\n              >\n            </li>\n          </ul>\n        </div>\n        <div class="col-9">\n          <div *ngIf="settings.length" class="tab-content">\n            <div class="tab-pane fade show active" [id]="selected.name + \'-tab\'" role="tabpanel">\n              <ng-container *ngComponentOutlet="selected.component"></ng-container>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n',
              },
            ],
          },
        ]),
        (e.ctorParameters = function() {
          return [{ type: o.Router }, { type: r.Store }];
        }),
        e
      );
    })();
  var u = [{ path: '', component: t.DynamicLayoutComponent, children: [{ path: '', component: d }] }],
    g = (function() {
      function e() {}
      return (
        (e.decorators = [
          { type: a.NgModule, args: [{ imports: [o.RouterModule.forChild(u)], exports: [o.RouterModule] }] },
        ]),
        e
      );
    })(),
    p = (function() {
      function e() {}
      return (
        (e.decorators = [
          {
            type: a.NgModule,
            args: [
              { declarations: [d], imports: [g, t.CoreModule, n.ThemeSharedModule, r.NgxsModule.forFeature([l])] },
            ],
          },
        ]),
        e
      );
    })();
  (e.SettingManagementComponent = d),
    (e.SettingManagementModule = p),
    (e.ɵa = g),
    (e.ɵb = l),
    (e.ɵc = c),
    Object.defineProperty(e, '__esModule', { value: !0 });
});
//# sourceMappingURL=abp-ng.setting-management.umd.min.js.map
