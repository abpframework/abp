{"version":3,"sources":["ng://@abp/ng.setting-management/lib/services/setting-management.service.ts","ng://@abp/ng.setting-management/lib/components/setting-layout.component.ts","ng://@abp/ng.setting-management/lib/constants/routes.ts","ng://@abp/ng.setting-management/lib/setting-management-routing.module.ts","ng://@abp/ng.setting-management/lib/setting-management.module.ts"],"names":["SettingManagementService","actions","router","store","oAuthService","_this","this","settings","selected","destroy$","Subject","setTimeout","setSettings","pipe","ofActionSuccessful","GetAppConfiguration","takeUntil","subscribe","hasValidAccessToken","prototype","ngOnDestroy","next","route","config","find","r","path","data","filter","setting","selectSnapshot","ConfigState","getGrantedPolicy","requiredPolicy","sort","a","b","order","checkSelected","url","name","length","setSelected","dispatch","Navigate","Injectable","args","providedIn","Actions","Router","Store","OAuthService","SettingLayoutComponent","settingManagementService","trackByFn","_","item","type","Component","selector","template","SETTING_MANAGEMENT_ROUTES","routes","parentName","layout","iconClass","Éµ0","component","DynamicLayoutComponent","children","SettingManagementRoutingModule","NgModule","imports","RouterModule","forChild","exports","SETTING_LAYOUT","SettingManagementModule","declarations","CoreModule","ThemeSharedModule","entryComponents"],"mappings":"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","sourcesContent":["import { SettingTab } from '@abp/ng.theme.shared';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Navigate } from '@ngxs/router-plugin';\nimport { Store, Actions, ofActionSuccessful } from '@ngxs/store';\nimport { Subject } from 'rxjs';\nimport { ConfigState, GetAppConfiguration } from '@abp/ng.core';\nimport { OAuthService } from 'angular-oauth2-oidc';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class SettingManagementService {\n  settings: SettingTab[] = [];\n\n  selected = {} as SettingTab;\n\n  private destroy$ = new Subject();\n\n  constructor(\n    private actions: Actions,\n    private router: Router,\n    private store: Store,\n    private oAuthService: OAuthService,\n  ) {\n    setTimeout(() => this.setSettings(), 0);\n\n    this.actions\n      .pipe(ofActionSuccessful(GetAppConfiguration))\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        if (this.oAuthService.hasValidAccessToken()) {\n          this.setSettings();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n  }\n\n  setSettings() {\n    const route = this.router.config.find(r => r.path === 'setting-management');\n    this.settings = (route.data.settings as SettingTab[])\n      .filter(setting => this.store.selectSnapshot(ConfigState.getGrantedPolicy(setting.requiredPolicy)))\n      .sort((a, b) => a.order - b.order);\n    this.checkSelected();\n  }\n\n  checkSelected() {\n    this.selected = this.settings.find(setting => setting.url === this.router.url) || ({} as SettingTab);\n\n    if (!this.selected.name && this.settings.length) {\n      this.setSelected(this.settings[0]);\n    }\n  }\n\n  setSelected(selected: SettingTab) {\n    this.selected = selected;\n    this.store.dispatch(new Navigate([selected.url]));\n  }\n}\n","import { eLayoutType } from '@abp/ng.core';\nimport { SettingTab } from '@abp/ng.theme.shared';\nimport { Component, TrackByFunction } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { timer } from 'rxjs';\nimport { SettingManagementService } from '../services/setting-management.service';\n\n@Component({\n  selector: 'abp-setting-layout',\n  templateUrl: './setting-layout.component.html',\n})\nexport class SettingLayoutComponent {\n  // required for dynamic component\n  static type = eLayoutType.setting;\n\n  trackByFn: TrackByFunction<SettingTab> = (_, item) => item.name;\n\n  constructor(public settingManagementService: SettingManagementService, private router: Router) {\n    if (\n      settingManagementService.selected &&\n      this.router.url !== settingManagementService.selected.url &&\n      settingManagementService.settings.length\n    ) {\n      settingManagementService.setSelected(settingManagementService.settings[0]);\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { ABP, eLayoutType } from '@abp/ng.core';\n\nexport const SETTING_MANAGEMENT_ROUTES = {\n  routes: [\n    {\n      name: 'Settings',\n      path: 'setting-management',\n      parentName: 'AbpUiNavigation::Menu:Administration',\n      layout: eLayoutType.application,\n      order: 6,\n      iconClass: 'fa fa-cog',\n    },\n  ] as ABP.FullRoute[],\n};\n","import { DynamicLayoutComponent } from '@abp/ng.core';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SETTING_MANAGEMENT_ROUTES } from './constants/routes';\nimport { SettingLayoutComponent } from './components/setting-layout.component';\n\nconst routes: Routes = [\n  {\n    path: 'setting-management',\n    component: DynamicLayoutComponent,\n    children: [{ path: '', component: SettingLayoutComponent }],\n    data: { routes: SETTING_MANAGEMENT_ROUTES, settings: [] },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingManagementRoutingModule {}\n","import { CoreModule } from '@abp/ng.core';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { NgModule } from '@angular/core';\nimport { SettingLayoutComponent } from './components/setting-layout.component';\nimport { SettingManagementRoutingModule } from './setting-management-routing.module';\n\nexport const SETTING_LAYOUT = SettingLayoutComponent;\n\n@NgModule({\n  declarations: [SETTING_LAYOUT],\n  imports: [SettingManagementRoutingModule, CoreModule, ThemeSharedModule],\n  entryComponents: [SETTING_LAYOUT],\n})\nexport class SettingManagementModule {}\n"]}