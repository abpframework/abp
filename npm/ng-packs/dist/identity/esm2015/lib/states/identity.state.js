/**
 * @fileoverview added by tsickle
 * Generated from: lib/states/identity.state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from 'tslib';
import { Action, Selector, State } from '@ngxs/store';
import { switchMap, tap, pluck } from 'rxjs/operators';
import {
  CreateRole,
  CreateUser,
  DeleteRole,
  DeleteUser,
  GetRoleById,
  GetRoles,
  GetUserById,
  GetUsers,
  UpdateRole,
  UpdateUser,
  GetUserRoles,
} from '../actions/identity.actions';
import { IdentityService } from '../services/identity.service';
let IdentityState = class IdentityState {
  /**
   * @param {?} identityService
   */
  constructor(identityService) {
    this.identityService = identityService;
  }
  /**
   * @param {?} __0
   * @return {?}
   */
  static getRoles({ roles }) {
    return roles.items || [];
  }
  /**
   * @param {?} __0
   * @return {?}
   */
  static getRolesTotalCount({ roles }) {
    return roles.totalCount || 0;
  }
  /**
   * @param {?} __0
   * @return {?}
   */
  static getUsers({ users }) {
    return users.items || [];
  }
  /**
   * @param {?} __0
   * @return {?}
   */
  static getUsersTotalCount({ users }) {
    return users.totalCount || 0;
  }
  /**
   * @param {?} __0
   * @param {?} __1
   * @return {?}
   */
  getRoles({ patchState }, { payload }) {
    return this.identityService.getRoles(payload).pipe(
      tap(
        /**
         * @param {?} roles
         * @return {?}
         */
        roles =>
          patchState({
            roles,
          }),
      ),
    );
  }
  /**
   * @param {?} __0
   * @param {?} __1
   * @return {?}
   */
  getRole({ patchState }, { payload }) {
    return this.identityService.getRoleById(payload).pipe(
      tap(
        /**
         * @param {?} selectedRole
         * @return {?}
         */
        selectedRole =>
          patchState({
            selectedRole,
          }),
      ),
    );
  }
  /**
   * @param {?} __0
   * @param {?} __1
   * @return {?}
   */
  deleteRole({ dispatch }, { payload }) {
    return this.identityService.deleteRole(payload).pipe(
      switchMap(
        /**
         * @return {?}
         */
        () => dispatch(new GetRoles()),
      ),
    );
  }
  /**
   * @param {?} __0
   * @param {?} __1
   * @return {?}
   */
  addRole({ dispatch }, { payload }) {
    return this.identityService.createRole(payload).pipe(
      switchMap(
        /**
         * @return {?}
         */
        () => dispatch(new GetRoles()))));
    }
    /**
     * @param {?} __0
     * @param {?} __1
     * @return {?}
     */
    updateRole({ getState, dispatch }, { payload }) {
        return this.identityService
            .updateRole(Object.assign({}, getState().selectedRole, payload))
            .pipe(switchMap((/**
      ),
    );
  }
  /**
   * @param {?} __0
   * @param {?} __1
   * @return {?}
   */
  getUser({ patchState }, { payload }) {
    return this.identityService.getUserById(payload).pipe(
      tap(
        /**
         * @param {?} selectedUser
         * @return {?}
         */
        selectedUser =>
          patchState({
            selectedUser,
          }),
      ),
    );
  }
  /**
   * @param {?} __0
   * @param {?} __1
   * @return {?}
   */
  deleteUser({ dispatch }, { payload }) {
    return this.identityService.deleteUser(payload).pipe(
      switchMap(
        /**
         * @return {?}
         */
        () => dispatch(new GetUsers()),
      ),
    );
  }
  /**
   * @param {?} __0
   * @param {?} __1
   * @return {?}
   */
  addUser({ dispatch }, { payload }) {
    return this.identityService.createUser(payload).pipe(
      switchMap(
        /**
         * @return {?}
         */
        () => dispatch(new GetUsers()))));
    }
    /**
     * @param {?} __0
     * @param {?} __1
     * @return {?}
     */
    updateUser({ getState, dispatch }, { payload }) {
        return this.identityService
            .updateUser(Object.assign({}, getState().selectedUser, payload))
            .pipe(switchMap((/**
         * @return {?}
         */
        () => dispatch(new GetUsers()),
      ),
    );
  }
  /**
   * @param {?} __0
   * @param {?} __1
   * @return {?}
   */
        () => dispatch(new GetUsers()))));
    }
    /**
     * @param {?} __0
     * @param {?} __1
     * @return {?}
     */
    updateUser({ getState, dispatch }, { payload }) {
        return this.identityService
            .updateUser(Object.assign({}, getState().selectedUser, payload))
            .pipe(switchMap((/**
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'getRole',
  null,
);
tslib_1.__decorate(
  [
    Action(DeleteRole),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object, GetRoleById]),
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'deleteRole',
  null,
);
tslib_1.__decorate(
  [
    Action(CreateRole),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object, CreateRole]),
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'addRole',
  null,
);
tslib_1.__decorate(
  [
    Action(UpdateRole),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object, UpdateRole]),
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'updateRole',
  null,
);
tslib_1.__decorate(
  [
    Action(GetUsers),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object, GetUsers]),
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'getUsers',
  null,
);
tslib_1.__decorate(
  [
    Action(GetUserById),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object, GetUserById]),
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'getUser',
  null,
);
tslib_1.__decorate(
  [
    Action(DeleteUser),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object, GetUserById]),
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'deleteUser',
  null,
);
tslib_1.__decorate(
  [
    Action(CreateUser),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object, CreateUser]),
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'addUser',
  null,
);
tslib_1.__decorate(
  [
    Action(UpdateUser),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object, UpdateUser]),
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'updateUser',
  null,
);
tslib_1.__decorate(
  [
    Action(GetUserRoles),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object, GetUserRoles]),
    tslib_1.__metadata('design:returntype', void 0),
  ],
  IdentityState.prototype,
  'getUserRoles',
  null,
);
tslib_1.__decorate(
  [
    Selector(),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object]),
    tslib_1.__metadata('design:returntype', Array),
  ],
  IdentityState,
  'getRoles',
  null,
);
tslib_1.__decorate(
  [
    Selector(),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object]),
    tslib_1.__metadata('design:returntype', Number),
  ],
  IdentityState,
  'getRolesTotalCount',
  null,
);
tslib_1.__decorate(
  [
    Selector(),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object]),
    tslib_1.__metadata('design:returntype', Array),
  ],
  IdentityState,
  'getUsers',
  null,
);
tslib_1.__decorate(
  [
    Selector(),
    tslib_1.__metadata('design:type', Function),
    tslib_1.__metadata('design:paramtypes', [Object]),
    tslib_1.__metadata('design:returntype', Number),
  ],
  IdentityState,
  'getUsersTotalCount',
  null,
);
IdentityState = tslib_1.__decorate(
  [
    State({
      name: 'IdentityState',
      defaults: /** @type {?} */ ({ roles: {}, selectedRole: {}, users: {}, selectedUser: {} }),
    }),
    tslib_1.__metadata('design:paramtypes', [IdentityService]),
  ],
  IdentityState,
);
export { IdentityState };
if (false) {
  /**
   * @type {?}
   * @private
   */
  IdentityState.prototype.identityService;
}
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=data:application/json;base64,
