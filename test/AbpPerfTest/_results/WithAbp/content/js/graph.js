/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1628.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 3.0], [7.5, 3.0], [7.6, 3.0], [7.7, 3.0], [7.8, 3.0], [7.9, 3.0], [8.0, 4.0], [8.1, 4.0], [8.2, 4.0], [8.3, 4.0], [8.4, 4.0], [8.5, 4.0], [8.6, 4.0], [8.7, 5.0], [8.8, 5.0], [8.9, 5.0], [9.0, 5.0], [9.1, 5.0], [9.2, 5.0], [9.3, 5.0], [9.4, 5.0], [9.5, 5.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 7.0], [11.6, 7.0], [11.7, 7.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 9.0], [13.0, 9.0], [13.1, 9.0], [13.2, 9.0], [13.3, 9.0], [13.4, 9.0], [13.5, 9.0], [13.6, 9.0], [13.7, 10.0], [13.8, 10.0], [13.9, 10.0], [14.0, 10.0], [14.1, 10.0], [14.2, 10.0], [14.3, 10.0], [14.4, 10.0], [14.5, 10.0], [14.6, 11.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 11.0], [15.1, 11.0], [15.2, 11.0], [15.3, 11.0], [15.4, 11.0], [15.5, 11.0], [15.6, 11.0], [15.7, 12.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 13.0], [17.6, 13.0], [17.7, 13.0], [17.8, 13.0], [17.9, 13.0], [18.0, 13.0], [18.1, 13.0], [18.2, 13.0], [18.3, 13.0], [18.4, 13.0], [18.5, 13.0], [18.6, 13.0], [18.7, 13.0], [18.8, 13.0], [18.9, 13.0], [19.0, 13.0], [19.1, 13.0], [19.2, 13.0], [19.3, 13.0], [19.4, 13.0], [19.5, 13.0], [19.6, 13.0], [19.7, 14.0], [19.8, 14.0], [19.9, 14.0], [20.0, 14.0], [20.1, 14.0], [20.2, 14.0], [20.3, 14.0], [20.4, 14.0], [20.5, 14.0], [20.6, 14.0], [20.7, 14.0], [20.8, 14.0], [20.9, 14.0], [21.0, 14.0], [21.1, 14.0], [21.2, 14.0], [21.3, 14.0], [21.4, 14.0], [21.5, 14.0], [21.6, 14.0], [21.7, 14.0], [21.8, 14.0], [21.9, 14.0], [22.0, 14.0], [22.1, 14.0], [22.2, 14.0], [22.3, 14.0], [22.4, 14.0], [22.5, 15.0], [22.6, 15.0], [22.7, 15.0], [22.8, 15.0], [22.9, 15.0], [23.0, 15.0], [23.1, 15.0], [23.2, 15.0], [23.3, 15.0], [23.4, 15.0], [23.5, 15.0], [23.6, 15.0], [23.7, 15.0], [23.8, 15.0], [23.9, 15.0], [24.0, 15.0], [24.1, 15.0], [24.2, 15.0], [24.3, 15.0], [24.4, 15.0], [24.5, 15.0], [24.6, 15.0], [24.7, 15.0], [24.8, 15.0], [24.9, 15.0], [25.0, 15.0], [25.1, 15.0], [25.2, 15.0], [25.3, 15.0], [25.4, 15.0], [25.5, 15.0], [25.6, 15.0], [25.7, 15.0], [25.8, 16.0], [25.9, 16.0], [26.0, 16.0], [26.1, 16.0], [26.2, 16.0], [26.3, 16.0], [26.4, 16.0], [26.5, 16.0], [26.6, 16.0], [26.7, 16.0], [26.8, 16.0], [26.9, 16.0], [27.0, 16.0], [27.1, 16.0], [27.2, 16.0], [27.3, 16.0], [27.4, 16.0], [27.5, 16.0], [27.6, 16.0], [27.7, 16.0], [27.8, 16.0], [27.9, 16.0], [28.0, 16.0], [28.1, 16.0], [28.2, 16.0], [28.3, 16.0], [28.4, 16.0], [28.5, 16.0], [28.6, 16.0], [28.7, 16.0], [28.8, 16.0], [28.9, 17.0], [29.0, 17.0], [29.1, 17.0], [29.2, 17.0], [29.3, 17.0], [29.4, 17.0], [29.5, 17.0], [29.6, 17.0], [29.7, 17.0], [29.8, 17.0], [29.9, 17.0], [30.0, 17.0], [30.1, 17.0], [30.2, 17.0], [30.3, 17.0], [30.4, 17.0], [30.5, 17.0], [30.6, 17.0], [30.7, 17.0], [30.8, 17.0], [30.9, 17.0], [31.0, 17.0], [31.1, 17.0], [31.2, 17.0], [31.3, 17.0], [31.4, 17.0], [31.5, 17.0], [31.6, 17.0], [31.7, 18.0], [31.8, 18.0], [31.9, 18.0], [32.0, 18.0], [32.1, 18.0], [32.2, 18.0], [32.3, 18.0], [32.4, 18.0], [32.5, 18.0], [32.6, 18.0], [32.7, 18.0], [32.8, 18.0], [32.9, 18.0], [33.0, 18.0], [33.1, 18.0], [33.2, 18.0], [33.3, 18.0], [33.4, 18.0], [33.5, 18.0], [33.6, 18.0], [33.7, 18.0], [33.8, 19.0], [33.9, 19.0], [34.0, 19.0], [34.1, 19.0], [34.2, 19.0], [34.3, 19.0], [34.4, 19.0], [34.5, 19.0], [34.6, 19.0], [34.7, 19.0], [34.8, 19.0], [34.9, 19.0], [35.0, 19.0], [35.1, 19.0], [35.2, 19.0], [35.3, 19.0], [35.4, 19.0], [35.5, 19.0], [35.6, 20.0], [35.7, 20.0], [35.8, 20.0], [35.9, 20.0], [36.0, 20.0], [36.1, 20.0], [36.2, 20.0], [36.3, 20.0], [36.4, 20.0], [36.5, 20.0], [36.6, 20.0], [36.7, 20.0], [36.8, 20.0], [36.9, 20.0], [37.0, 20.0], [37.1, 21.0], [37.2, 21.0], [37.3, 21.0], [37.4, 21.0], [37.5, 21.0], [37.6, 21.0], [37.7, 21.0], [37.8, 21.0], [37.9, 21.0], [38.0, 21.0], [38.1, 21.0], [38.2, 21.0], [38.3, 21.0], [38.4, 22.0], [38.5, 22.0], [38.6, 22.0], [38.7, 22.0], [38.8, 22.0], [38.9, 22.0], [39.0, 22.0], [39.1, 22.0], [39.2, 22.0], [39.3, 22.0], [39.4, 23.0], [39.5, 23.0], [39.6, 23.0], [39.7, 23.0], [39.8, 23.0], [39.9, 23.0], [40.0, 23.0], [40.1, 23.0], [40.2, 23.0], [40.3, 23.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 24.0], [41.1, 24.0], [41.2, 24.0], [41.3, 25.0], [41.4, 25.0], [41.5, 25.0], [41.6, 25.0], [41.7, 25.0], [41.8, 25.0], [41.9, 25.0], [42.0, 25.0], [42.1, 26.0], [42.2, 26.0], [42.3, 26.0], [42.4, 26.0], [42.5, 26.0], [42.6, 26.0], [42.7, 26.0], [42.8, 27.0], [42.9, 27.0], [43.0, 27.0], [43.1, 27.0], [43.2, 27.0], [43.3, 27.0], [43.4, 27.0], [43.5, 28.0], [43.6, 28.0], [43.7, 28.0], [43.8, 28.0], [43.9, 28.0], [44.0, 28.0], [44.1, 28.0], [44.2, 29.0], [44.3, 29.0], [44.4, 29.0], [44.5, 29.0], [44.6, 29.0], [44.7, 29.0], [44.8, 30.0], [44.9, 30.0], [45.0, 30.0], [45.1, 30.0], [45.2, 30.0], [45.3, 30.0], [45.4, 31.0], [45.5, 31.0], [45.6, 31.0], [45.7, 31.0], [45.8, 31.0], [45.9, 32.0], [46.0, 32.0], [46.1, 32.0], [46.2, 32.0], [46.3, 32.0], [46.4, 33.0], [46.5, 33.0], [46.6, 33.0], [46.7, 33.0], [46.8, 33.0], [46.9, 33.0], [47.0, 34.0], [47.1, 34.0], [47.2, 34.0], [47.3, 34.0], [47.4, 34.0], [47.5, 34.0], [47.6, 35.0], [47.7, 35.0], [47.8, 35.0], [47.9, 35.0], [48.0, 35.0], [48.1, 35.0], [48.2, 36.0], [48.3, 36.0], [48.4, 36.0], [48.5, 36.0], [48.6, 36.0], [48.7, 37.0], [48.8, 37.0], [48.9, 37.0], [49.0, 37.0], [49.1, 37.0], [49.2, 37.0], [49.3, 37.0], [49.4, 38.0], [49.5, 38.0], [49.6, 38.0], [49.7, 38.0], [49.8, 38.0], [49.9, 38.0], [50.0, 39.0], [50.1, 39.0], [50.2, 39.0], [50.3, 39.0], [50.4, 39.0], [50.5, 39.0], [50.6, 39.0], [50.7, 40.0], [50.8, 40.0], [50.9, 40.0], [51.0, 40.0], [51.1, 40.0], [51.2, 40.0], [51.3, 41.0], [51.4, 41.0], [51.5, 41.0], [51.6, 41.0], [51.7, 42.0], [51.8, 42.0], [51.9, 42.0], [52.0, 42.0], [52.1, 43.0], [52.2, 43.0], [52.3, 43.0], [52.4, 43.0], [52.5, 43.0], [52.6, 43.0], [52.7, 44.0], [52.8, 44.0], [52.9, 44.0], [53.0, 44.0], [53.1, 44.0], [53.2, 45.0], [53.3, 45.0], [53.4, 45.0], [53.5, 45.0], [53.6, 46.0], [53.7, 46.0], [53.8, 46.0], [53.9, 46.0], [54.0, 47.0], [54.1, 47.0], [54.2, 47.0], [54.3, 48.0], [54.4, 48.0], [54.5, 49.0], [54.6, 49.0], [54.7, 49.0], [54.8, 50.0], [54.9, 50.0], [55.0, 50.0], [55.1, 51.0], [55.2, 51.0], [55.3, 51.0], [55.4, 52.0], [55.5, 52.0], [55.6, 52.0], [55.7, 52.0], [55.8, 53.0], [55.9, 53.0], [56.0, 53.0], [56.1, 53.0], [56.2, 54.0], [56.3, 54.0], [56.4, 54.0], [56.5, 55.0], [56.6, 55.0], [56.7, 55.0], [56.8, 56.0], [56.9, 56.0], [57.0, 56.0], [57.1, 57.0], [57.2, 57.0], [57.3, 57.0], [57.4, 57.0], [57.5, 58.0], [57.6, 58.0], [57.7, 58.0], [57.8, 58.0], [57.9, 59.0], [58.0, 59.0], [58.1, 59.0], [58.2, 59.0], [58.3, 60.0], [58.4, 60.0], [58.5, 60.0], [58.6, 60.0], [58.7, 60.0], [58.8, 61.0], [58.9, 61.0], [59.0, 61.0], [59.1, 61.0], [59.2, 61.0], [59.3, 61.0], [59.4, 62.0], [59.5, 62.0], [59.6, 62.0], [59.7, 62.0], [59.8, 62.0], [59.9, 62.0], [60.0, 62.0], [60.1, 63.0], [60.2, 63.0], [60.3, 63.0], [60.4, 63.0], [60.5, 63.0], [60.6, 63.0], [60.7, 63.0], [60.8, 63.0], [60.9, 64.0], [61.0, 64.0], [61.1, 64.0], [61.2, 64.0], [61.3, 64.0], [61.4, 64.0], [61.5, 64.0], [61.6, 64.0], [61.7, 65.0], [61.8, 65.0], [61.9, 65.0], [62.0, 65.0], [62.1, 65.0], [62.2, 65.0], [62.3, 66.0], [62.4, 66.0], [62.5, 66.0], [62.6, 66.0], [62.7, 66.0], [62.8, 66.0], [62.9, 66.0], [63.0, 67.0], [63.1, 67.0], [63.2, 67.0], [63.3, 67.0], [63.4, 67.0], [63.5, 67.0], [63.6, 68.0], [63.7, 68.0], [63.8, 68.0], [63.9, 68.0], [64.0, 68.0], [64.1, 68.0], [64.2, 68.0], [64.3, 68.0], [64.4, 69.0], [64.5, 69.0], [64.6, 69.0], [64.7, 69.0], [64.8, 69.0], [64.9, 69.0], [65.0, 69.0], [65.1, 69.0], [65.2, 70.0], [65.3, 70.0], [65.4, 70.0], [65.5, 70.0], [65.6, 70.0], [65.7, 70.0], [65.8, 70.0], [65.9, 70.0], [66.0, 70.0], [66.1, 71.0], [66.2, 71.0], [66.3, 71.0], [66.4, 71.0], [66.5, 71.0], [66.6, 71.0], [66.7, 71.0], [66.8, 71.0], [66.9, 72.0], [67.0, 72.0], [67.1, 72.0], [67.2, 72.0], [67.3, 72.0], [67.4, 72.0], [67.5, 72.0], [67.6, 72.0], [67.7, 73.0], [67.8, 73.0], [67.9, 73.0], [68.0, 73.0], [68.1, 73.0], [68.2, 73.0], [68.3, 73.0], [68.4, 73.0], [68.5, 74.0], [68.6, 74.0], [68.7, 74.0], [68.8, 74.0], [68.9, 74.0], [69.0, 74.0], [69.1, 74.0], [69.2, 74.0], [69.3, 75.0], [69.4, 75.0], [69.5, 75.0], [69.6, 75.0], [69.7, 75.0], [69.8, 75.0], [69.9, 75.0], [70.0, 75.0], [70.1, 76.0], [70.2, 76.0], [70.3, 76.0], [70.4, 76.0], [70.5, 76.0], [70.6, 76.0], [70.7, 76.0], [70.8, 76.0], [70.9, 76.0], [71.0, 76.0], [71.1, 77.0], [71.2, 77.0], [71.3, 77.0], [71.4, 77.0], [71.5, 77.0], [71.6, 77.0], [71.7, 77.0], [71.8, 77.0], [71.9, 77.0], [72.0, 78.0], [72.1, 78.0], [72.2, 78.0], [72.3, 78.0], [72.4, 78.0], [72.5, 78.0], [72.6, 78.0], [72.7, 78.0], [72.8, 78.0], [72.9, 78.0], [73.0, 79.0], [73.1, 79.0], [73.2, 79.0], [73.3, 79.0], [73.4, 79.0], [73.5, 79.0], [73.6, 79.0], [73.7, 79.0], [73.8, 79.0], [73.9, 79.0], [74.0, 80.0], [74.1, 80.0], [74.2, 80.0], [74.3, 80.0], [74.4, 80.0], [74.5, 80.0], [74.6, 80.0], [74.7, 80.0], [74.8, 80.0], [74.9, 80.0], [75.0, 80.0], [75.1, 81.0], [75.2, 81.0], [75.3, 81.0], [75.4, 81.0], [75.5, 81.0], [75.6, 81.0], [75.7, 81.0], [75.8, 81.0], [75.9, 81.0], [76.0, 82.0], [76.1, 82.0], [76.2, 82.0], [76.3, 82.0], [76.4, 82.0], [76.5, 82.0], [76.6, 82.0], [76.7, 82.0], [76.8, 83.0], [76.9, 83.0], [77.0, 83.0], [77.1, 83.0], [77.2, 83.0], [77.3, 83.0], [77.4, 83.0], [77.5, 83.0], [77.6, 84.0], [77.7, 84.0], [77.8, 84.0], [77.9, 84.0], [78.0, 84.0], [78.1, 84.0], [78.2, 84.0], [78.3, 84.0], [78.4, 84.0], [78.5, 85.0], [78.6, 85.0], [78.7, 85.0], [78.8, 85.0], [78.9, 85.0], [79.0, 85.0], [79.1, 86.0], [79.2, 86.0], [79.3, 86.0], [79.4, 86.0], [79.5, 86.0], [79.6, 86.0], [79.7, 86.0], [79.8, 86.0], [79.9, 87.0], [80.0, 87.0], [80.1, 87.0], [80.2, 87.0], [80.3, 87.0], [80.4, 87.0], [80.5, 87.0], [80.6, 88.0], [80.7, 88.0], [80.8, 88.0], [80.9, 88.0], [81.0, 88.0], [81.1, 88.0], [81.2, 89.0], [81.3, 89.0], [81.4, 89.0], [81.5, 89.0], [81.6, 89.0], [81.7, 89.0], [81.8, 89.0], [81.9, 90.0], [82.0, 90.0], [82.1, 90.0], [82.2, 90.0], [82.3, 90.0], [82.4, 90.0], [82.5, 91.0], [82.6, 91.0], [82.7, 91.0], [82.8, 91.0], [82.9, 91.0], [83.0, 92.0], [83.1, 92.0], [83.2, 92.0], [83.3, 92.0], [83.4, 92.0], [83.5, 92.0], [83.6, 93.0], [83.7, 93.0], [83.8, 93.0], [83.9, 93.0], [84.0, 93.0], [84.1, 94.0], [84.2, 94.0], [84.3, 94.0], [84.4, 94.0], [84.5, 94.0], [84.6, 94.0], [84.7, 95.0], [84.8, 95.0], [84.9, 95.0], [85.0, 95.0], [85.1, 95.0], [85.2, 95.0], [85.3, 96.0], [85.4, 96.0], [85.5, 96.0], [85.6, 96.0], [85.7, 96.0], [85.8, 96.0], [85.9, 97.0], [86.0, 97.0], [86.1, 97.0], [86.2, 97.0], [86.3, 97.0], [86.4, 98.0], [86.5, 98.0], [86.6, 98.0], [86.7, 98.0], [86.8, 98.0], [86.9, 98.0], [87.0, 99.0], [87.1, 99.0], [87.2, 99.0], [87.3, 99.0], [87.4, 99.0], [87.5, 100.0], [87.6, 100.0], [87.7, 100.0], [87.8, 100.0], [87.9, 101.0], [88.0, 101.0], [88.1, 101.0], [88.2, 101.0], [88.3, 101.0], [88.4, 102.0], [88.5, 102.0], [88.6, 102.0], [88.7, 102.0], [88.8, 103.0], [88.9, 103.0], [89.0, 103.0], [89.1, 103.0], [89.2, 103.0], [89.3, 104.0], [89.4, 104.0], [89.5, 104.0], [89.6, 104.0], [89.7, 105.0], [89.8, 105.0], [89.9, 105.0], [90.0, 105.0], [90.1, 105.0], [90.2, 106.0], [90.3, 106.0], [90.4, 106.0], [90.5, 106.0], [90.6, 107.0], [90.7, 107.0], [90.8, 107.0], [90.9, 108.0], [91.0, 108.0], [91.1, 108.0], [91.2, 108.0], [91.3, 109.0], [91.4, 109.0], [91.5, 109.0], [91.6, 110.0], [91.7, 110.0], [91.8, 110.0], [91.9, 110.0], [92.0, 111.0], [92.1, 111.0], [92.2, 111.0], [92.3, 112.0], [92.4, 112.0], [92.5, 112.0], [92.6, 113.0], [92.7, 113.0], [92.8, 113.0], [92.9, 114.0], [93.0, 114.0], [93.1, 114.0], [93.2, 115.0], [93.3, 115.0], [93.4, 115.0], [93.5, 115.0], [93.6, 116.0], [93.7, 116.0], [93.8, 116.0], [93.9, 117.0], [94.0, 117.0], [94.1, 117.0], [94.2, 118.0], [94.3, 118.0], [94.4, 118.0], [94.5, 118.0], [94.6, 119.0], [94.7, 119.0], [94.8, 119.0], [94.9, 120.0], [95.0, 120.0], [95.1, 121.0], [95.2, 121.0], [95.3, 121.0], [95.4, 122.0], [95.5, 122.0], [95.6, 123.0], [95.7, 123.0], [95.8, 123.0], [95.9, 124.0], [96.0, 124.0], [96.1, 125.0], [96.2, 125.0], [96.3, 126.0], [96.4, 126.0], [96.5, 127.0], [96.6, 128.0], [96.7, 128.0], [96.8, 129.0], [96.9, 130.0], [97.0, 130.0], [97.1, 131.0], [97.2, 132.0], [97.3, 132.0], [97.4, 133.0], [97.5, 134.0], [97.6, 135.0], [97.7, 136.0], [97.8, 137.0], [97.9, 138.0], [98.0, 139.0], [98.1, 140.0], [98.2, 141.0], [98.3, 142.0], [98.4, 143.0], [98.5, 145.0], [98.6, 147.0], [98.7, 150.0], [98.8, 153.0], [98.9, 156.0], [99.0, 159.0], [99.1, 162.0], [99.2, 167.0], [99.3, 175.0], [99.4, 185.0], [99.5, 192.0], [99.6, 210.0], [99.7, 237.0], [99.8, 312.0], [99.9, 1087.0]], "isOverall": false, "label": "Create a book", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 3.0], [9.5, 3.0], [9.6, 3.0], [9.7, 3.0], [9.8, 3.0], [9.9, 3.0], [10.0, 3.0], [10.1, 3.0], [10.2, 3.0], [10.3, 3.0], [10.4, 3.0], [10.5, 3.0], [10.6, 3.0], [10.7, 3.0], [10.8, 3.0], [10.9, 4.0], [11.0, 4.0], [11.1, 4.0], [11.2, 4.0], [11.3, 4.0], [11.4, 4.0], [11.5, 4.0], [11.6, 4.0], [11.7, 4.0], [11.8, 4.0], [11.9, 4.0], [12.0, 4.0], [12.1, 4.0], [12.2, 4.0], [12.3, 4.0], [12.4, 4.0], [12.5, 4.0], [12.6, 4.0], [12.7, 4.0], [12.8, 4.0], [12.9, 5.0], [13.0, 5.0], [13.1, 5.0], [13.2, 5.0], [13.3, 5.0], [13.4, 5.0], [13.5, 5.0], [13.6, 5.0], [13.7, 5.0], [13.8, 5.0], [13.9, 5.0], [14.0, 5.0], [14.1, 5.0], [14.2, 5.0], [14.3, 5.0], [14.4, 5.0], [14.5, 5.0], [14.6, 5.0], [14.7, 5.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 6.0], [16.9, 6.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 8.0], [23.4, 8.0], [23.5, 8.0], [23.6, 8.0], [23.7, 8.0], [23.8, 8.0], [23.9, 8.0], [24.0, 8.0], [24.1, 8.0], [24.2, 8.0], [24.3, 8.0], [24.4, 8.0], [24.5, 8.0], [24.6, 8.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 9.0], [27.1, 9.0], [27.2, 9.0], [27.3, 9.0], [27.4, 9.0], [27.5, 9.0], [27.6, 9.0], [27.7, 9.0], [27.8, 9.0], [27.9, 9.0], [28.0, 9.0], [28.1, 9.0], [28.2, 9.0], [28.3, 9.0], [28.4, 9.0], [28.5, 9.0], [28.6, 9.0], [28.7, 9.0], [28.8, 10.0], [28.9, 10.0], [29.0, 10.0], [29.1, 10.0], [29.2, 10.0], [29.3, 10.0], [29.4, 10.0], [29.5, 10.0], [29.6, 10.0], [29.7, 10.0], [29.8, 10.0], [29.9, 10.0], [30.0, 10.0], [30.1, 10.0], [30.2, 10.0], [30.3, 10.0], [30.4, 10.0], [30.5, 10.0], [30.6, 10.0], [30.7, 10.0], [30.8, 10.0], [30.9, 10.0], [31.0, 10.0], [31.1, 10.0], [31.2, 10.0], [31.3, 10.0], [31.4, 10.0], [31.5, 10.0], [31.6, 10.0], [31.7, 10.0], [31.8, 10.0], [31.9, 10.0], [32.0, 10.0], [32.1, 10.0], [32.2, 10.0], [32.3, 11.0], [32.4, 11.0], [32.5, 11.0], [32.6, 11.0], [32.7, 11.0], [32.8, 11.0], [32.9, 11.0], [33.0, 11.0], [33.1, 11.0], [33.2, 11.0], [33.3, 11.0], [33.4, 11.0], [33.5, 11.0], [33.6, 11.0], [33.7, 11.0], [33.8, 11.0], [33.9, 11.0], [34.0, 11.0], [34.1, 11.0], [34.2, 11.0], [34.3, 11.0], [34.4, 11.0], [34.5, 11.0], [34.6, 11.0], [34.7, 11.0], [34.8, 11.0], [34.9, 11.0], [35.0, 11.0], [35.1, 11.0], [35.2, 11.0], [35.3, 11.0], [35.4, 11.0], [35.5, 11.0], [35.6, 12.0], [35.7, 12.0], [35.8, 12.0], [35.9, 12.0], [36.0, 12.0], [36.1, 12.0], [36.2, 12.0], [36.3, 12.0], [36.4, 12.0], [36.5, 12.0], [36.6, 12.0], [36.7, 12.0], [36.8, 12.0], [36.9, 12.0], [37.0, 12.0], [37.1, 12.0], [37.2, 12.0], [37.3, 12.0], [37.4, 12.0], [37.5, 12.0], [37.6, 12.0], [37.7, 13.0], [37.8, 13.0], [37.9, 13.0], [38.0, 13.0], [38.1, 13.0], [38.2, 13.0], [38.3, 13.0], [38.4, 13.0], [38.5, 13.0], [38.6, 13.0], [38.7, 13.0], [38.8, 13.0], [38.9, 13.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 15.0], [40.3, 15.0], [40.4, 15.0], [40.5, 15.0], [40.6, 15.0], [40.7, 15.0], [40.8, 15.0], [40.9, 15.0], [41.0, 15.0], [41.1, 16.0], [41.2, 16.0], [41.3, 16.0], [41.4, 16.0], [41.5, 16.0], [41.6, 16.0], [41.7, 16.0], [41.8, 17.0], [41.9, 17.0], [42.0, 17.0], [42.1, 17.0], [42.2, 17.0], [42.3, 17.0], [42.4, 17.0], [42.5, 18.0], [42.6, 18.0], [42.7, 18.0], [42.8, 18.0], [42.9, 18.0], [43.0, 18.0], [43.1, 19.0], [43.2, 19.0], [43.3, 19.0], [43.4, 19.0], [43.5, 19.0], [43.6, 19.0], [43.7, 19.0], [43.8, 20.0], [43.9, 20.0], [44.0, 20.0], [44.1, 20.0], [44.2, 20.0], [44.3, 20.0], [44.4, 21.0], [44.5, 21.0], [44.6, 21.0], [44.7, 21.0], [44.8, 21.0], [44.9, 21.0], [45.0, 22.0], [45.1, 22.0], [45.2, 22.0], [45.3, 22.0], [45.4, 23.0], [45.5, 23.0], [45.6, 23.0], [45.7, 23.0], [45.8, 24.0], [45.9, 24.0], [46.0, 24.0], [46.1, 24.0], [46.2, 24.0], [46.3, 24.0], [46.4, 25.0], [46.5, 25.0], [46.6, 25.0], [46.7, 25.0], [46.8, 25.0], [46.9, 25.0], [47.0, 26.0], [47.1, 26.0], [47.2, 26.0], [47.3, 26.0], [47.4, 27.0], [47.5, 27.0], [47.6, 27.0], [47.7, 27.0], [47.8, 27.0], [47.9, 28.0], [48.0, 28.0], [48.1, 28.0], [48.2, 28.0], [48.3, 28.0], [48.4, 29.0], [48.5, 29.0], [48.6, 29.0], [48.7, 29.0], [48.8, 29.0], [48.9, 30.0], [49.0, 30.0], [49.1, 30.0], [49.2, 30.0], [49.3, 30.0], [49.4, 31.0], [49.5, 31.0], [49.6, 31.0], [49.7, 31.0], [49.8, 31.0], [49.9, 31.0], [50.0, 32.0], [50.1, 32.0], [50.2, 32.0], [50.3, 32.0], [50.4, 33.0], [50.5, 33.0], [50.6, 33.0], [50.7, 33.0], [50.8, 33.0], [50.9, 33.0], [51.0, 34.0], [51.1, 34.0], [51.2, 34.0], [51.3, 34.0], [51.4, 34.0], [51.5, 35.0], [51.6, 35.0], [51.7, 35.0], [51.8, 35.0], [51.9, 35.0], [52.0, 35.0], [52.1, 36.0], [52.2, 36.0], [52.3, 36.0], [52.4, 36.0], [52.5, 36.0], [52.6, 37.0], [52.7, 37.0], [52.8, 37.0], [52.9, 37.0], [53.0, 38.0], [53.1, 38.0], [53.2, 38.0], [53.3, 38.0], [53.4, 39.0], [53.5, 39.0], [53.6, 39.0], [53.7, 39.0], [53.8, 39.0], [53.9, 40.0], [54.0, 40.0], [54.1, 40.0], [54.2, 40.0], [54.3, 41.0], [54.4, 41.0], [54.5, 41.0], [54.6, 41.0], [54.7, 42.0], [54.8, 42.0], [54.9, 42.0], [55.0, 43.0], [55.1, 43.0], [55.2, 44.0], [55.3, 44.0], [55.4, 44.0], [55.5, 45.0], [55.6, 45.0], [55.7, 46.0], [55.8, 46.0], [55.9, 46.0], [56.0, 47.0], [56.1, 47.0], [56.2, 47.0], [56.3, 48.0], [56.4, 48.0], [56.5, 48.0], [56.6, 48.0], [56.7, 49.0], [56.8, 49.0], [56.9, 49.0], [57.0, 49.0], [57.1, 50.0], [57.2, 50.0], [57.3, 50.0], [57.4, 50.0], [57.5, 51.0], [57.6, 51.0], [57.7, 51.0], [57.8, 51.0], [57.9, 52.0], [58.0, 52.0], [58.1, 52.0], [58.2, 53.0], [58.3, 53.0], [58.4, 53.0], [58.5, 53.0], [58.6, 53.0], [58.7, 54.0], [58.8, 54.0], [58.9, 54.0], [59.0, 54.0], [59.1, 54.0], [59.2, 55.0], [59.3, 55.0], [59.4, 55.0], [59.5, 55.0], [59.6, 55.0], [59.7, 55.0], [59.8, 56.0], [59.9, 56.0], [60.0, 56.0], [60.1, 56.0], [60.2, 56.0], [60.3, 56.0], [60.4, 56.0], [60.5, 57.0], [60.6, 57.0], [60.7, 57.0], [60.8, 57.0], [60.9, 57.0], [61.0, 57.0], [61.1, 57.0], [61.2, 57.0], [61.3, 58.0], [61.4, 58.0], [61.5, 58.0], [61.6, 58.0], [61.7, 58.0], [61.8, 58.0], [61.9, 58.0], [62.0, 58.0], [62.1, 58.0], [62.2, 59.0], [62.3, 59.0], [62.4, 59.0], [62.5, 59.0], [62.6, 59.0], [62.7, 59.0], [62.8, 59.0], [62.9, 59.0], [63.0, 59.0], [63.1, 59.0], [63.2, 60.0], [63.3, 60.0], [63.4, 60.0], [63.5, 60.0], [63.6, 60.0], [63.7, 60.0], [63.8, 61.0], [63.9, 61.0], [64.0, 61.0], [64.1, 61.0], [64.2, 61.0], [64.3, 61.0], [64.4, 61.0], [64.5, 61.0], [64.6, 62.0], [64.7, 62.0], [64.8, 62.0], [64.9, 62.0], [65.0, 62.0], [65.1, 62.0], [65.2, 62.0], [65.3, 62.0], [65.4, 63.0], [65.5, 63.0], [65.6, 63.0], [65.7, 63.0], [65.8, 63.0], [65.9, 63.0], [66.0, 63.0], [66.1, 63.0], [66.2, 63.0], [66.3, 63.0], [66.4, 64.0], [66.5, 64.0], [66.6, 64.0], [66.7, 64.0], [66.8, 64.0], [66.9, 64.0], [67.0, 64.0], [67.1, 64.0], [67.2, 64.0], [67.3, 64.0], [67.4, 65.0], [67.5, 65.0], [67.6, 65.0], [67.7, 65.0], [67.8, 65.0], [67.9, 65.0], [68.0, 65.0], [68.1, 65.0], [68.2, 65.0], [68.3, 65.0], [68.4, 65.0], [68.5, 66.0], [68.6, 66.0], [68.7, 66.0], [68.8, 66.0], [68.9, 66.0], [69.0, 66.0], [69.1, 66.0], [69.2, 66.0], [69.3, 66.0], [69.4, 66.0], [69.5, 67.0], [69.6, 67.0], [69.7, 67.0], [69.8, 67.0], [69.9, 67.0], [70.0, 67.0], [70.1, 67.0], [70.2, 67.0], [70.3, 67.0], [70.4, 67.0], [70.5, 68.0], [70.6, 68.0], [70.7, 68.0], [70.8, 68.0], [70.9, 68.0], [71.0, 68.0], [71.1, 68.0], [71.2, 68.0], [71.3, 68.0], [71.4, 68.0], [71.5, 69.0], [71.6, 69.0], [71.7, 69.0], [71.8, 69.0], [71.9, 69.0], [72.0, 69.0], [72.1, 69.0], [72.2, 69.0], [72.3, 69.0], [72.4, 70.0], [72.5, 70.0], [72.6, 70.0], [72.7, 70.0], [72.8, 70.0], [72.9, 70.0], [73.0, 70.0], [73.1, 70.0], [73.2, 71.0], [73.3, 71.0], [73.4, 71.0], [73.5, 71.0], [73.6, 71.0], [73.7, 71.0], [73.8, 71.0], [73.9, 71.0], [74.0, 71.0], [74.1, 71.0], [74.2, 72.0], [74.3, 72.0], [74.4, 72.0], [74.5, 72.0], [74.6, 72.0], [74.7, 72.0], [74.8, 72.0], [74.9, 72.0], [75.0, 72.0], [75.1, 72.0], [75.2, 72.0], [75.3, 73.0], [75.4, 73.0], [75.5, 73.0], [75.6, 73.0], [75.7, 73.0], [75.8, 73.0], [75.9, 73.0], [76.0, 73.0], [76.1, 73.0], [76.2, 73.0], [76.3, 73.0], [76.4, 73.0], [76.5, 74.0], [76.6, 74.0], [76.7, 74.0], [76.8, 74.0], [76.9, 74.0], [77.0, 74.0], [77.1, 74.0], [77.2, 74.0], [77.3, 74.0], [77.4, 74.0], [77.5, 75.0], [77.6, 75.0], [77.7, 75.0], [77.8, 75.0], [77.9, 75.0], [78.0, 75.0], [78.1, 75.0], [78.2, 75.0], [78.3, 75.0], [78.4, 75.0], [78.5, 76.0], [78.6, 76.0], [78.7, 76.0], [78.8, 76.0], [78.9, 76.0], [79.0, 76.0], [79.1, 76.0], [79.2, 76.0], [79.3, 77.0], [79.4, 77.0], [79.5, 77.0], [79.6, 77.0], [79.7, 77.0], [79.8, 77.0], [79.9, 77.0], [80.0, 78.0], [80.1, 78.0], [80.2, 78.0], [80.3, 78.0], [80.4, 78.0], [80.5, 78.0], [80.6, 78.0], [80.7, 79.0], [80.8, 79.0], [80.9, 79.0], [81.0, 79.0], [81.1, 79.0], [81.2, 79.0], [81.3, 79.0], [81.4, 80.0], [81.5, 80.0], [81.6, 80.0], [81.7, 80.0], [81.8, 80.0], [81.9, 80.0], [82.0, 81.0], [82.1, 81.0], [82.2, 81.0], [82.3, 81.0], [82.4, 81.0], [82.5, 81.0], [82.6, 81.0], [82.7, 82.0], [82.8, 82.0], [82.9, 82.0], [83.0, 82.0], [83.1, 82.0], [83.2, 83.0], [83.3, 83.0], [83.4, 83.0], [83.5, 83.0], [83.6, 83.0], [83.7, 83.0], [83.8, 84.0], [83.9, 84.0], [84.0, 84.0], [84.1, 84.0], [84.2, 84.0], [84.3, 84.0], [84.4, 85.0], [84.5, 85.0], [84.6, 85.0], [84.7, 85.0], [84.8, 85.0], [84.9, 85.0], [85.0, 86.0], [85.1, 86.0], [85.2, 86.0], [85.3, 86.0], [85.4, 86.0], [85.5, 86.0], [85.6, 86.0], [85.7, 87.0], [85.8, 87.0], [85.9, 87.0], [86.0, 87.0], [86.1, 87.0], [86.2, 87.0], [86.3, 88.0], [86.4, 88.0], [86.5, 88.0], [86.6, 88.0], [86.7, 88.0], [86.8, 88.0], [86.9, 89.0], [87.0, 89.0], [87.1, 89.0], [87.2, 89.0], [87.3, 89.0], [87.4, 89.0], [87.5, 90.0], [87.6, 90.0], [87.7, 90.0], [87.8, 90.0], [87.9, 90.0], [88.0, 91.0], [88.1, 91.0], [88.2, 91.0], [88.3, 91.0], [88.4, 92.0], [88.5, 92.0], [88.6, 92.0], [88.7, 92.0], [88.8, 92.0], [88.9, 93.0], [89.0, 93.0], [89.1, 93.0], [89.2, 93.0], [89.3, 93.0], [89.4, 93.0], [89.5, 94.0], [89.6, 94.0], [89.7, 94.0], [89.8, 94.0], [89.9, 95.0], [90.0, 95.0], [90.1, 95.0], [90.2, 95.0], [90.3, 96.0], [90.4, 96.0], [90.5, 96.0], [90.6, 96.0], [90.7, 97.0], [90.8, 97.0], [90.9, 97.0], [91.0, 97.0], [91.1, 98.0], [91.2, 98.0], [91.3, 98.0], [91.4, 98.0], [91.5, 98.0], [91.6, 99.0], [91.7, 99.0], [91.8, 99.0], [91.9, 99.0], [92.0, 100.0], [92.1, 100.0], [92.2, 100.0], [92.3, 101.0], [92.4, 101.0], [92.5, 101.0], [92.6, 102.0], [92.7, 102.0], [92.8, 102.0], [92.9, 102.0], [93.0, 103.0], [93.1, 103.0], [93.2, 103.0], [93.3, 103.0], [93.4, 104.0], [93.5, 104.0], [93.6, 104.0], [93.7, 105.0], [93.8, 105.0], [93.9, 106.0], [94.0, 106.0], [94.1, 106.0], [94.2, 107.0], [94.3, 107.0], [94.4, 107.0], [94.5, 107.0], [94.6, 108.0], [94.7, 108.0], [94.8, 108.0], [94.9, 109.0], [95.0, 109.0], [95.1, 109.0], [95.2, 110.0], [95.3, 110.0], [95.4, 110.0], [95.5, 111.0], [95.6, 111.0], [95.7, 111.0], [95.8, 112.0], [95.9, 112.0], [96.0, 112.0], [96.1, 113.0], [96.2, 113.0], [96.3, 113.0], [96.4, 114.0], [96.5, 114.0], [96.6, 115.0], [96.7, 115.0], [96.8, 116.0], [96.9, 116.0], [97.0, 117.0], [97.1, 118.0], [97.2, 118.0], [97.3, 119.0], [97.4, 120.0], [97.5, 120.0], [97.6, 121.0], [97.7, 122.0], [97.8, 122.0], [97.9, 123.0], [98.0, 124.0], [98.1, 125.0], [98.2, 126.0], [98.3, 128.0], [98.4, 129.0], [98.5, 130.0], [98.6, 131.0], [98.7, 132.0], [98.8, 133.0], [98.9, 135.0], [99.0, 141.0], [99.1, 143.0], [99.2, 147.0], [99.3, 150.0], [99.4, 161.0], [99.5, 174.0], [99.6, 181.0], [99.7, 189.0], [99.8, 215.0], [99.9, 251.0]], "isOverall": false, "label": "Get book by id", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 73528.0, "series": [{"data": [[0.0, 69955.0], [600.0, 10.0], [700.0, 12.0], [200.0, 192.0], [800.0, 6.0], [900.0, 10.0], [1000.0, 10.0], [1100.0, 10.0], [1200.0, 10.0], [300.0, 28.0], [1300.0, 10.0], [1400.0, 13.0], [1500.0, 7.0], [100.0, 9680.0], [1600.0, 28.0], [400.0, 9.0], [500.0, 10.0]], "isOverall": false, "label": "Create a book", "isController": false}, {"data": [[0.0, 73528.0], [300.0, 17.0], [100.0, 6271.0], [200.0, 184.0]], "isOverall": false, "label": "Get book by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 159864.0, "series": [{"data": [[0.0, 159864.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 101.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 35.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 92.40212157504989, "minX": 1.7039943E12, "maxY": 514.7948558616876, "series": [{"data": [[1.7039943E12, 514.7948558616876], [1.70399436E12, 92.40212157504989]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70399436E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.576923076923077, "minX": 1.0, "maxY": 863.3467336683418, "series": [{"data": [[2.0, 1.0], [3.0, 1.0], [4.0, 1.0625], [5.0, 1.0], [6.0, 1.1333333333333335], [7.0, 1.1666666666666672], [8.0, 1.1853146853146865], [9.0, 1.3451676528599632], [10.0, 1.310967741935484], [11.0, 1.4459459459459456], [12.0, 1.45], [13.0, 1.5833333333333328], [14.0, 1.5925925925925928], [15.0, 1.5227272727272725], [16.0, 1.5578947368421052], [17.0, 1.7777777777777777], [18.0, 2.166666666666666], [19.0, 1.9594594594594594], [20.0, 3.104477611940299], [21.0, 2.23469387755102], [22.0, 2.4000000000000004], [23.0, 2.424657534246576], [24.0, 2.888888888888889], [25.0, 2.9242424242424234], [26.0, 2.9354838709677415], [27.0, 3.3199999999999994], [28.0, 3.948453608247421], [29.0, 3.7777777777777777], [30.0, 4.246753246753247], [31.0, 4.095238095238097], [33.0, 4.5148514851485135], [32.0, 4.47142857142857], [35.0, 4.829268292682926], [34.0, 4.572916666666665], [37.0, 4.880434782608693], [36.0, 4.7], [39.0, 4.5], [38.0, 5.12962962962963], [41.0, 4.666666666666666], [40.0, 5.1499999999999995], [43.0, 4.921052631578948], [42.0, 5.27358490566038], [45.0, 5.456140350877192], [44.0, 5.305555555555555], [47.0, 6.391304347826086], [46.0, 6.538461538461539], [49.0, 6.603053435114505], [48.0, 5.681818181818183], [51.0, 6.666666666666665], [50.0, 7.07177033492823], [53.0, 6.624338624338622], [52.0, 6.299999999999999], [55.0, 7.425000000000001], [54.0, 6.775641025641025], [57.0, 7.360759493670885], [56.0, 7.37037037037037], [59.0, 6.93939393939394], [58.0, 7.400000000000001], [61.0, 7.4653465346534675], [60.0, 7.448275862068964], [63.0, 8.157894736842103], [62.0, 7.982142857142857], [67.0, 9.20529801324503], [66.0, 14.483050847457633], [65.0, 7.5200000000000005], [64.0, 7.857142857142857], [71.0, 8.559523809523807], [70.0, 8.204545454545455], [69.0, 10.333333333333334], [68.0, 8.411764705882355], [75.0, 9.76623376623377], [74.0, 10.406779661016948], [73.0, 9.214285714285715], [72.0, 8.672727272727274], [79.0, 9.374999999999998], [77.0, 9.233009708737866], [78.0, 9.700000000000001], [76.0, 10.194444444444446], [83.0, 10.196078431372543], [82.0, 9.0], [81.0, 8.57894736842105], [80.0, 9.439024390243903], [87.0, 9.793103448275861], [86.0, 10.943396226415093], [85.0, 9.971428571428568], [84.0, 11.171428571428573], [91.0, 10.454545454545455], [90.0, 10.0495867768595], [89.0, 9.500000000000002], [88.0, 9.942857142857143], [95.0, 10.5], [94.0, 10.095238095238095], [93.0, 9.81578947368421], [92.0, 15.551724137931036], [99.0, 10.210144927536227], [98.0, 10.818181818181818], [97.0, 10.108108108108114], [96.0, 9.583333333333336], [103.0, 9.0], [101.0, 11.517857142857146], [102.0, 11.692307692307693], [100.0, 11.35074626865672], [107.0, 11.692307692307693], [106.0, 11.41758241758242], [105.0, 11.697674418604652], [104.0, 11.600000000000001], [111.0, 11.379310344827585], [110.0, 11.040404040404034], [109.0, 10.714285714285715], [108.0, 10.368421052631579], [115.0, 11.5], [114.0, 12.68888888888889], [113.0, 12.87323943661972], [112.0, 13.088888888888889], [119.0, 15.030303030303028], [118.0, 13.73913043478261], [117.0, 12.512195121951217], [116.0, 11.271428571428574], [123.0, 12.581818181818186], [122.0, 12.6875], [121.0, 11.578947368421055], [120.0, 13.527777777777779], [127.0, 13.287671232876715], [125.0, 13.478260869565215], [124.0, 14.538461538461538], [135.0, 15.287499999999998], [134.0, 14.728571428571428], [133.0, 14.797979797979801], [132.0, 15.71538461538461], [131.0, 14.703703703703706], [130.0, 14.425531914893616], [129.0, 13.93939393939394], [128.0, 14.0], [143.0, 15.019607843137253], [142.0, 16.679999999999996], [141.0, 15.580645161290324], [140.0, 15.521739130434785], [139.0, 16.2], [138.0, 15.0], [137.0, 14.8], [136.0, 16.10810810810811], [151.0, 18.38095238095238], [150.0, 16.78571428571429], [149.0, 15.621621621621621], [148.0, 14.0], [147.0, 15.346938775510202], [146.0, 15.233644859813078], [144.0, 15.219512195121952], [145.0, 15.197183098591546], [159.0, 16.102941176470583], [157.0, 16.363247863247864], [158.0, 16.813793103448273], [156.0, 15.974358974358974], [155.0, 15.999999999999993], [154.0, 17.20833333333334], [153.0, 16.784313725490197], [152.0, 17.714285714285715], [167.0, 16.678571428571434], [165.0, 16.400000000000002], [164.0, 16.305555555555554], [163.0, 16.0], [162.0, 15.620689655172411], [161.0, 15.37735849056604], [160.0, 15.369565217391306], [175.0, 16.357142857142858], [174.0, 16.88888888888889], [173.0, 18.0], [172.0, 18.39999999999999], [171.0, 17.65], [170.0, 16.941176470588236], [169.0, 18.770186335403736], [168.0, 16.727272727272734], [183.0, 18.649635036496356], [182.0, 18.376344086021504], [181.0, 18.61016949152542], [180.0, 18.124999999999993], [179.0, 18.821428571428573], [177.0, 19.656249999999996], [176.0, 18.767857142857146], [186.0, 863.3467336683418], [191.0, 15.285714285714286], [189.0, 17.76335877862596], [187.0, 18.771428571428576], [190.0, 17.608695652173918], [188.0, 18.39520958083832], [185.0, 20.53333333333333], [184.0, 21.552631578947366], [197.0, 20.26666666666667], [198.0, 19.750000000000004], [192.0, 9.0], [195.0, 19.874999999999996], [193.0, 18.916666666666668], [199.0, 20.071428571428573], [196.0, 20.63636363636364], [194.0, 19.300000000000004], [201.0, 19.921568627450974], [200.0, 18.736842105263147], [202.0, 18.914634146341463], [207.0, 21.061855670103093], [206.0, 24.380952380952387], [205.0, 22.943396226415096], [204.0, 21.333333333333332], [203.0, 20.410256410256412], [213.0, 20.94505494505495], [214.0, 19.40816326530612], [215.0, 21.250000000000007], [211.0, 20.384615384615383], [212.0, 20.5], [210.0, 19.35], [209.0, 19.781249999999996], [208.0, 19.282051282051277], [216.0, 20.132352941176467], [217.0, 21.57435897435895], [218.0, 22.25688073394495], [219.0, 23.493975903614466], [220.0, 19.312499999999996], [221.0, 22.30769230769231], [222.0, 21.44], [223.0, 20.0], [224.0, 23.176470588235297], [225.0, 21.754098360655732], [226.0, 22.227642276422756], [227.0, 20.791946308724835], [228.0, 21.88725490196078], [229.0, 22.217391304347828], [230.0, 22.134020618556704], [231.0, 22.674418604651155], [232.0, 18.235294117647054], [233.0, 17.85000000000001], [234.0, 23.5108695652174], [235.0, 21.355769230769226], [236.0, 25.15384615384615], [237.0, 30.095238095238102], [238.0, 58.804878048780495], [239.0, 61.22727272727274], [240.0, 52.56666666666668], [241.0, 61.54545454545455], [242.0, 45.02941176470588], [243.0, 31.036585365853664], [244.0, 40.19], [245.0, 49.39805825242718], [246.0, 33.475903614457835], [247.0, 27.083333333333346], [248.0, 37.237288135593204], [249.0, 38.555555555555564], [250.0, 41.47058823529412], [251.0, 24.11627906976745], [252.0, 40.78095238095238], [253.0, 24.755555555555553], [254.0, 35.13333333333332], [255.0, 52.48051948051949], [257.0, 39.264705882352935], [256.0, 68.34374999999999], [258.0, 34.71111111111112], [259.0, 44.26315789473683], [260.0, 37.98550724637679], [261.0, 44.817073170731724], [262.0, 28.747311827956977], [263.0, 36.61111111111113], [264.0, 37.22222222222222], [270.0, 35.41111111111109], [271.0, 37.234375], [268.0, 29.2], [269.0, 49.842857142857135], [265.0, 52.61363636363636], [266.0, 39.32608695652175], [267.0, 34.04210526315789], [273.0, 31.128571428571433], [272.0, 34.01123595505616], [274.0, 56.96296296296297], [275.0, 62.28571428571427], [276.0, 33.666666666666664], [277.0, 62.1875], [278.0, 36.42222222222223], [279.0, 27.36931818181818], [280.0, 32.411111111111104], [286.0, 28.562500000000004], [287.0, 27.18888888888889], [284.0, 29.207407407407405], [285.0, 27.983783783783768], [281.0, 40.72000000000003], [282.0, 40.591836734693864], [283.0, 38.472000000000016], [289.0, 39.85964912280702], [288.0, 26.987012987012996], [290.0, 42.388888888888886], [291.0, 70.74626865671641], [292.0, 33.47692307692307], [293.0, 47.23076923076925], [294.0, 85.19999999999999], [295.0, 35.85714285714287], [296.0, 57.21621621621622], [303.0, 41.15596330275228], [301.0, 47.227272727272734], [302.0, 37.25000000000001], [297.0, 39.90909090909091], [298.0, 30.05084745762712], [299.0, 30.745454545454542], [305.0, 47.07142857142856], [304.0, 64.81481481481484], [306.0, 38.14925373134329], [307.0, 36.39622641509433], [308.0, 45.743589743589745], [309.0, 88.89041095890414], [310.0, 130.0689655172414], [311.0, 106.73076923076921], [312.0, 64.24444444444447], [318.0, 50.45454545454543], [319.0, 37.78125], [316.0, 31.335766423357665], [317.0, 37.14068441064637], [313.0, 38.33333333333332], [314.0, 67.61538461538463], [315.0, 62.03508771929826], [321.0, 43.669724770642226], [320.0, 77.16666666666666], [322.0, 38.77868852459017], [323.0, 35.93793103448272], [324.0, 41.642335766423365], [325.0, 45.09195402298852], [326.0, 38.91735537190084], [327.0, 50.23255813953489], [328.0, 71.57692307692307], [334.0, 38.922374429223765], [335.0, 41.39473684210526], [332.0, 40.82432432432434], [333.0, 35.52036199095024], [329.0, 68.23684210526314], [330.0, 43.673076923076934], [331.0, 49.902777777777786], [337.0, 64.27272727272728], [336.0, 62.2972972972973], [338.0, 39.2469135802469], [339.0, 40.67549668874172], [340.0, 54.173076923076934], [341.0, 41.22807017543859], [342.0, 38.2549019607843], [343.0, 58.38636363636364], [344.0, 71.9375], [350.0, 62.054054054054056], [351.0, 67.8235294117647], [348.0, 54.490196078431374], [349.0, 74.70967741935483], [345.0, 63.291666666666664], [346.0, 72.07692307692305], [347.0, 75.33333333333333], [353.0, 68.8076923076923], [352.0, 68.11111111111113], [354.0, 59.48275862068965], [355.0, 44.46086956521737], [356.0, 41.87313432835819], [357.0, 52.25806451612903], [358.0, 56.65714285714286], [359.0, 45.78378378378379], [360.0, 49.55483870967742], [366.0, 56.80701754385965], [367.0, 47.0], [364.0, 57.17021276595746], [365.0, 48.969696969696976], [361.0, 50.89830508474577], [362.0, 50.741935483870975], [363.0, 77.41379310344827], [369.0, 66.21052631578948], [368.0, 52.21929824561404], [370.0, 45.67073170731707], [371.0, 35.896153846153815], [372.0, 50.75000000000001], [373.0, 65.33333333333333], [374.0, 51.01587301587302], [375.0, 50.92929292929295], [376.0, 47.35087719298245], [382.0, 69.39393939393939], [383.0, 54.199999999999996], [380.0, 58.759259259259245], [381.0, 46.204724409448815], [377.0, 42.96391752577319], [378.0, 39.868794326241165], [379.0, 39.8340425531915], [385.0, 41.985815602836865], [384.0, 42.05714285714286], [386.0, 43.60150375939848], [387.0, 38.80225988700565], [388.0, 45.343750000000014], [389.0, 45.67088607594935], [390.0, 42.720000000000006], [391.0, 41.26845637583893], [392.0, 50.42307692307691], [398.0, 56.15217391304346], [399.0, 71.61538461538458], [396.0, 41.09090909090909], [397.0, 54.55555555555553], [393.0, 42.8015873015873], [394.0, 40.95876288659793], [395.0, 45.698412698412696], [401.0, 50.76190476190475], [400.0, 47.53913043478263], [402.0, 63.12500000000001], [403.0, 74.6666666666667], [404.0, 47.00943396226416], [405.0, 50.14444444444444], [406.0, 61.17307692307692], [407.0, 51.888888888888886], [408.0, 51.623931623931604], [414.0, 38.61250000000001], [415.0, 55.126984126984134], [412.0, 56.6], [413.0, 52.731958762886634], [409.0, 50.312499999999986], [410.0, 53.17355371900825], [411.0, 56.7], [417.0, 52.551724137931025], [416.0, 73.76666666666664], [418.0, 42.159574468085104], [419.0, 41.280898876404486], [420.0, 42.09225092250916], [421.0, 46.723577235772375], [422.0, 53.99019607843136], [423.0, 56.59459459459456], [424.0, 68.49180327868851], [430.0, 53.96052631578947], [431.0, 64.21739130434781], [428.0, 48.36470588235294], [429.0, 56.41772151898738], [425.0, 74.03999999999999], [426.0, 43.96000000000001], [427.0, 58.50877192982454], [433.0, 71.19148936170211], [432.0, 64.11627906976744], [434.0, 44.54609929078014], [435.0, 58.041916167664674], [436.0, 54.36718749999998], [437.0, 59.583333333333314], [438.0, 44.50387596899227], [439.0, 39.56603773584905], [440.0, 92.5], [446.0, 74.63076923076925], [447.0, 64.71428571428572], [444.0, 51.523489932885916], [445.0, 42.823104693140834], [441.0, 90.87500000000001], [442.0, 59.29166666666668], [443.0, 86.94736842105264], [449.0, 60.62765957446808], [448.0, 59.01020408163264], [450.0, 55.31249999999999], [451.0, 67.22826086956516], [452.0, 59.85714285714287], [453.0, 56.68965517241381], [454.0, 46.68421052631578], [455.0, 66.81132075471697], [456.0, 67.37735849056602], [462.0, 46.23999999999999], [463.0, 52.265486725663706], [460.0, 47.864406779661024], [461.0, 64.78333333333336], [457.0, 60.4642857142857], [458.0, 49.199999999999996], [459.0, 77.13043478260869], [465.0, 59.892307692307696], [464.0, 66.9230769230769], [466.0, 56.14184397163121], [467.0, 81.44444444444443], [468.0, 60.984375], [469.0, 70.90625], [470.0, 82.61999999999999], [471.0, 63.393258426966305], [472.0, 54.99543378995435], [478.0, 69.69491525423733], [479.0, 75.09302325581396], [476.0, 52.86422976501303], [477.0, 52.454545454545446], [473.0, 81.42352941176469], [474.0, 83.32692307692305], [475.0, 67.10000000000002], [481.0, 64.40677966101697], [480.0, 55.483516483516496], [482.0, 94.1111111111111], [483.0, 99.4736842105263], [484.0, 77.56410256410258], [485.0, 91.18518518518518], [486.0, 96.5], [487.0, 99.00000000000001], [488.0, 59.415999999999976], [494.0, 70.19650655021833], [495.0, 69.73484848484848], [492.0, 66.75167785234898], [493.0, 76.27878787878785], [489.0, 47.55462184873949], [491.0, 56.685714285714276], [490.0, 43.77272727272728], [497.0, 59.158730158730165], [496.0, 73.53225806451611], [498.0, 75.75903614457829], [499.0, 114.09302325581396], [500.0, 72.24390243902438], [501.0, 78.06557377049182], [502.0, 75.48387096774194], [503.0, 55.52325581395347], [504.0, 59.104575163398714], [510.0, 63.980000000000004], [511.0, 66.5873015873016], [508.0, 58.90681003584233], [509.0, 61.2849740932642], [505.0, 55.36666666666666], [506.0, 67.81176470588233], [507.0, 76.00000000000001], [515.0, 76.10256410256412], [512.0, 64.43703703703703], [526.0, 95.00000000000001], [527.0, 58.87096774193547], [524.0, 62.29591836734697], [525.0, 75.76666666666665], [522.0, 51.6830357142857], [523.0, 64.31343283582088], [513.0, 83.23076923076921], [514.0, 71.71052631578947], [516.0, 66.13084112149534], [517.0, 69.02094240837692], [518.0, 55.9040404040404], [519.0, 65.20535714285717], [528.0, 62.96946564885494], [542.0, 112.77777777777777], [541.0, 52.82236842105261], [540.0, 53.964757709251145], [539.0, 55.62499999999999], [538.0, 59.34905660377358], [543.0, 74.5789473684211], [536.0, 71.95180722891563], [537.0, 59.71428571428572], [529.0, 55.47058823529413], [530.0, 60.419689119170975], [531.0, 70.91379310344826], [532.0, 82.62962962962962], [533.0, 72.28735632183907], [534.0, 66.67484662576689], [535.0, 77.17543859649122], [520.0, 75.50000000000001], [521.0, 77.51020408163264], [547.0, 87.27142857142854], [544.0, 82.6306306306306], [558.0, 68.84482758620692], [559.0, 64.95588235294116], [556.0, 64.08152173913041], [557.0, 61.57333333333333], [554.0, 62.0775510204082], [555.0, 62.35028248587573], [545.0, 61.98543689320392], [546.0, 78.61702127659576], [548.0, 84.89795918367346], [549.0, 57.79251700680274], [550.0, 55.11557788944721], [551.0, 59.76785714285714], [560.0, 61.16568047337279], [574.0, 59.057017543859644], [575.0, 59.86792452830189], [572.0, 57.4102564102564], [573.0, 62.66433566433569], [570.0, 68.32000000000001], [571.0, 59.50495049504951], [568.0, 53.89037433155081], [569.0, 58.40000000000001], [561.0, 54.95054945054945], [562.0, 62.06666666666667], [563.0, 61.853448275862085], [564.0, 57.84805653710246], [565.0, 56.76470588235297], [566.0, 58.333333333333336], [567.0, 59.01960784313727], [552.0, 63.90789473684214], [553.0, 63.85294117647058], [579.0, 63.86046511627906], [576.0, 60.5968992248062], [590.0, 61.7162162162162], [591.0, 63.33544303797464], [588.0, 67.31666666666668], [589.0, 65.18848167539265], [586.0, 72.22619047619047], [587.0, 69.3298969072165], [577.0, 69.05970149253731], [578.0, 76.0], [580.0, 63.084112149532714], [581.0, 67.57142857142857], [582.0, 68.2608695652174], [583.0, 73.60204081632654], [592.0, 57.70285714285716], [606.0, 68.29032258064514], [607.0, 66.55769230769229], [604.0, 63.35593220338984], [605.0, 59.7611111111111], [602.0, 65.26966292134833], [603.0, 63.74025974025975], [600.0, 65.14473684210526], [601.0, 67.1652173913044], [593.0, 66.27040816326532], [594.0, 69.81725888324874], [595.0, 56.647686832740206], [596.0, 58.924670433145025], [597.0, 61.43382352941177], [598.0, 65.39690721649494], [599.0, 64.70860927152323], [584.0, 65.30726256983239], [585.0, 69.76595744680849], [615.0, 69.55624999999999], [611.0, 68.44761904761907], [608.0, 66.51190476190477], [623.0, 74.66926677067084], [609.0, 64.08139534883719], [610.0, 69.61333333333336], [612.0, 71.55392156862746], [613.0, 69.24460431654676], [614.0, 66.43672456575692], [624.0, 75.4616384915475], [638.0, 72.76623376623377], [639.0, 85.11764705882354], [636.0, 94.47222222222223], [637.0, 73.22807017543862], [634.0, 75.6470588235294], [635.0, 79.19672131147539], [632.0, 79.28632478632478], [633.0, 83.61290322580643], [625.0, 78.00940860215063], [626.0, 77.11574697173621], [627.0, 76.79836734693868], [628.0, 78.2232779097387], [629.0, 83.02529761904758], [630.0, 83.74354838709674], [631.0, 90.74528301886788], [616.0, 61.6559485530547], [617.0, 70.42159383033425], [619.0, 77.1321138211382], [618.0, 68.06822612085767], [621.0, 66.80373831775697], [620.0, 68.40510366826156], [622.0, 75.24351297405194], [643.0, 68.88571428571427], [640.0, 79.50980392156863], [654.0, 107.09285714285713], [655.0, 93.71705426356591], [652.0, 72.5731707317073], [653.0, 84.00625000000001], [650.0, 81.37956204379564], [651.0, 82.02777777777779], [641.0, 90.19000000000001], [642.0, 84.14754098360655], [644.0, 75.66393442622953], [645.0, 78.90909090909089], [646.0, 84.33846153846156], [647.0, 78.61835748792268], [657.0, 110.04819277108439], [656.0, 18.6], [670.0, 90.79487179487177], [671.0, 86.6829268292683], [668.0, 105.7768595041322], [669.0, 82.45454545454542], [666.0, 88.68852459016396], [667.0, 94.1748251748252], [664.0, 99.64485981308412], [665.0, 88.39215686274514], [658.0, 100.18749999999999], [659.0, 98.49253731343286], [660.0, 104.60000000000001], [661.0, 103.27272727272727], [662.0, 93.19444444444446], [663.0, 105.76595744680851], [648.0, 78.41509433962267], [649.0, 82.02238805970147], [675.0, 89.93506493506496], [672.0, 80.44137931034484], [686.0, 82.01282051282054], [687.0, 87.58762886597937], [684.0, 84.13114754098362], [685.0, 92.23437499999996], [682.0, 88.12658227848102], [683.0, 103.52252252252252], [673.0, 84.38709677419355], [674.0, 79.64285714285711], [676.0, 77.9189189189189], [677.0, 85.17525773195875], [678.0, 78.54639175257734], [679.0, 79.71428571428571], [688.0, 79.02747252747253], [703.0, 147.70588235294116], [702.0, 107.23076923076923], [700.0, 94.33684210526319], [701.0, 118.64772727272725], [698.0, 94.13028169014086], [699.0, 92.52307692307689], [696.0, 93.80392156862746], [697.0, 89.74936061381075], [689.0, 91.80373831775698], [690.0, 93.16091954022986], [691.0, 89.58139534883718], [692.0, 96.73404255319149], [693.0, 96.77777777777779], [694.0, 84.90476190476188], [695.0, 94.16279069767442], [680.0, 77.86538461538464], [681.0, 72.6122448979592], [704.0, 88.74647887323945], [705.0, 85.28327645051196], [706.0, 79.96710526315793], [707.0, 82.97523219814245], [708.0, 81.45849802371545], [709.0, 77.72222222222223], [710.0, 78.30081300813008], [711.0, 82.68421052631578], [1.0, 1.0]], "isOverall": false, "label": "Create a book", "isController": false}, {"data": [[406.80344999999977, 51.883337500000096]], "isOverall": false, "label": "Create a book-Aggregated", "isController": false}, {"data": [[2.0, 0.7], [3.0, 0.6], [4.0, 0.6875], [5.0, 0.7391304347826088], [6.0, 0.576923076923077], [7.0, 0.7073170731707316], [8.0, 0.8252788104089214], [9.0, 0.8551782206006175], [10.0, 0.9273182957393482], [11.0, 0.9007092198581559], [12.0, 0.9302325581395346], [13.0, 1.0270270270270274], [14.0, 1.1282051282051284], [15.0, 1.0263157894736845], [16.0, 1.067307692307692], [17.0, 1.047619047619048], [18.0, 1.1481481481481486], [19.0, 1.1904761904761907], [20.0, 1.791044776119403], [21.0, 1.4343434343434338], [22.0, 1.6101694915254237], [23.0, 1.294871794871795], [24.0, 1.5609756097560972], [25.0, 1.45], [26.0, 1.495575221238938], [27.0, 1.5593220338983054], [28.0, 1.5862068965517238], [29.0, 1.7564102564102564], [30.0, 1.8965517241379308], [31.0, 2.0833333333333335], [33.0, 1.7216494845360826], [32.0, 1.8068181818181819], [35.0, 1.9647058823529413], [34.0, 1.78021978021978], [37.0, 1.8971428571428577], [36.0, 1.629629629629629], [38.0, 1.936507936507936], [39.0, 1.5555555555555556], [41.0, 2.0638297872340434], [40.0, 2.11764705882353], [43.0, 2.4615384615384617], [42.0, 2.3076923076923075], [45.0, 2.7795275590551176], [44.0, 2.8387096774193554], [47.0, 3.1999999999999993], [46.0, 3.1764705882352935], [49.0, 3.4695121951219523], [48.0, 3.134146341463415], [51.0, 3.8857142857142852], [50.0, 3.726256983240223], [53.0, 3.818627450980394], [52.0, 3.703448275862069], [55.0, 3.9661016949152548], [54.0, 3.8951612903225796], [57.0, 3.9812499999999997], [56.0, 4.120000000000001], [59.0, 4.846153846153848], [58.0, 4.175], [61.0, 4.032608695652177], [60.0, 4.275862068965519], [63.0, 4.444444444444443], [62.0, 4.2250000000000005], [67.0, 5.124031007751937], [66.0, 7.99115044247788], [65.0, 4.647058823529413], [64.0, 4.571428571428571], [71.0, 4.516129032258065], [70.0, 4.447368421052631], [69.0, 5.25], [68.0, 4.958762886597938], [75.0, 3.8734177215189884], [74.0, 5.104477611940299], [73.0, 4.962616822429908], [72.0, 4.87603305785124], [79.0, 4.210526315789474], [78.0, 3.9000000000000012], [77.0, 4.321100917431195], [76.0, 4.2857142857142865], [83.0, 4.763157894736839], [82.0, 3.740740740740741], [81.0, 3.6250000000000004], [80.0, 4.119565217391303], [87.0, 4.285714285714286], [86.0, 4.6896551724137945], [85.0, 4.538461538461538], [84.0, 4.2], [91.0, 4.788461538461538], [90.0, 4.985915492957746], [89.0, 4.785714285714285], [88.0, 4.355932203389833], [95.0, 5.777777777777779], [94.0, 5.030612244897962], [93.0, 4.52], [92.0, 7.984848484848488], [99.0, 4.976562500000003], [98.0, 5.357142857142857], [97.0, 4.919999999999998], [96.0, 5.407407407407407], [103.0, 4.0], [102.0, 6.620689655172414], [101.0, 5.416666666666668], [100.0, 5.725352112676056], [107.0, 5.714285714285715], [106.0, 5.597701149425288], [105.0, 5.800000000000002], [104.0, 6.285714285714286], [111.0, 6.6521739130434785], [110.0, 6.282608695652175], [109.0, 5.571428571428571], [108.0, 6.6875], [115.0, 7.466666666666665], [114.0, 8.152173913043478], [113.0, 8.316455696202526], [112.0, 8.22857142857143], [119.0, 8.964285714285712], [118.0, 8.142857142857144], [117.0, 7.764227642276422], [116.0, 6.857142857142858], [123.0, 8.339622641509436], [122.0, 8.0], [121.0, 8.025], [120.0, 10.095890410958905], [127.0, 8.61111111111111], [126.0, 8.2], [125.0, 8.348837209302324], [124.0, 9.092592592592595], [135.0, 7.967741935483869], [134.0, 7.377358490566037], [133.0, 8.371900826446279], [132.0, 7.938596491228069], [131.0, 8.382978723404253], [130.0, 8.419753086419751], [129.0, 8.836363636363636], [128.0, 9.0], [143.0, 8.06122448979592], [142.0, 9.172727272727268], [141.0, 8.44642857142857], [140.0, 8.515789473684208], [139.0, 8.538461538461538], [138.0, 9.142857142857144], [137.0, 8.352941176470589], [136.0, 8.74074074074074], [151.0, 9.066666666666666], [150.0, 9.6], [149.0, 8.760000000000003], [148.0, 8.571428571428571], [147.0, 8.77227722772277], [146.0, 8.204301075268823], [145.0, 8.040540540540537], [144.0, 8.085714285714287], [159.0, 10.458333333333336], [157.0, 9.80269058295964], [158.0, 9.856060606060607], [156.0, 9.85714285714286], [155.0, 10.14705882352941], [154.0, 9.930232558139533], [153.0, 9.259999999999998], [152.0, 9.499999999999998], [167.0, 11.142857142857142], [166.0, 11.6], [165.0, 10.538461538461537], [164.0, 11.178571428571432], [163.0, 11.272727272727272], [162.0, 10.555555555555555], [161.0, 10.625], [160.0, 10.495238095238099], [175.0, 11.857142857142856], [174.0, 12.214285714285715], [173.0, 13.100000000000001], [172.0, 12.733333333333329], [171.0, 11.375], [170.0, 11.488372093023251], [169.0, 12.51369863013698], [168.0, 11.631578947368421], [183.0, 13.909090909090908], [182.0, 13.396694214876032], [181.0, 12.447368421052632], [180.0, 11.979591836734695], [179.0, 13.812499999999993], [177.0, 16.046511627906984], [176.0, 11.601351351351349], [191.0, 12.6], [190.0, 13.738461538461538], [189.0, 13.672131147540984], [188.0, 13.94520547945205], [187.0, 14.0], [186.0, 16.6], [185.0, 16.555555555555557], [184.0, 16.6], [199.0, 14.583333333333334], [198.0, 15.564516129032258], [197.0, 16.828571428571422], [196.0, 17.896551724137932], [195.0, 16.869565217391305], [194.0, 13.388059701492537], [193.0, 14.125], [192.0, 12.0], [207.0, 14.395604395604394], [206.0, 14.517647058823526], [205.0, 13.11320754716981], [204.0, 16.833333333333336], [203.0, 13.67073170731707], [202.0, 13.059405940594054], [201.0, 13.347826086956522], [200.0, 13.415730337078656], [211.0, 30.683333333333326], [212.0, 43.24000000000001], [213.0, 18.33783783783784], [214.0, 14.585714285714287], [215.0, 17.828571428571436], [210.0, 13.934426229508203], [209.0, 14.084210526315797], [208.0, 13.619047619047613], [216.0, 37.43589743589743], [217.0, 18.93157894736842], [218.0, 22.21774193548386], [219.0, 18.31578947368421], [220.0, 22.590909090909093], [221.0, 13.918918918918918], [222.0, 34.0], [223.0, 13.27272727272727], [224.0, 122.59259259259258], [225.0, 14.666666666666664], [226.0, 30.574803149606314], [228.0, 32.54128440366972], [229.0, 29.605633802816914], [230.0, 26.362831858407088], [231.0, 29.237704918032794], [227.0, 16.74015748031496], [232.0, 23.545454545454543], [233.0, 108.34693877551022], [234.0, 15.683168316831686], [235.0, 44.603773584905646], [236.0, 40.71844660194177], [237.0, 30.562091503267975], [238.0, 18.530612244897956], [239.0, 45.20689655172415], [240.0, 27.956521739130434], [241.0, 67.92307692307692], [242.0, 31.155555555555562], [243.0, 23.25333333333334], [244.0, 22.865979381443303], [245.0, 26.62352941176471], [246.0, 17.40764331210192], [247.0, 17.704545454545453], [248.0, 50.93000000000002], [249.0, 23.93103448275862], [250.0, 17.549999999999997], [251.0, 27.882978723404243], [252.0, 15.921739130434785], [253.0, 20.07142857142857], [254.0, 22.823529411764707], [255.0, 30.13513513513512], [257.0, 21.685714285714287], [256.0, 55.888888888888886], [258.0, 51.310344827586206], [259.0, 44.20634920634921], [260.0, 42.6388888888889], [261.0, 39.43478260869564], [262.0, 22.122807017543856], [263.0, 20.293749999999992], [264.0, 27.505882352941175], [270.0, 18.917647058823523], [271.0, 19.93846153846154], [268.0, 46.86666666666667], [269.0, 22.11111111111112], [265.0, 22.195121951219512], [266.0, 36.04], [267.0, 41.70769230769231], [273.0, 24.51503759398497], [272.0, 35.25000000000001], [274.0, 34.91803278688525], [275.0, 44.23809523809524], [276.0, 62.04000000000001], [277.0, 45.45945945945946], [278.0, 22.741935483870968], [279.0, 21.044585987261136], [280.0, 37.73529411764707], [286.0, 19.765957446808507], [287.0, 17.98230088495575], [284.0, 23.3375], [285.0, 21.977142857142855], [281.0, 26.545454545454533], [282.0, 35.48888888888888], [283.0, 29.914529914529894], [289.0, 41.32352941176468], [288.0, 22.07692307692308], [290.0, 28.647058823529413], [291.0, 69.54545454545456], [292.0, 28.806722689075652], [293.0, 46.62820512820513], [294.0, 26.347826086956523], [295.0, 21.465517241379313], [296.0, 14.391304347826088], [303.0, 24.054945054945055], [301.0, 30.030303030303028], [302.0, 22.2394366197183], [297.0, 18.46296296296296], [298.0, 23.01818181818182], [299.0, 25.39705882352941], [305.0, 22.28947368421052], [304.0, 20.05263157894737], [306.0, 23.9423076923077], [307.0, 163.1063829787234], [308.0, 86.7142857142857], [309.0, 56.18354430379743], [310.0, 86.90625], [311.0, 32.39622641509435], [312.0, 32.26153846153846], [318.0, 39.44871794871795], [319.0, 39.99999999999999], [316.0, 25.84615384615385], [317.0, 31.17921146953405], [313.0, 40.485714285714295], [314.0, 56.89189189189188], [315.0, 45.3953488372093], [321.0, 33.58241758241759], [320.0, 63.82608695652173], [322.0, 31.856115107913666], [323.0, 30.42962962962963], [324.0, 32.462686567164184], [325.0, 36.24999999999999], [326.0, 32.863247863247835], [327.0, 37.975000000000016], [328.0, 48.333333333333336], [334.0, 30.500000000000018], [335.0, 36.73404255319148], [332.0, 31.033333333333324], [333.0, 31.680365296803643], [329.0, 49.95833333333334], [330.0, 45.20408163265306], [331.0, 35.3731343283582], [337.0, 49.377358490566046], [336.0, 53.25000000000001], [338.0, 31.4493670886076], [339.0, 37.777777777777786], [340.0, 45.5], [341.0, 33.69565217391304], [342.0, 31.770833333333332], [343.0, 42.50980392156863], [344.0, 58.75862068965516], [350.0, 52.08333333333333], [351.0, 55.3265306122449], [348.0, 47.11111111111112], [349.0, 54.1], [345.0, 42.44642857142857], [346.0, 62.76666666666666], [347.0, 59.0], [353.0, 38.63636363636364], [352.0, 49.6], [354.0, 42.26315789473685], [355.0, 36.235772357723576], [356.0, 36.91025641025642], [357.0, 39.516853932584276], [358.0, 47.84057971014494], [359.0, 31.991596638655462], [360.0, 41.65116279069767], [366.0, 53.9423076923077], [367.0, 31.067567567567572], [364.0, 38.25000000000001], [365.0, 35.31249999999998], [361.0, 43.81159420289855], [362.0, 38.8131868131868], [363.0, 61.50000000000001], [369.0, 54.720000000000006], [368.0, 37.39393939393941], [370.0, 38.555555555555586], [371.0, 31.96498054474707], [372.0, 46.46067415730337], [373.0, 53.62857142857141], [374.0, 44.000000000000014], [375.0, 39.123595505617985], [376.0, 42.838235294117645], [382.0, 63.131578947368425], [383.0, 46.599999999999994], [380.0, 41.400000000000006], [381.0, 36.781954887218056], [377.0, 29.96621621621622], [378.0, 35.41129032258064], [379.0, 32.94779116465861], [385.0, 38.55128205128204], [384.0, 35.31297709923664], [386.0, 40.4563758389262], [387.0, 33.67333333333335], [388.0, 36.06190476190477], [389.0, 39.27272727272729], [390.0, 33.79146919431281], [391.0, 32.32638888888888], [392.0, 38.42465753424658], [398.0, 48.61666666666667], [399.0, 60.2820512820513], [396.0, 44.3125], [397.0, 46.98591549295775], [393.0, 36.58333333333334], [394.0, 40.49484536082473], [395.0, 39.88709677419354], [401.0, 43.20779220779222], [400.0, 41.24799999999999], [402.0, 55.508474576271176], [403.0, 61.7111111111111], [404.0, 34.96470588235295], [405.0, 41.18292682926831], [406.0, 49.3695652173913], [407.0, 40.44210526315791], [408.0, 35.69672131147542], [414.0, 24.883720930232563], [415.0, 43.64516129032257], [412.0, 59.781250000000014], [413.0, 47.61224489795919], [409.0, 47.842857142857135], [410.0, 49.23893805309736], [411.0, 30.614035087719305], [417.0, 38.36633663366336], [416.0, 64.19999999999999], [418.0, 34.98275862068966], [419.0, 32.888461538461556], [420.0, 33.852713178294586], [421.0, 41.03333333333331], [422.0, 41.56862745098038], [423.0, 57.477272727272705], [424.0, 55.78571428571428], [430.0, 52.64761904761905], [431.0, 52.58823529411766], [428.0, 43.61458333333335], [429.0, 55.79661016949153], [425.0, 57.37704918032787], [426.0, 46.96666666666667], [427.0, 42.151515151515156], [433.0, 61.9090909090909], [432.0, 42.790697674418595], [434.0, 42.319148936170215], [435.0, 44.019867549668845], [436.0, 42.41129032258065], [437.0, 49.469387755102055], [438.0, 31.211382113821127], [439.0, 41.55319148936171], [440.0, 51.87037037037039], [446.0, 56.58333333333334], [447.0, 50.20202020202019], [444.0, 43.155555555555566], [445.0, 38.028985507246404], [441.0, 75.7], [442.0, 62.3098591549296], [443.0, 79.28571428571429], [449.0, 48.702702702702695], [448.0, 48.55050505050506], [450.0, 45.72727272727273], [451.0, 50.252427184466015], [452.0, 45.86046511627907], [453.0, 51.69333333333333], [454.0, 48.125], [455.0, 54.42307692307692], [456.0, 57.173913043478265], [462.0, 41.682539682539655], [463.0, 43.75757575757576], [460.0, 44.454022988505756], [461.0, 55.71875000000001], [457.0, 53.249999999999986], [458.0, 42.53164556962026], [459.0, 72.0625], [465.0, 47.28124999999999], [464.0, 58.07766990291258], [466.0, 47.21527777777778], [467.0, 64.57894736842107], [468.0, 56.46666666666667], [469.0, 64.96363636363637], [470.0, 53.95081967213114], [471.0, 53.43564356435644], [472.0, 45.12785388127853], [478.0, 55.31481481481483], [479.0, 71.66666666666667], [476.0, 50.266990291262104], [477.0, 46.54696132596681], [473.0, 54.49999999999999], [474.0, 70.39999999999999], [475.0, 64.57777777777774], [481.0, 57.967741935483865], [480.0, 61.21590909090908], [482.0, 80.71428571428572], [483.0, 85.57142857142858], [484.0, 64.48529411764707], [485.0, 81.10000000000001], [486.0, 88.68181818181819], [487.0, 91.78125000000001], [488.0, 53.400000000000006], [494.0, 59.71784232365153], [495.0, 62.090909090909115], [492.0, 55.50980392156861], [493.0, 64.01754385964914], [489.0, 37.43902439024389], [491.0, 54.0], [490.0, 40.514285714285705], [497.0, 51.35294117647059], [496.0, 58.370078740157496], [498.0, 70.9767441860465], [499.0, 88.5217391304348], [500.0, 65.28260869565217], [501.0, 68.6315789473684], [502.0, 60.122807017543856], [503.0, 46.49668874172186], [504.0, 44.87951807228913], [510.0, 50.58823529411766], [511.0, 67.57692307692305], [508.0, 49.4855072463768], [509.0, 49.515306122448976], [505.0, 47.4107142857143], [506.0, 56.567307692307665], [507.0, 61.957746478873254], [515.0, 60.57142857142856], [512.0, 51.50847457627119], [526.0, 71.23684210526316], [527.0, 47.77952755905511], [524.0, 50.8403361344538], [525.0, 65.46551724137932], [522.0, 43.265306122449], [523.0, 53.19753086419753], [513.0, 62.38709677419356], [514.0, 58.10256410256411], [516.0, 49.33913043478262], [517.0, 58.795811518324584], [518.0, 46.32631578947373], [519.0, 54.881578947368425], [528.0, 49.87786259541986], [542.0, 88.62745098039215], [541.0, 44.657718120805356], [540.0, 46.91943127962086], [539.0, 51.181034482758605], [538.0, 56.300000000000004], [543.0, 55.389473684210536], [536.0, 60.21999999999996], [537.0, 56.505747126436816], [529.0, 46.173076923076934], [530.0, 54.41237113402063], [531.0, 69.86153846153843], [532.0, 72.36231884057973], [533.0, 60.447368421052644], [534.0, 59.95483870967741], [535.0, 73.78947368421056], [520.0, 80.11764705882351], [521.0, 61.11363636363635], [547.0, 75.52631578947368], [544.0, 75.91891891891889], [558.0, 61.47540983606555], [559.0, 57.55555555555556], [556.0, 61.80851063829788], [557.0, 56.86290322580644], [554.0, 52.32882882882886], [555.0, 55.796019900497484], [545.0, 59.623430962343086], [546.0, 60.972222222222236], [548.0, 45.378787878787875], [549.0, 48.44979919678714], [550.0, 47.98104265402846], [551.0, 48.97101449275363], [560.0, 50.275167785234906], [574.0, 54.38356164383561], [575.0, 50.13636363636361], [572.0, 50.20231213872833], [573.0, 54.03], [570.0, 59.161616161616166], [571.0, 57.79411764705881], [568.0, 45.703703703703724], [569.0, 47.6030534351145], [561.0, 53.017441860465105], [562.0, 57.819672131147534], [563.0, 58.98979591836735], [564.0, 51.30830039525692], [565.0, 44.64459930313592], [566.0, 50.12820512820513], [567.0, 52.97409326424874], [552.0, 56.52857142857144], [553.0, 56.16867469879517], [579.0, 59.289855072463766], [576.0, 52.081300813008134], [590.0, 66.21848739495798], [591.0, 55.984496124031004], [588.0, 61.76470588235294], [589.0, 54.30131004366813], [586.0, 66.43956043956044], [587.0, 56.421052631578945], [577.0, 67.15873015873015], [578.0, 67.8], [580.0, 59.07096774193549], [581.0, 69.5], [582.0, 68.9074074074074], [583.0, 68.32038834951454], [592.0, 54.40526315789473], [606.0, 54.479674796747965], [607.0, 62.69090909090908], [604.0, 58.60483870967741], [605.0, 61.87692307692308], [602.0, 57.1214953271028], [603.0, 52.98058252427186], [600.0, 58.459627329192564], [601.0, 54.058823529411754], [593.0, 57.66824644549763], [594.0, 60.680272108843525], [595.0, 49.00367647058819], [596.0, 54.70442477876109], [597.0, 58.1287284144427], [598.0, 53.861111111111114], [599.0, 61.657608695652165], [584.0, 60.64444444444444], [585.0, 64.89830508474576], [615.0, 60.587053571428605], [611.0, 65.7142857142857], [608.0, 57.63513513513513], [623.0, 68.6355283307809], [609.0, 53.323943661971846], [610.0, 60.47560975609758], [612.0, 68.16949152542368], [613.0, 60.60169491525424], [614.0, 67.30676328502416], [624.0, 63.11973684210519], [638.0, 86.39999999999998], [639.0, 78.8767123287671], [636.0, 68.825], [637.0, 69.03937007874013], [634.0, 65.13761467889911], [635.0, 64.50746268656717], [632.0, 81.37499999999999], [633.0, 74.85384615384622], [625.0, 70.94770408163264], [626.0, 73.49797570850201], [627.0, 71.15270935960605], [628.0, 69.52667423382518], [629.0, 69.93513513513518], [630.0, 72.59970014992506], [631.0, 72.05940594059406], [616.0, 58.94152046783629], [617.0, 54.987080103359126], [619.0, 67.61068702290085], [618.0, 54.85046728971962], [621.0, 57.94103194103187], [620.0, 64.88790560471978], [622.0, 65.2054507337527], [643.0, 66.40833333333329], [640.0, 76.24489795918367], [654.0, 86.82901554404143], [655.0, 78.20982142857146], [652.0, 68.14450867052022], [653.0, 71.05025125628136], [650.0, 70.46666666666667], [651.0, 64.42857142857143], [641.0, 79.01626016260161], [642.0, 74.39240506329115], [644.0, 68.02678571428572], [645.0, 56.309523809523796], [646.0, 60.64948453608247], [647.0, 73.68263473053891], [657.0, 84.11538461538458], [656.0, 130.0], [670.0, 63.96078431372549], [671.0, 85.18269230769229], [668.0, 87.20689655172416], [669.0, 77.46268656716417], [666.0, 70.79850746268657], [667.0, 73.1025641025641], [664.0, 72.94594594594592], [665.0, 79.45977011494253], [658.0, 84.2608695652174], [659.0, 83.08333333333334], [660.0, 97.21621621621622], [661.0, 92.25], [662.0, 96.61666666666665], [663.0, 106.71111111111114], [648.0, 68.14444444444445], [649.0, 70.24545454545452], [675.0, 70.48809523809521], [672.0, 81.84684684684686], [686.0, 88.1046511627907], [687.0, 73.95283018867921], [684.0, 67.60000000000001], [685.0, 78.75], [682.0, 73.32203389830512], [683.0, 82.45945945945941], [673.0, 79.17741935483873], [674.0, 83.05357142857144], [676.0, 64.46428571428572], [677.0, 76.27777777777779], [678.0, 78.59999999999998], [679.0, 74.03125000000001], [688.0, 70.34426229508193], [702.0, 89.92857142857143], [703.0, 125.79439252336446], [700.0, 66.09090909090905], [701.0, 100.31515151515154], [698.0, 81.79268292682923], [699.0, 86.33064516129038], [696.0, 87.54545454545452], [697.0, 78.01408450704234], [689.0, 82.92857142857142], [690.0, 82.66279069767442], [691.0, 83.16521739130435], [692.0, 74.51851851851856], [693.0, 91.56818181818183], [694.0, 94.06250000000001], [695.0, 88.47191011235955], [680.0, 69.15384615384617], [681.0, 87.36486486486487], [704.0, 90.67567567567565], [705.0, 86.59402985074634], [706.0, 77.20512820512813], [707.0, 78.77566539923956], [708.0, 69.83534136546183], [709.0, 66.0], [710.0, 78.53787878787884], [711.0, 83.5], [1.0, 0.6666666666666666]], "isOverall": false, "label": "Get book by id", "isController": false}, {"data": [[406.76941249999817, 42.8814375]], "isOverall": false, "label": "Get book by id-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 711.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 150628.88333333333, "minX": 1.7039943E12, "maxY": 443459.06666666665, "series": [{"data": [[1.7039943E12, 443459.06666666665], [1.70399436E12, 152398.31666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7039943E12, 438561.8333333333], [1.70399436E12, 150628.88333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70399436E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6.461429616979749, "minX": 1.7039943E12, "maxY": 66.19895270383687, "series": [{"data": [[1.7039943E12, 66.19895270383687], [1.70399436E12, 10.10877656969338]], "isOverall": false, "label": "Create a book", "isController": false}, {"data": [[1.7039943E12, 55.42539282413209], [1.70399436E12, 6.461429616979749]], "isOverall": false, "label": "Get book by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70399436E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6.45206147840933, "minX": 1.7039943E12, "maxY": 66.1117619415258, "series": [{"data": [[1.7039943E12, 66.1117619415258], [1.70399436E12, 10.097658928396523]], "isOverall": false, "label": "Create a book", "isController": false}, {"data": [[1.7039943E12, 55.41367952272873], [1.70399436E12, 6.45206147840933]], "isOverall": false, "label": "Get book by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70399436E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7039943E12, "maxY": 2.5177402571246486, "series": [{"data": [[1.7039943E12, 2.5177402571246486], [1.70399436E12, 0.1371339014594951]], "isOverall": false, "label": "Create a book", "isController": false}, {"data": [[1.7039943E12, 0.0], [1.70399436E12, 0.0]], "isOverall": false, "label": "Get book by id", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70399436E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7039943E12, "maxY": 1628.0, "series": [{"data": [[1.7039943E12, 1628.0], [1.70399436E12, 57.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7039943E12, 44.0], [1.70399436E12, 6.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7039943E12, 58.0], [1.70399436E12, 10.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7039943E12, 48.0], [1.70399436E12, 8.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7039943E12, 3.0], [1.70399436E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7039943E12, 31.0], [1.70399436E12, 1.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70399436E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 195.0, "maxY": 907.0, "series": [{"data": [[8922.0, 85.0], [9553.0, 78.0], [9936.0, 2.0], [10552.0, 67.0], [10759.0, 59.0], [10766.0, 50.0], [11088.0, 8.0], [11320.0, 38.0], [11395.0, 28.0], [11487.0, 17.0], [195.0, 907.0], [3804.0, 22.0], [5171.0, 67.0], [5341.0, 84.0], [401.0, 1.0], [7182.0, 76.0], [8127.0, 79.0], [8000.0, 100.0], [8001.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11487.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 195.0, "maxY": 879.0, "series": [{"data": [[8922.0, 85.0], [9553.0, 78.0], [9936.0, 2.0], [10552.0, 67.0], [10759.0, 59.0], [10766.0, 50.0], [11088.0, 8.0], [11320.0, 38.0], [11395.0, 28.0], [11487.0, 17.0], [195.0, 879.0], [3804.0, 22.0], [5171.0, 67.0], [5341.0, 84.0], [401.0, 1.0], [7182.0, 76.0], [8127.0, 79.0], [8000.0, 100.0], [8001.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11487.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 677.85, "minX": 1.7039943E12, "maxY": 1988.8166666666666, "series": [{"data": [[1.7039943E12, 1988.8166666666666], [1.70399436E12, 677.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70399436E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 681.8833333333333, "minX": 1.7039943E12, "maxY": 1984.7833333333333, "series": [{"data": [[1.7039943E12, 1984.7833333333333], [1.70399436E12, 681.8833333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70399436E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 340.3, "minX": 1.7039943E12, "maxY": 993.0333333333333, "series": [{"data": [[1.7039943E12, 991.75], [1.70399436E12, 341.5833333333333]], "isOverall": false, "label": "Get book by id-success", "isController": false}, {"data": [[1.7039943E12, 993.0333333333333], [1.70399436E12, 340.3]], "isOverall": false, "label": "Create a book-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70399436E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 681.8833333333333, "minX": 1.7039943E12, "maxY": 1984.7833333333333, "series": [{"data": [[1.7039943E12, 1984.7833333333333], [1.70399436E12, 681.8833333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70399436E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

