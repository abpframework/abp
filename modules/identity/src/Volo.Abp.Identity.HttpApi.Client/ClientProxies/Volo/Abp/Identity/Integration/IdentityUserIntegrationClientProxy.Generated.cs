// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using Volo.Abp.Identity;
using Volo.Abp.Identity.Integration;
using Volo.Abp.Users;

// ReSharper disable once CheckNamespace
namespace Volo.Abp.Identity.Integration;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IIdentityUserIntegrationService), typeof(IdentityUserIntegrationClientProxy))]
[IntegrationService]
public partial class IdentityUserIntegrationClientProxy : ClientProxyBase<IIdentityUserIntegrationService>, IIdentityUserIntegrationService
{
    public virtual async Task<String[]> GetRoleNamesAsync(Guid id)
    {
        return await RequestAsync<String[]>(nameof(GetRoleNamesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<UserData> FindByIdAsync(Guid id)
    {
        return await RequestAsync<UserData>(nameof(FindByIdAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<UserData> FindByUserNameAsync(string userName)
    {
        return await RequestAsync<UserData>(nameof(FindByUserNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), userName }
        });
    }

    public virtual async Task<ListResultDto<UserData>> SearchAsync(UserLookupSearchInputDto input)
    {
        return await RequestAsync<ListResultDto<UserData>>(nameof(SearchAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserLookupSearchInputDto), input }
        });
    }

    public virtual async Task<long> GetCountAsync(UserLookupCountInputDto input)
    {
        return await RequestAsync<long>(nameof(GetCountAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UserLookupCountInputDto), input }
        });
    }
}
