// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quartz.Database.Sqlite.ConsoleApp.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

namespace Quartz.Database.Sqlite.ConsoleApp.Migrations
{
    [DbContext(typeof(QuartzDatabaseDemoDbContext))]
    [Migration("20210727151039_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.Sqlite)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzBlobTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<byte[]>("BlobData")
                        .HasMaxLength(2147483647)
                        .HasColumnType("BLOB")
                        .HasColumnName("BLOB_DATA");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_BLOB_TRIGGERS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzCalendar", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("CalendarName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("CALENDAR_NAME");

                    b.Property<byte[]>("Calendar")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("BLOB")
                        .HasColumnName("CALENDAR");

                    b.HasKey("SchedulerName", "CalendarName");

                    b.ToTable("QRTZ_CALENDARS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzCronTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("CRON_EXPRESSION");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("TIME_ZONE_ID");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_CRON_TRIGGERS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzFiredTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("EntryId")
                        .HasMaxLength(140)
                        .HasColumnType("TEXT")
                        .HasColumnName("ENTRY_ID");

                    b.Property<long>("FiredTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FIRED_TIME");

                    b.Property<string>("InstanceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("INSTANCE_NAME");

                    b.Property<bool?>("IsNonConcurrent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IS_NONCONCURRENT");

                    b.Property<string>("JobGroup")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("JobName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("JOB_NAME");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PRIORITY");

                    b.Property<bool?>("RequestsRecovery")
                        .HasColumnType("INTEGER")
                        .HasColumnName("REQUESTS_RECOVERY");

                    b.Property<long>("ScheduledTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SCHED_TIME");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("STATE");

                    b.Property<string>("TriggerGroup")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_NAME");

                    b.HasKey("SchedulerName", "EntryId");

                    b.ToTable("QRTZ_FIRED_TRIGGERS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzJobDetail", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("JobName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("JOB_NAME");

                    b.Property<string>("JobGroup")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("IsDurable")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IS_DURABLE");

                    b.Property<bool>("IsNonConcurrent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IS_NONCONCURRENT");

                    b.Property<bool>("IsUpdateData")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IS_UPDATE_DATA");

                    b.Property<string>("JobClassName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("JOB_CLASS_NAME");

                    b.Property<byte[]>("JobData")
                        .HasMaxLength(2147483647)
                        .HasColumnType("BLOB")
                        .HasColumnName("JOB_DATA");

                    b.Property<bool>("RequestsRecovery")
                        .HasColumnType("INTEGER")
                        .HasColumnName("REQUESTS_RECOVERY");

                    b.HasKey("SchedulerName", "JobName", "JobGroup");

                    b.ToTable("QRTZ_JOB_DETAILS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzLock", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("LockName")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("LOCK_NAME");

                    b.HasKey("SchedulerName", "LockName");

                    b.ToTable("QRTZ_LOCKS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzPausedTriggerGroup", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_GROUP");

                    b.HasKey("SchedulerName", "TriggerGroup");

                    b.ToTable("QRTZ_PAUSED_TRIGGER_GRPS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzSchedulerState", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("InstanceName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("INSTANCE_NAME");

                    b.Property<long>("CheckInInterval")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CHECKIN_INTERVAL");

                    b.Property<long>("LastCheckInTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LAST_CHECKIN_TIME");

                    b.HasKey("SchedulerName", "InstanceName");

                    b.ToTable("QRTZ_SCHEDULER_STATE");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzSimplePropertyTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<bool?>("BooleanProperty1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BOOL_PROP_1");

                    b.Property<bool?>("BooleanProperty2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BOOL_PROP_2");

                    b.Property<decimal?>("DecimalProperty1")
                        .HasPrecision(13, 4)
                        .HasColumnType("TEXT")
                        .HasColumnName("DEC_PROP_1");

                    b.Property<decimal?>("DecimalProperty2")
                        .HasPrecision(13, 4)
                        .HasColumnType("TEXT")
                        .HasColumnName("DEC_PROP_2");

                    b.Property<int?>("IntegerProperty1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INT_PROP_1");

                    b.Property<int?>("IntegerProperty2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INT_PROP_2");

                    b.Property<long?>("LongProperty1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LONG_PROP_1");

                    b.Property<long?>("LongProperty2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LONG_PROP_2");

                    b.Property<string>("StringProperty1")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("STR_PROP_1");

                    b.Property<string>("StringProperty2")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("STR_PROP_2");

                    b.Property<string>("StringProperty3")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("STR_PROP_3");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("TIME_ZONE_ID");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_SIMPROP_TIGGERS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzSimpleTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<long>("RepeatCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("REPEAT_COUNT");

                    b.Property<long>("RepeatInterval")
                        .HasColumnType("INTEGER")
                        .HasColumnName("REPEAT_INTERVAL");

                    b.Property<long>("TimesTriggered")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TIMES_TRIGGERED");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_SIMPLE_TRIGGERS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzTrigger", b =>
                {
                    b.Property<string>("SchedulerName")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("CalendarName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("CALENDAR_NAME");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("DESCRIPTION");

                    b.Property<long?>("EndTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("END_TIME");

                    b.Property<byte[]>("JobData")
                        .HasMaxLength(2147483647)
                        .HasColumnType("BLOB")
                        .HasColumnName("JOB_DATA");

                    b.Property<string>("JobGroup")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("JOB_NAME");

                    b.Property<short?>("MisfireInstruction")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MISFIRE_INSTR");

                    b.Property<long?>("NextFireTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NEXT_FIRE_TIME");

                    b.Property<long?>("PreviousFireTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PREV_FIRE_TIME");

                    b.Property<int?>("Priority")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PRIORITY");

                    b.Property<long>("StartTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("START_TIME");

                    b.Property<string>("TriggerState")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_STATE");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("TRIGGER_TYPE");

                    b.HasKey("SchedulerName", "TriggerName", "TriggerGroup");

                    b.HasIndex("SchedulerName", "JobName", "JobGroup");

                    b.ToTable("QRTZ_TRIGGERS");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzBlobTrigger", b =>
                {
                    b.HasOne("Volo.Abp.Quartz.Database.QuartzTrigger", null)
                        .WithMany("BlobTriggers")
                        .HasForeignKey("SchedulerName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzCronTrigger", b =>
                {
                    b.HasOne("Volo.Abp.Quartz.Database.QuartzTrigger", null)
                        .WithMany("CronTriggers")
                        .HasForeignKey("SchedulerName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzSimplePropertyTrigger", b =>
                {
                    b.HasOne("Volo.Abp.Quartz.Database.QuartzTrigger", null)
                        .WithMany("SimplePropertyTriggers")
                        .HasForeignKey("SchedulerName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzSimpleTrigger", b =>
                {
                    b.HasOne("Volo.Abp.Quartz.Database.QuartzTrigger", null)
                        .WithMany("SimpleTriggers")
                        .HasForeignKey("SchedulerName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzTrigger", b =>
                {
                    b.HasOne("Volo.Abp.Quartz.Database.QuartzJobDetail", null)
                        .WithMany("Triggers")
                        .HasForeignKey("SchedulerName", "JobName", "JobGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzJobDetail", b =>
                {
                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("Volo.Abp.Quartz.Database.QuartzTrigger", b =>
                {
                    b.Navigation("BlobTriggers");

                    b.Navigation("CronTriggers");

                    b.Navigation("SimplePropertyTriggers");

                    b.Navigation("SimpleTriggers");
                });
#pragma warning restore 612, 618
        }
    }
}
